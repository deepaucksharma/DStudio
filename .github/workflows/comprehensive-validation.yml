name: Comprehensive Documentation Validation

on:
  workflow_dispatch:
  workflow_call:  # Allow this workflow to be called by other workflows
  schedule:
    - cron: '0 0 * * 0'  # Weekly validation

permissions:
  contents: read
  actions: read

jobs:
  # Deep structural analysis for documentation health
  structural-health-check:
    name: Structural Health Check
    runs-on: ubuntu-latest
    outputs:
      total_issues: ${{ steps.analyze.outputs.total_issues }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: 'requirements.txt'
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements.txt
        
        # Verify critical dependencies are installed
        python -c "import mkdocs; print(f'MkDocs version: {mkdocs.__version__}')"
        mkdocs --version
    
    - name: Run Deep Structure Analysis
      id: analyze
      run: |
        echo "🔍 Analyzing documentation structure..."
        
        # Use the archived script if it exists, otherwise create a simple analysis
        if [ -f "scripts/archive/deep-structure-analyzer.py" ]; then
          python scripts/archive/deep-structure-analyzer.py || true
        else
          # Simple analysis fallback
          echo "Running basic structural analysis..."
          TOTAL=$(find docs -name "*.md" | wc -l)
          echo "{\"total_files\": $TOTAL, \"analysis\": \"basic\"}" > DEEP_STRUCTURE_ISSUES.json
        fi
        
        # Count total issues
        if [ -f "DEEP_STRUCTURE_ISSUES.json" ]; then
          TOTAL=$(python -c "import json; data = json.load(open('DEEP_STRUCTURE_ISSUES.json')); print(sum(len(v) if isinstance(v, list) else 0 for v in data.values()) if isinstance(data, dict) else 0)" 2>/dev/null || echo "0")
          echo "total_issues=$TOTAL" >> $GITHUB_OUTPUT
          echo "📊 Total structural issues: $TOTAL"
        else
          echo "total_issues=0" >> $GITHUB_OUTPUT
        fi
        
    - name: Upload Analysis Report
      uses: actions/upload-artifact@v4
      if: always() && hashFiles('DEEP_STRUCTURE_ISSUES.json') != ''
      with:
        name: structure-analysis-report
        path: DEEP_STRUCTURE_ISSUES.json
        retention-days: 30
        if-no-files-found: warn

  # Check for missing content references
  missing-content-check:
    name: Missing Content Analysis
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install pyyaml requests
    
    - name: Analyze Unrecognized Links
      run: |
        if [ -f "scripts/link-management/analyze-unrecognized-links.py" ]; then
          echo "🔍 Analyzing missing content references..."
          python scripts/link-management/analyze-unrecognized-links.py || true
        else
          echo "Link analysis script not found, creating basic report..."
          echo "{\"unrecognized_links\": [], \"analysis_date\": \"$(date)\"}" > UNRECOGNIZED_LINKS_REPORT.json
        fi
        
    - name: Upload Missing Links Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: missing-links-report
        path: UNRECOGNIZED_LINKS_REPORT.json
        retention-days: 30
        if-no-files-found: warn
    
    - name: Upload Build Log
      if: always() && hashFiles('build.log') != ''
      uses: actions/upload-artifact@v4
      with:
        name: build-log-${{ github.run_number }}
        path: build.log
        retention-days: 7
        if-no-files-found: ignore

  # Build metrics
  build-metrics:
    name: Build Metrics
    runs-on: ubuntu-latest
    outputs:
      warning_count: ${{ steps.build.outputs.warning_count }}
      error_count: ${{ steps.build.outputs.error_count }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: 'requirements.txt'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements.txt
        
        # Verify MkDocs installation
        mkdocs --version
    
    - name: Build and Count Warnings
      id: build
      run: |
        echo "🏗️ Building site to count warnings..."
        
        # Temporarily disable strict mode for build metrics
        cp mkdocs.yml mkdocs.yml.backup
        sed -i 's/strict: true/strict: false/g' mkdocs.yml
        
        # Build with detailed logging
        mkdocs build --verbose 2>&1 | tee build.log || true
        
        # Restore original config
        mv mkdocs.yml.backup mkdocs.yml
        
        # Count warnings and errors
        WARNING_COUNT=$(grep -c "WARNING" build.log || echo "0")
        ERROR_COUNT=$(grep -c "ERROR" build.log || echo "0")
        
        echo "warning_count=$WARNING_COUNT" >> $GITHUB_OUTPUT
        echo "error_count=$ERROR_COUNT" >> $GITHUB_OUTPUT
        echo "📊 Build warnings: $WARNING_COUNT, errors: $ERROR_COUNT"
        
        # Upload build log for debugging
        if [ -f build.log ]; then
          echo "Build log available for artifact upload"
        fi

  # Summary report
  health-summary:
    name: Health Summary
    needs: [structural-health-check, missing-content-check, build-metrics]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Generate Summary
      run: |
        echo "# 📊 Documentation Health Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Date**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Metrics" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Structural Issues**: ${{ needs.structural-health-check.outputs.total_issues }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Warnings**: ${{ needs.build-metrics.outputs.warning_count }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Status" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Determine health status
        if [ "${{ needs.structural-health-check.outputs.total_issues }}" -lt "200" ]; then
          echo "✅ **Documentation structure is healthy**" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **Documentation needs attention**" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "*This is an automated health check. The site remains functional even with warnings.*" >> $GITHUB_STEP_SUMMARY