# Example 5: CloudFormation VPC Template
# यह template Mumbai region में complete networking setup करता है
# Flipkart-style infrastructure के लिए optimized

AWSTemplateFormatVersion: '2010-09-09'
Description: 'Complete VPC setup for Flipkart application in Mumbai region (ap-south-1) - Generated by Infrastructure as Code Episode 18'

# Parameters - Template को flexible बनाने के लिए
Parameters:
  
  # Environment Configuration
  EnvironmentName:
    Description: Environment name that will be prefixed to resource names
    Type: String
    Default: flipkart-production
    AllowedValues:
      - flipkart-development
      - flipkart-staging
      - flipkart-production
    
  # VPC Configuration
  VpcCIDR:
    Description: CIDR block for this VPC
    Type: String
    Default: 10.0.0.0/16
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
    
  # Public Subnet CIDRs
  PublicSubnet1CIDR:
    Description: CIDR block for Public Subnet in first AZ
    Type: String
    Default: 10.0.1.0/24
    
  PublicSubnet2CIDR:
    Description: CIDR block for Public Subnet in second AZ
    Type: String
    Default: 10.0.2.0/24
    
  PublicSubnet3CIDR:
    Description: CIDR block for Public Subnet in third AZ
    Type: String
    Default: 10.0.3.0/24
    
  # Private Subnet CIDRs
  PrivateSubnet1CIDR:
    Description: CIDR block for Private Subnet in first AZ
    Type: String
    Default: 10.0.10.0/24
    
  PrivateSubnet2CIDR:
    Description: CIDR block for Private Subnet in second AZ
    Type: String
    Default: 10.0.11.0/24
    
  PrivateSubnet3CIDR:
    Description: CIDR block for Private Subnet in third AZ
    Type: String
    Default: 10.0.12.0/24
    
  # Database Subnet CIDRs
  DatabaseSubnet1CIDR:
    Description: CIDR block for Database Subnet in first AZ
    Type: String
    Default: 10.0.20.0/24
    
  DatabaseSubnet2CIDR:
    Description: CIDR block for Database Subnet in second AZ
    Type: String
    Default: 10.0.21.0/24
    
  DatabaseSubnet3CIDR:
    Description: CIDR block for Database Subnet in third AZ
    Type: String
    Default: 10.0.22.0/24
    
  # Cost Optimization Settings
  EnableNATGateway:
    Description: Enable NAT Gateway for private subnets (costs money!)
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    
  NATGatewayCount:
    Description: Number of NAT Gateways (1 for cost optimization, 3 for high availability)
    Type: Number
    Default: 1
    MinValue: 1
    MaxValue: 3
    
  # Monitoring Settings
  EnableVPCFlowLogs:
    Description: Enable VPC Flow Logs for security monitoring
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']

# Metadata for better documentation
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Environment Configuration"
        Parameters:
          - EnvironmentName
      - Label:
          default: "Network Configuration"
        Parameters:
          - VpcCIDR
          - PublicSubnet1CIDR
          - PublicSubnet2CIDR
          - PublicSubnet3CIDR
          - PrivateSubnet1CIDR
          - PrivateSubnet2CIDR
          - PrivateSubnet3CIDR
          - DatabaseSubnet1CIDR
          - DatabaseSubnet2CIDR
          - DatabaseSubnet3CIDR
      - Label:
          default: "Cost Optimization"
        Parameters:
          - EnableNATGateway
          - NATGatewayCount
      - Label:
          default: "Monitoring"
        Parameters:
          - EnableVPCFlowLogs
    ParameterLabels:
      EnvironmentName:
        default: "Environment Name"
      VpcCIDR:
        default: "VPC CIDR Block"

# Conditions - Conditional resource creation
Conditions:
  CreateNATGateway: !Equals [!Ref EnableNATGateway, 'true']
  CreateSecondNATGateway: !And
    - !Condition CreateNATGateway
    - !Not [!Equals [!Ref NATGatewayCount, 1]]
  CreateThirdNATGateway: !And
    - !Condition CreateNATGateway
    - !Equals [!Ref NATGatewayCount, 3]
  EnableFlowLogs: !Equals [!Ref EnableVPCFlowLogs, 'true']

# Resources - Actual infrastructure components
Resources:

  # VPC - Main Virtual Private Cloud
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-vpc'
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Project
          Value: flipkart-infrastructure
        - Key: ManagedBy
          Value: cloudformation
        - Key: Region
          Value: mumbai
        - Key: CostCenter
          Value: engineering

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-igw'
        - Key: Environment
          Value: !Ref EnvironmentName

  # Attach Internet Gateway to VPC
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-public-subnet-az1'
        - Key: Type
          Value: public
        - Key: Tier
          Value: web
        - Key: Environment
          Value: !Ref EnvironmentName

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-public-subnet-az2'
        - Key: Type
          Value: public
        - Key: Tier
          Value: web
        - Key: Environment
          Value: !Ref EnvironmentName

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [2, !GetAZs '']
      CidrBlock: !Ref PublicSubnet3CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-public-subnet-az3'
        - Key: Type
          Value: public
        - Key: Tier
          Value: web
        - Key: Environment
          Value: !Ref EnvironmentName

  # Private Subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PrivateSubnet1CIDR
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-private-subnet-az1'
        - Key: Type
          Value: private
        - Key: Tier
          Value: application
        - Key: Environment
          Value: !Ref EnvironmentName

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref PrivateSubnet2CIDR
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-private-subnet-az2'
        - Key: Type
          Value: private
        - Key: Tier
          Value: application
        - Key: Environment
          Value: !Ref EnvironmentName

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [2, !GetAZs '']
      CidrBlock: !Ref PrivateSubnet3CIDR
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-private-subnet-az3'
        - Key: Type
          Value: private
        - Key: Tier
          Value: application
        - Key: Environment
          Value: !Ref EnvironmentName

  # Database Subnets
  DatabaseSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref DatabaseSubnet1CIDR
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-database-subnet-az1'
        - Key: Type
          Value: database
        - Key: Tier
          Value: data
        - Key: Environment
          Value: !Ref EnvironmentName

  DatabaseSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref DatabaseSubnet2CIDR
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-database-subnet-az2'
        - Key: Type
          Value: database
        - Key: Tier
          Value: data
        - Key: Environment
          Value: !Ref EnvironmentName

  DatabaseSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [2, !GetAZs '']
      CidrBlock: !Ref DatabaseSubnet3CIDR
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-database-subnet-az3'
        - Key: Type
          Value: database
        - Key: Tier
          Value: data
        - Key: Environment
          Value: !Ref EnvironmentName

  # NAT Gateways और Elastic IPs
  NatGateway1EIP:
    Type: AWS::EC2::EIP
    Condition: CreateNATGateway
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-nat-eip-az1'
        - Key: Environment
          Value: !Ref EnvironmentName

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    Condition: CreateSecondNATGateway
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-nat-eip-az2'
        - Key: Environment
          Value: !Ref EnvironmentName

  NatGateway3EIP:
    Type: AWS::EC2::EIP
    Condition: CreateThirdNATGateway
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-nat-eip-az3'
        - Key: Environment
          Value: !Ref EnvironmentName

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Condition: CreateNATGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-nat-gateway-az1'
        - Key: Environment
          Value: !Ref EnvironmentName

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Condition: CreateSecondNATGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-nat-gateway-az2'
        - Key: Environment
          Value: !Ref EnvironmentName

  NatGateway3:
    Type: AWS::EC2::NatGateway
    Condition: CreateThirdNATGateway
    Properties:
      AllocationId: !GetAtt NatGateway3EIP.AllocationId
      SubnetId: !Ref PublicSubnet3
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-nat-gateway-az3'
        - Key: Environment
          Value: !Ref EnvironmentName

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-public-routes'
        - Key: Type
          Value: public
        - Key: Environment
          Value: !Ref EnvironmentName

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3

  # Private Route Tables
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-private-routes-az1'
        - Key: Type
          Value: private
        - Key: Environment
          Value: !Ref EnvironmentName

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Condition: CreateNATGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-private-routes-az2'
        - Key: Type
          Value: private
        - Key: Environment
          Value: !Ref EnvironmentName

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Condition: CreateNATGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !If [CreateSecondNATGateway, !Ref NatGateway2, !Ref NatGateway1]

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  PrivateRouteTable3:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-private-routes-az3'
        - Key: Type
          Value: private
        - Key: Environment
          Value: !Ref EnvironmentName

  DefaultPrivateRoute3:
    Type: AWS::EC2::Route
    Condition: CreateNATGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTable3
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !If [CreateThirdNATGateway, !Ref NatGateway3, !Ref NatGateway1]

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable3
      SubnetId: !Ref PrivateSubnet3

  # Database Route Table (no internet access)
  DatabaseRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-database-routes'
        - Key: Type
          Value: database
        - Key: Environment
          Value: !Ref EnvironmentName

  DatabaseSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DatabaseRouteTable
      SubnetId: !Ref DatabaseSubnet1

  DatabaseSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DatabaseRouteTable
      SubnetId: !Ref DatabaseSubnet2

  DatabaseSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DatabaseRouteTable
      SubnetId: !Ref DatabaseSubnet3

  # VPC Flow Logs for security monitoring
  VPCFlowLogRole:
    Type: AWS::IAM::Role
    Condition: EnableFlowLogs
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: vpc-flow-logs.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: flowlogsDeliveryRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                Resource: '*'

  VPCFlowLogGroup:
    Type: AWS::Logs::LogGroup
    Condition: EnableFlowLogs
    Properties:
      LogGroupName: !Sub '/aws/vpc/flowlogs/${EnvironmentName}'
      RetentionInDays: 30

  VPCFlowLog:
    Type: AWS::EC2::FlowLog
    Condition: EnableFlowLogs
    Properties:
      ResourceType: VPC
      ResourceId: !Ref VPC
      TrafficType: ALL
      LogDestinationType: cloud-watch-logs
      LogGroupName: !Ref VPCFlowLogGroup
      DeliverLogsPermissionArn: !GetAtt VPCFlowLogRole.Arn
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-vpc-flow-logs'
        - Key: Environment
          Value: !Ref EnvironmentName

  # Default Security Groups
  DefaultSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${EnvironmentName}-default-sg'
      GroupDescription: Default security group for VPC
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: -1
          SourceSecurityGroupId: !Ref 'AWS::NoValue'
          CidrIp: !Ref VpcCIDR
          Description: All traffic from VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-default-sg'
        - Key: Environment
          Value: !Ref EnvironmentName

# Outputs - अन्य stacks में use करने के लिए
Outputs:

  VPC:
    Description: Reference to the created VPC
    Value: !Ref VPC
    Export:
      Name: !Sub '${EnvironmentName}-VPC'

  VPCCidr:
    Description: CIDR block of the VPC
    Value: !Ref VpcCIDR
    Export:
      Name: !Sub '${EnvironmentName}-VPC-CIDR'

  PublicSubnets:
    Description: List of public subnet IDs
    Value: !Join 
      - ','
      - - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
    Export:
      Name: !Sub '${EnvironmentName}-PUBLIC-SUBNETS'

  PrivateSubnets:
    Description: List of private subnet IDs
    Value: !Join
      - ','
      - - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3
    Export:
      Name: !Sub '${EnvironmentName}-PRIVATE-SUBNETS'

  DatabaseSubnets:
    Description: List of database subnet IDs
    Value: !Join
      - ','
      - - !Ref DatabaseSubnet1
        - !Ref DatabaseSubnet2
        - !Ref DatabaseSubnet3
    Export:
      Name: !Sub '${EnvironmentName}-DATABASE-SUBNETS'

  PublicSubnet1:
    Description: Reference to public subnet in first AZ
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub '${EnvironmentName}-PUBLIC-SUBNET-AZ1'

  PublicSubnet2:
    Description: Reference to public subnet in second AZ
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub '${EnvironmentName}-PUBLIC-SUBNET-AZ2'

  PublicSubnet3:
    Description: Reference to public subnet in third AZ
    Value: !Ref PublicSubnet3
    Export:
      Name: !Sub '${EnvironmentName}-PUBLIC-SUBNET-AZ3'

  PrivateSubnet1:
    Description: Reference to private subnet in first AZ
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub '${EnvironmentName}-PRIVATE-SUBNET-AZ1'

  PrivateSubnet2:
    Description: Reference to private subnet in second AZ
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub '${EnvironmentName}-PRIVATE-SUBNET-AZ2'

  PrivateSubnet3:
    Description: Reference to private subnet in third AZ
    Value: !Ref PrivateSubnet3
    Export:
      Name: !Sub '${EnvironmentName}-PRIVATE-SUBNET-AZ3'

  DatabaseSubnet1:
    Description: Reference to database subnet in first AZ
    Value: !Ref DatabaseSubnet1
    Export:
      Name: !Sub '${EnvironmentName}-DATABASE-SUBNET-AZ1'

  DatabaseSubnet2:
    Description: Reference to database subnet in second AZ
    Value: !Ref DatabaseSubnet2
    Export:
      Name: !Sub '${EnvironmentName}-DATABASE-SUBNET-AZ2'

  DatabaseSubnet3:
    Description: Reference to database subnet in third AZ
    Value: !Ref DatabaseSubnet3
    Export:
      Name: !Sub '${EnvironmentName}-DATABASE-SUBNET-AZ3'

  DefaultSecurityGroup:
    Description: Default security group ID
    Value: !Ref DefaultSecurityGroup
    Export:
      Name: !Sub '${EnvironmentName}-DEFAULT-SG'

  InternetGateway:
    Description: Reference to the Internet Gateway
    Value: !Ref InternetGateway
    Export:
      Name: !Sub '${EnvironmentName}-IGW'

  NATGateways:
    Description: List of NAT Gateway IDs
    Value: !If
      - CreateThirdNATGateway
      - !Join
        - ','
        - - !Ref NatGateway1
          - !Ref NatGateway2
          - !Ref NatGateway3
      - !If
        - CreateSecondNATGateway
        - !Join
          - ','
          - - !Ref NatGateway1
            - !Ref NatGateway2
        - !If
          - CreateNATGateway
          - !Ref NatGateway1
          - 'None'
    Export:
      Name: !Sub '${EnvironmentName}-NAT-GATEWAYS'

  CostOptimizationNote:
    Description: Cost optimization information
    Value: !Sub 
      - 'NAT Gateways: ${NATCount}, Estimated monthly cost: $${Cost} USD'
      - NATCount: !Ref NATGatewayCount
        Cost: !If [CreateNATGateway, !Sub '${NATGatewayCount}5', '0']

  SecurityNote:
    Description: Security configuration information
    Value: !If
      - EnableFlowLogs
      - 'VPC Flow Logs enabled for security monitoring'
      - 'VPC Flow Logs disabled - consider enabling for security'