---
# Example 3: Ansible Web Server Setup Playbook
# यह playbook Flipkart web servers को configure करती है
# Mumbai region के servers के लिए optimized

- name: Flipkart Web Server Configuration
  hosts: webservers
  become: yes
  gather_facts: yes
  
  vars:
    # Application configuration
    app_name: "flipkart-web"
    app_version: "1.0.0"
    app_port: 8080
    nginx_port: 80
    
    # Environment specific variables
    environment: "{{ env | default('production') }}"
    region: "ap-south-1"  # Mumbai region
    
    # User and directories
    app_user: "flipkart"
    app_group: "flipkart"
    app_home: "/opt/flipkart"
    log_dir: "/var/log/flipkart"
    
    # Package versions
    nodejs_version: "18"
    java_version: "11"
    
    # Security settings
    ssh_port: 22
    allowed_ssh_users: ["ec2-user", "flipkart-admin"]
    
  tasks:
    # System Update और Basic Setup
    - name: Update all packages (यह time लग सकता है)
      yum:
        name: "*"
        state: latest
        update_cache: yes
      tags: [system, update]
      
    - name: Install EPEL repository
      yum:
        name: epel-release
        state: present
      tags: [system, repos]
      
    - name: Install essential packages
      yum:
        name:
          - wget
          - curl
          - git
          - htop
          - vim
          - unzip
          - awscli
          - python3-pip
          - jq
          - tree
          - net-tools
          - telnet
          - nc
        state: present
      tags: [system, packages]
      
    # Security Hardening
    - name: Create application user
      user:
        name: "{{ app_user }}"
        group: "{{ app_group }}"
        home: "{{ app_home }}"
        create_home: yes
        shell: /bin/bash
        system: yes
        comment: "Flipkart application user"
      tags: [security, users]
      
    - name: Configure SSH security
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        backup: yes
      loop:
        - { regexp: '^#?PermitRootLogin', line: 'PermitRootLogin no' }
        - { regexp: '^#?PasswordAuthentication', line: 'PasswordAuthentication no' }
        - { regexp: '^#?MaxAuthTries', line: 'MaxAuthTries 3' }
        - { regexp: '^#?ClientAliveInterval', line: 'ClientAliveInterval 300' }
        - { regexp: '^#?ClientAliveCountMax', line: 'ClientAliveCountMax 2' }
      notify: restart_sshd
      tags: [security, ssh]
      
    - name: Configure firewall for web server
      firewalld:
        service: "{{ item }}"
        permanent: yes
        state: enabled
        immediate: yes
      loop:
        - http
        - https
        - ssh
      when: ansible_facts['os_family'] == "RedHat"
      tags: [security, firewall]
      
    # Node.js Installation
    - name: Add NodeSource repository
      shell: |
        curl -fsSL https://rpm.nodesource.com/setup_{{ nodejs_version }}.x | bash -
      args:
        creates: /etc/yum.repos.d/nodesource-el7.repo
      tags: [nodejs, install]
      
    - name: Install Node.js
      yum:
        name: nodejs
        state: present
      tags: [nodejs, install]
      
    - name: Verify Node.js installation
      command: node --version
      register: node_version_output
      changed_when: false
      tags: [nodejs, verify]
      
    - name: Display Node.js version
      debug:
        msg: "Node.js version installed: {{ node_version_output.stdout }}"
      tags: [nodejs, verify]
      
    # Java Installation (for backend services)
    - name: Install Java {{ java_version }}
      yum:
        name: "java-{{ java_version }}-amazon-corretto-headless"
        state: present
      tags: [java, install]
      
    - name: Set JAVA_HOME environment variable
      lineinfile:
        path: /etc/environment
        line: "JAVA_HOME=/usr/lib/jvm/java-{{ java_version }}-amazon-corretto"
        create: yes
      tags: [java, config]
      
    # Nginx Installation और Configuration
    - name: Install Nginx
      amazon.aws.aws_ec2:
        name: nginx
        state: present
      tags: [nginx, install]
      
    - name: Create Nginx configuration directory
      file:
        path: /etc/nginx/conf.d
        state: directory
        mode: '0755'
      tags: [nginx, config]
      
    - name: Configure Nginx for Flipkart application
      template:
        src: nginx_flipkart.conf.j2
        dest: /etc/nginx/conf.d/flipkart.conf
        backup: yes
      notify: restart_nginx
      tags: [nginx, config]
      
    - name: Remove default Nginx configuration
      file:
        path: /etc/nginx/conf.d/default.conf
        state: absent
      notify: restart_nginx
      tags: [nginx, config]
      
    # Application Directories और Permissions
    - name: Create application directories
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: '0755'
      loop:
        - "{{ app_home }}"
        - "{{ app_home }}/current"
        - "{{ app_home }}/releases"
        - "{{ app_home }}/shared"
        - "{{ app_home }}/shared/config"
        - "{{ app_home }}/shared/logs"
        - "{{ log_dir }}"
      tags: [app, directories]
      
    # Application Code Deployment
    - name: Create package.json for Flipkart application
      copy:
        content: |
          {
            "name": "{{ app_name }}",
            "version": "{{ app_version }}",
            "description": "Flipkart web application",
            "main": "server.js",
            "scripts": {
              "start": "node server.js",
              "dev": "nodemon server.js",
              "test": "npm test"
            },
            "dependencies": {
              "express": "^4.18.2",
              "helmet": "^6.1.5",
              "compression": "^1.7.4",
              "morgan": "^1.10.0",
              "dotenv": "^16.0.3",
              "cors": "^2.8.5"
            },
            "devDependencies": {
              "nodemon": "^2.0.22"
            }
          }
        dest: "{{ app_home }}/current/package.json"
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: '0644'
      tags: [app, deploy]
      
    - name: Create main application file
      copy:
        content: |
          const express = require('express');
          const helmet = require('helmet');
          const compression = require('compression');
          const morgan = require('morgan');
          const cors = require('cors');
          require('dotenv').config();
          
          const app = express();
          const port = process.env.PORT || {{ app_port }};
          
          // Security middleware
          app.use(helmet());
          app.use(compression());
          app.use(cors());
          app.use(morgan('combined'));
          app.use(express.json({ limit: '10mb' }));
          app.use(express.urlencoded({ extended: true }));
          
          // Health check endpoint
          app.get('/health', (req, res) => {
            res.status(200).json({
              status: 'healthy',
              timestamp: new Date().toISOString(),
              uptime: process.uptime(),
              environment: '{{ environment }}',
              version: '{{ app_version }}',
              region: '{{ region }}',
              instance: process.env.INSTANCE_ID || 'unknown'
            });
          });
          
          // Main application routes
          app.get('/', (req, res) => {
            res.json({
              message: 'Flipkart Application - Configured with Ansible',
              version: '{{ app_version }}',
              environment: '{{ environment }}',
              region: '{{ region }}',
              timestamp: new Date().toISOString()
            });
          });
          
          // Products API (sample data)
          app.get('/api/products', (req, res) => {
            const products = [];
            const categories = ['Electronics', 'Clothing', 'Books', 'Home & Garden', 'Sports'];
            
            for (let i = 1; i <= 50; i++) {
              products.push({
                id: i,
                name: `Product ${i}`,
                price: Math.floor(Math.random() * 50000) + 500, // INR pricing
                category: categories[Math.floor(Math.random() * categories.length)],
                inStock: Math.random() > 0.1,
                rating: (Math.random() * 5).toFixed(1)
              });
            }
            
            res.json({
              products: products,
              total: products.length,
              timestamp: new Date().toISOString(),
              server: process.env.HOSTNAME || 'unknown'
            });
          });
          
          // Error handling
          app.use((err, req, res, next) => {
            console.error(err.stack);
            res.status(500).json({
              error: 'Something went wrong!',
              timestamp: new Date().toISOString()
            });
          });
          
          // 404 handler
          app.use((req, res) => {
            res.status(404).json({
              error: 'Route not found',
              timestamp: new Date().toISOString()
            });
          });
          
          // Start server
          app.listen(port, () => {
            console.log(`Flipkart application listening on port ${port}`);
            console.log(`Environment: {{ environment }}`);
            console.log(`Region: {{ region }}`);
          });
        dest: "{{ app_home }}/current/server.js"
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: '0644'
      tags: [app, deploy]
      
    # Install Application Dependencies
    - name: Install application dependencies
      npm:
        path: "{{ app_home }}/current"
        state: present
      become_user: "{{ app_user }}"
      tags: [app, dependencies]
      
    # SystemD Service Configuration
    - name: Create systemd service for Flipkart application
      template:
        src: flipkart-app.service.j2
        dest: /etc/systemd/system/flipkart-app.service
        mode: '0644'
      notify:
        - reload_systemd
        - restart_flipkart_app
      tags: [app, service]
      
    # Log Rotation Setup
    - name: Configure log rotation for application
      copy:
        content: |
          {{ log_dir }}/*.log {
              daily
              rotate 30
              compress
              delaycompress
              missingok
              notifempty
              create 0644 {{ app_user }} {{ app_group }}
              postrotate
                  systemctl reload flipkart-app
              endscript
          }
        dest: /etc/logrotate.d/flipkart-app
        mode: '0644'
      tags: [app, logging]
      
    # CloudWatch Agent Configuration
    - name: Install CloudWatch agent
      yum:
        name: amazon-cloudwatch-agent
        state: present
      tags: [monitoring, cloudwatch]
      
    - name: Configure CloudWatch agent
      template:
        src: cloudwatch-config.json.j2
        dest: /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
        mode: '0644'
      notify: restart_cloudwatch_agent
      tags: [monitoring, cloudwatch]
      
    # Performance Tuning
    - name: Configure system limits for application
      copy:
        content: |
          {{ app_user }} soft nofile 65536
          {{ app_user }} hard nofile 65536
          {{ app_user }} soft nproc 32768
          {{ app_user }} hard nproc 32768
        dest: /etc/security/limits.d/flipkart-app.conf
        mode: '0644'
      tags: [performance, limits]
      
    # Environment Configuration
    - name: Create environment configuration file
      copy:
        content: |
          NODE_ENV={{ environment }}
          PORT={{ app_port }}
          APP_NAME={{ app_name }}
          APP_VERSION={{ app_version }}
          AWS_REGION={{ region }}
          LOG_LEVEL=info
        dest: "{{ app_home }}/shared/config/.env"
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: '0600'
      tags: [app, config]
      
    - name: Create symlink for environment config
      file:
        src: "{{ app_home }}/shared/config/.env"
        dest: "{{ app_home }}/current/.env"
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        state: link
      tags: [app, config]
      
    # Final Service Management
    - name: Enable and start services
      systemd:
        name: "{{ item }}"
        enabled: yes
        state: started
        daemon_reload: yes
      loop:
        - nginx
        - flipkart-app
        - amazon-cloudwatch-agent
      tags: [services, start]
      
    # Health Check
    - name: Wait for application to start
      pause:
        seconds: 30
      tags: [verification]
      
    - name: Verify application health
      uri:
        url: "http://localhost:{{ app_port }}/health"
        method: GET
        timeout: 10
      register: health_check
      retries: 3
      delay: 10
      tags: [verification]
      
    - name: Display health check result
      debug:
        msg: "Application health check: {{ health_check.json }}"
      when: health_check is succeeded
      tags: [verification]
      
  handlers:
    - name: restart_sshd
      systemd:
        name: sshd
        state: restarted
        
    - name: restart_nginx
      systemd:
        name: nginx
        state: restarted
        
    - name: reload_systemd
      systemd:
        daemon_reload: yes
        
    - name: restart_flipkart_app
      systemd:
        name: flipkart-app
        state: restarted
        
    - name: restart_cloudwatch_agent
      systemd:
        name: amazon-cloudwatch-agent
        state: restarted

# Post-deployment tasks
- name: Post-deployment verification
  hosts: webservers
  become: yes
  gather_facts: no
  
  tasks:
    - name: Check service status
      systemd:
        name: "{{ item }}"
      register: service_status
      loop:
        - nginx
        - flipkart-app
        - amazon-cloudwatch-agent
      tags: [verification]
      
    - name: Display service status
      debug:
        msg: "{{ item.item }} is {{ item.status.ActiveState }}"
      loop: "{{ service_status.results }}"
      tags: [verification]
      
    - name: Check disk space
      shell: df -h
      register: disk_usage
      changed_when: false
      tags: [verification]
      
    - name: Display disk usage
      debug:
        msg: "{{ disk_usage.stdout_lines }}"
      tags: [verification]
      
    - name: Check memory usage
      shell: free -h
      register: memory_usage
      changed_when: false
      tags: [verification]
      
    - name: Display memory usage
      debug:
        msg: "{{ memory_usage.stdout_lines }}"
      tags: [verification]
      
    - name: Final application test
      uri:
        url: "http://{{ ansible_default_ipv4.address }}/api/products"
        method: GET
        timeout: 10
      register: api_test
      delegate_to: localhost
      tags: [verification]
      
    - name: Display API test result
      debug:
        msg: "API test successful - {{ api_test.json.total }} products loaded"
      when: api_test is succeeded
      tags: [verification]

# Cleanup और Maintenance Tasks
- name: Cleanup and maintenance
  hosts: webservers
  become: yes
  gather_facts: no
  
  tasks:
    - name: Clean up package cache
      yum:
        autoremove: yes
        autoclean: yes
      tags: [cleanup]
      
    - name: Clean up old log files
      find:
        paths: /var/log
        patterns: "*.log"
        age: "30d"
        file_type: file
      register: old_logs
      tags: [cleanup]
      
    - name: Remove old log files
      file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ old_logs.files }}"
      when: old_logs.files | length > 0
      tags: [cleanup]
      
    - name: Update system time
      command: chrony sources
      changed_when: false
      ignore_errors: yes
      tags: [maintenance]
      
    - name: Create deployment report
      copy:
        content: |
          Flipkart Web Server Deployment Report
          =====================================
          
          Deployment Date: {{ ansible_date_time.iso8601 }}
          Hostname: {{ ansible_hostname }}
          IP Address: {{ ansible_default_ipv4.address }}
          OS Version: {{ ansible_distribution }} {{ ansible_distribution_version }}
          
          Installed Services:
          - Nginx (Port 80)
          - Flipkart Application (Port {{ app_port }})
          - CloudWatch Agent
          
          Application Details:
          - Name: {{ app_name }}
          - Version: {{ app_version }}
          - Environment: {{ environment }}
          - Region: {{ region }}
          
          Health Check URL: http://{{ ansible_default_ipv4.address }}/health
          API Endpoint: http://{{ ansible_default_ipv4.address }}/api/products
          
          Log Locations:
          - Application: {{ log_dir }}
          - Nginx: /var/log/nginx/
          - System: /var/log/messages
          
          Configuration Files:
          - App Config: {{ app_home }}/current/.env
          - Nginx Config: /etc/nginx/conf.d/flipkart.conf
          - Service Config: /etc/systemd/system/flipkart-app.service
          
          Deployment completed successfully!
        dest: "{{ app_home }}/deployment-report.txt"
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: '0644'
      tags: [reporting]