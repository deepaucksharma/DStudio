---
# Example 4: MySQL Database Setup Playbook
# यह playbook MySQL database को secure तरीके से configure करती है
# Flipkart के database requirements के लिए optimized

- name: MySQL Database Server Configuration
  hosts: dbservers
  become: yes
  gather_facts: yes
  
  vars:
    # MySQL Configuration
    mysql_version: "8.0"
    mysql_root_password: "{{ vault_mysql_root_password }}"  # Ansible Vault में store करें
    mysql_port: 3306
    
    # Database और User Configuration
    databases:
      - name: flipkart_production
        encoding: utf8mb4
        collation: utf8mb4_unicode_ci
      - name: flipkart_analytics
        encoding: utf8mb4
        collation: utf8mb4_unicode_ci
    
    database_users:
      - name: flipkart_app
        password: "{{ vault_flipkart_app_password }}"
        priv: "flipkart_production.*:ALL"
        host: "10.0.%"  # Private subnet access only
      - name: flipkart_readonly
        password: "{{ vault_flipkart_readonly_password }}"
        priv: "flipkart_production.*:SELECT"
        host: "10.0.%"
      - name: analytics_user
        password: "{{ vault_analytics_password }}"
        priv: "flipkart_analytics.*:ALL"
        host: "10.0.%"
    
    # Performance Configuration
    mysql_innodb_buffer_pool_size: "{{ ansible_memtotal_mb * 0.7 | int }}M"
    mysql_max_connections: 500
    mysql_query_cache_size: "256M"
    
    # Security Configuration
    mysql_bind_address: "{{ ansible_default_ipv4.address }}"
    mysql_log_error: "/var/log/mysql/error.log"
    mysql_log_queries: "/var/log/mysql/queries.log"
    
  tasks:
    # System Preparation
    - name: Update system packages
      yum:
        name: "*"
        state: latest
        update_cache: yes
      tags: [system, update]
      
    - name: Install MySQL repository
      yum:
        name: "https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm"
        state: present
        disable_gpg_check: yes
      tags: [mysql, repository]
      
    - name: Install MySQL server and client
      yum:
        name:
          - mysql-community-server
          - mysql-community-client
          - mysql-community-common
          - mysql-community-libs
          - python3-PyMySQL  # For Ansible MySQL modules
        state: present
      tags: [mysql, install]
      
    # MySQL Service Configuration
    - name: Start and enable MySQL service
      systemd:
        name: mysqld
        state: started
        enabled: yes
      tags: [mysql, service]
      
    - name: Get temporary root password
      shell: "grep 'temporary password' /var/log/mysqld.log | awk '{print $NF}'"
      register: mysql_temp_password
      changed_when: false
      failed_when: false
      tags: [mysql, setup]
      
    - name: Check if root password is already set
      command: mysql -u root -p{{ mysql_root_password }} -e "SELECT 1"
      register: mysql_root_check
      failed_when: false
      changed_when: false
      no_log: true
      tags: [mysql, setup]
      
    # MySQL Security Setup
    - name: Set MySQL root password
      mysql_user:
        login_user: root
        login_password: "{{ mysql_temp_password.stdout if mysql_root_check.rc != 0 else mysql_root_password }}"
        name: root
        password: "{{ mysql_root_password }}"
        host: localhost
        login_unix_socket: /var/lib/mysql/mysql.sock
      when: mysql_root_check.rc != 0
      no_log: true
      tags: [mysql, security]
      
    - name: Remove anonymous MySQL users
      mysql_user:
        login_user: root
        login_password: "{{ mysql_root_password }}"
        name: ""
        host_all: yes
        state: absent
        login_unix_socket: /var/lib/mysql/mysql.sock
      tags: [mysql, security]
      
    - name: Remove MySQL test database
      mysql_db:
        login_user: root
        login_password: "{{ mysql_root_password }}"
        name: test
        state: absent
        login_unix_socket: /var/lib/mysql/mysql.sock
      tags: [mysql, security]
      
    - name: Remove remote root access
      mysql_user:
        login_user: root
        login_password: "{{ mysql_root_password }}"
        name: root
        host: "{{ item }}"
        state: absent
        login_unix_socket: /var/lib/mysql/mysql.sock
      loop:
        - "{{ ansible_hostname }}"
        - "127.0.0.1"
        - "::1"
      failed_when: false
      tags: [mysql, security]
      
    # MySQL Configuration
    - name: Create MySQL configuration directory
      file:
        path: /etc/mysql/conf.d
        state: directory
        mode: '0755'
      tags: [mysql, config]
      
    - name: Configure MySQL for production (performance)
      copy:
        content: |
          # Flipkart MySQL Production Configuration
          # Generated by Ansible for {{ environment }} environment
          
          [mysqld]
          # Basic Settings
          bind-address = {{ mysql_bind_address }}
          port = {{ mysql_port }}
          socket = /var/lib/mysql/mysql.sock
          
          # Character Set (for Indian language support)
          character-set-server = utf8mb4
          collation-server = utf8mb4_unicode_ci
          init_connect = 'SET NAMES utf8mb4'
          
          # InnoDB Settings (Performance)
          innodb_buffer_pool_size = {{ mysql_innodb_buffer_pool_size }}
          innodb_buffer_pool_instances = {{ ansible_processor_vcpus }}
          innodb_log_file_size = 512M
          innodb_log_buffer_size = 64M
          innodb_flush_log_at_trx_commit = 2
          innodb_file_per_table = 1
          innodb_open_files = 4000
          
          # Connection Settings
          max_connections = {{ mysql_max_connections }}
          max_connect_errors = 10000
          thread_cache_size = 50
          table_open_cache = 4000
          table_definition_cache = 2000
          
          # Query Cache (for read-heavy workloads)
          query_cache_type = 1
          query_cache_size = {{ mysql_query_cache_size }}
          query_cache_limit = 8M
          
          # Timeout Settings
          wait_timeout = 300
          interactive_timeout = 300
          
          # Logging
          log-error = {{ mysql_log_error }}
          slow_query_log = 1
          slow_query_log_file = /var/log/mysql/slow-queries.log
          long_query_time = 2
          log_queries_not_using_indexes = 1
          
          # Binary Logging (for replication)
          log-bin = mysql-bin
          binlog_format = ROW
          expire_logs_days = 7
          max_binlog_size = 500M
          
          # Security Settings
          skip-name-resolve
          local-infile = 0
          
          # Replication Settings (for future use)
          server-id = {{ ansible_default_ipv4.address.split('.')[-1] }}
          auto_increment_increment = 2
          auto_increment_offset = {{ ansible_default_ipv4.address.split('.')[-1] }}
          
          [mysql]
          default-character-set = utf8mb4
          
          [client]
          default-character-set = utf8mb4
          socket = /var/lib/mysql/mysql.sock
        dest: /etc/mysql/conf.d/flipkart-production.cnf
        mode: '0644'
        backup: yes
      notify: restart_mysql
      tags: [mysql, config]
      
    # Log Directory Setup
    - name: Create MySQL log directory
      file:
        path: /var/log/mysql
        state: directory
        owner: mysql
        group: mysql
        mode: '0755'
      tags: [mysql, logging]
      
    - name: Create MySQL log files
      file:
        path: "{{ item }}"
        state: touch
        owner: mysql
        group: mysql
        mode: '0644'
      loop:
        - "{{ mysql_log_error }}"
        - /var/log/mysql/slow-queries.log
        - "{{ mysql_log_queries }}"
      tags: [mysql, logging]
      
    # Database और User Creation
    - name: Create application databases
      mysql_db:
        login_user: root
        login_password: "{{ mysql_root_password }}"
        name: "{{ item.name }}"
        encoding: "{{ item.encoding }}"
        collation: "{{ item.collation }}"
        state: present
        login_unix_socket: /var/lib/mysql/mysql.sock
      loop: "{{ databases }}"
      tags: [mysql, databases]
      
    - name: Create database users
      mysql_user:
        login_user: root
        login_password: "{{ mysql_root_password }}"
        name: "{{ item.name }}"
        password: "{{ item.password }}"
        priv: "{{ item.priv }}"
        host: "{{ item.host }}"
        state: present
        login_unix_socket: /var/lib/mysql/mysql.sock
      loop: "{{ database_users }}"
      no_log: true
      tags: [mysql, users]
      
    # Sample Data और Schema Setup
    - name: Create sample tables for Flipkart application
      mysql_query:
        login_user: root
        login_password: "{{ mysql_root_password }}"
        login_db: flipkart_production
        login_unix_socket: /var/lib/mysql/mysql.sock
        query: |
          CREATE TABLE IF NOT EXISTS products (
              id INT AUTO_INCREMENT PRIMARY KEY,
              name VARCHAR(255) NOT NULL,
              description TEXT,
              price DECIMAL(10,2) NOT NULL,
              category VARCHAR(100) NOT NULL,
              brand VARCHAR(100),
              sku VARCHAR(50) UNIQUE,
              stock_quantity INT DEFAULT 0,
              is_active BOOLEAN DEFAULT TRUE,
              created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
              updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
              INDEX idx_category (category),
              INDEX idx_brand (brand),
              INDEX idx_sku (sku),
              INDEX idx_price (price),
              INDEX idx_active_created (is_active, created_at)
          ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
          
          CREATE TABLE IF NOT EXISTS categories (
              id INT AUTO_INCREMENT PRIMARY KEY,
              name VARCHAR(100) NOT NULL UNIQUE,
              description TEXT,
              parent_id INT NULL,
              is_active BOOLEAN DEFAULT TRUE,
              created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
              FOREIGN KEY (parent_id) REFERENCES categories(id) ON DELETE SET NULL,
              INDEX idx_parent (parent_id),
              INDEX idx_active (is_active)
          ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
          
          CREATE TABLE IF NOT EXISTS users (
              id INT AUTO_INCREMENT PRIMARY KEY,
              email VARCHAR(255) NOT NULL UNIQUE,
              phone VARCHAR(20),
              first_name VARCHAR(100) NOT NULL,
              last_name VARCHAR(100) NOT NULL,
              password_hash VARCHAR(255) NOT NULL,
              is_active BOOLEAN DEFAULT TRUE,
              created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
              updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
              INDEX idx_email (email),
              INDEX idx_phone (phone),
              INDEX idx_active_created (is_active, created_at)
          ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
          
          CREATE TABLE IF NOT EXISTS orders (
              id INT AUTO_INCREMENT PRIMARY KEY,
              user_id INT NOT NULL,
              order_number VARCHAR(50) NOT NULL UNIQUE,
              total_amount DECIMAL(12,2) NOT NULL,
              status ENUM('pending', 'confirmed', 'shipped', 'delivered', 'cancelled') DEFAULT 'pending',
              payment_status ENUM('pending', 'paid', 'failed', 'refunded') DEFAULT 'pending',
              shipping_address TEXT,
              created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
              updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
              FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
              INDEX idx_user (user_id),
              INDEX idx_status (status),
              INDEX idx_payment_status (payment_status),
              INDEX idx_created (created_at)
          ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
      tags: [mysql, schema]
      
    # Performance Monitoring Setup
    - name: Enable performance schema
      mysql_query:
        login_user: root
        login_password: "{{ mysql_root_password }}"
        login_unix_socket: /var/lib/mysql/mysql.sock
        query: |
          UPDATE performance_schema.setup_instruments 
          SET ENABLED = 'YES', TIMED = 'YES' 
          WHERE NAME LIKE '%statement/%' OR NAME LIKE '%stage/%';
          
          UPDATE performance_schema.setup_consumers 
          SET ENABLED = 'YES' 
          WHERE NAME LIKE '%events_statements%' OR NAME LIKE '%events_stages%';
      tags: [mysql, monitoring]
      
    # Backup Configuration
    - name: Create backup directory
      file:
        path: /var/backups/mysql
        state: directory
        owner: mysql
        group: mysql
        mode: '0755'
      tags: [mysql, backup]
      
    - name: Create MySQL backup script
      copy:
        content: |
          #!/bin/bash
          # MySQL Backup Script for Flipkart Database
          # Generated by Ansible
          
          BACKUP_DIR="/var/backups/mysql"
          DATE=$(date +%Y%m%d_%H%M%S)
          MYSQL_USER="root"
          MYSQL_PASSWORD="{{ mysql_root_password }}"
          
          # Create backup directory if not exists
          mkdir -p $BACKUP_DIR
          
          # Backup each database
          {% for db in databases %}
          echo "Backing up {{ db.name }}..."
          mysqldump -u $MYSQL_USER -p$MYSQL_PASSWORD \
              --single-transaction \
              --routines \
              --triggers \
              --events \
              --hex-blob \
              {{ db.name }} | gzip > $BACKUP_DIR/{{ db.name }}_$DATE.sql.gz
          
          if [ $? -eq 0 ]; then
              echo "{{ db.name }} backup completed successfully"
          else
              echo "{{ db.name }} backup failed" >&2
              exit 1
          fi
          {% endfor %}
          
          # Remove backups older than 7 days
          find $BACKUP_DIR -name "*.sql.gz" -mtime +7 -delete
          
          echo "All backups completed at $(date)"
        dest: /usr/local/bin/mysql-backup.sh
        mode: '0755'
        owner: root
        group: root
      tags: [mysql, backup]
      
    - name: Setup MySQL backup cron job
      cron:
        name: "MySQL Daily Backup"
        minute: "30"
        hour: "2"
        job: "/usr/local/bin/mysql-backup.sh >> /var/log/mysql-backup.log 2>&1"
        user: root
      tags: [mysql, backup]
      
    # Security Hardening
    - name: Configure MySQL log rotation
      copy:
        content: |
          /var/log/mysql/*.log {
              daily
              rotate 30
              compress
              delaycompress
              missingok
              notifempty
              create 0644 mysql mysql
              postrotate
                  if test -x /usr/bin/mysqladmin && \
                     /usr/bin/mysqladmin ping &>/dev/null
                  then
                     /usr/bin/mysqladmin flush-logs
                  fi
              endscript
          }
        dest: /etc/logrotate.d/mysql
        mode: '0644'
      tags: [mysql, logging]
      
    - name: Configure firewall for MySQL
      firewalld:
        port: "{{ mysql_port }}/tcp"
        permanent: yes
        state: enabled
        immediate: yes
        source: "10.0.0.0/16"  # Only allow VPC access
      when: ansible_facts['os_family'] == "RedHat"
      tags: [mysql, firewall]
      
    # Monitoring और Health Checks
    - name: Create MySQL health check script
      copy:
        content: |
          #!/bin/bash
          # MySQL Health Check Script
          
          MYSQL_USER="flipkart_readonly"
          MYSQL_PASSWORD="{{ vault_flipkart_readonly_password }}"
          
          # Check if MySQL is running
          if ! pgrep mysqld > /dev/null; then
              echo "CRITICAL: MySQL process not running"
              exit 2
          fi
          
          # Check if MySQL is accepting connections
          if ! mysql -u $MYSQL_USER -p$MYSQL_PASSWORD -e "SELECT 1" > /dev/null 2>&1; then
              echo "CRITICAL: MySQL not accepting connections"
              exit 2
          fi
          
          # Check replication status (if configured)
          SLAVE_STATUS=$(mysql -u $MYSQL_USER -p$MYSQL_PASSWORD -e "SHOW SLAVE STATUS\G" 2>/dev/null)
          if [ -n "$SLAVE_STATUS" ]; then
              if echo "$SLAVE_STATUS" | grep -q "Slave_IO_Running: No\|Slave_SQL_Running: No"; then
                  echo "WARNING: MySQL replication issue detected"
                  exit 1
              fi
          fi
          
          # Check for long running queries
          LONG_QUERIES=$(mysql -u $MYSQL_USER -p$MYSQL_PASSWORD -e "SELECT COUNT(*) FROM information_schema.processlist WHERE TIME > 300" -s -N 2>/dev/null)
          if [ "$LONG_QUERIES" -gt 10 ]; then
              echo "WARNING: $LONG_QUERIES long running queries detected"
              exit 1
          fi
          
          echo "OK: MySQL is healthy"
          exit 0
        dest: /usr/local/bin/mysql-health-check.sh
        mode: '0755'
        owner: root
        group: root
      tags: [mysql, monitoring]
      
    - name: Setup MySQL health check cron
      cron:
        name: "MySQL Health Check"
        minute: "*/5"
        job: "/usr/local/bin/mysql-health-check.sh"
        user: root
      tags: [mysql, monitoring]
      
  handlers:
    - name: restart_mysql
      systemd:
        name: mysqld
        state: restarted
        daemon_reload: yes

# Post-installation verification
- name: MySQL Database Verification
  hosts: dbservers
  become: yes
  gather_facts: no
  
  tasks:
    - name: Verify MySQL service status
      systemd:
        name: mysqld
      register: mysql_status
      tags: [verification]
      
    - name: Display MySQL service status
      debug:
        msg: "MySQL service is {{ mysql_status.status.ActiveState }}"
      tags: [verification]
      
    - name: Test database connections
      mysql_query:
        login_user: flipkart_app
        login_password: "{{ vault_flipkart_app_password }}"
        login_db: flipkart_production
        login_host: "{{ ansible_default_ipv4.address }}"
        query: "SELECT COUNT(*) as table_count FROM information_schema.tables WHERE table_schema = 'flipkart_production'"
      register: table_count
      tags: [verification]
      
    - name: Display table count
      debug:
        msg: "Database has {{ table_count.query_result[0][0] }} tables"
      tags: [verification]
      
    - name: Check MySQL performance
      mysql_query:
        login_user: root
        login_password: "{{ mysql_root_password }}"
        login_unix_socket: /var/lib/mysql/mysql.sock
        query: |
          SELECT 
              VARIABLE_NAME, 
              VARIABLE_VALUE 
          FROM performance_schema.global_status 
          WHERE VARIABLE_NAME IN (
              'Threads_connected',
              'Threads_running', 
              'Queries',
              'Uptime'
          )
      register: mysql_stats
      tags: [verification]
      
    - name: Display MySQL performance stats
      debug:
        msg: "{{ item[0] }}: {{ item[1] }}"
      loop: "{{ mysql_stats.query_result }}"
      tags: [verification]