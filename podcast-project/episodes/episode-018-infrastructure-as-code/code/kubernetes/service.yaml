# Kubernetes Services for Swiggy Food Delivery API
# Episode 18: Infrastructure as Code
# Production-ready services with load balancing and discovery

apiVersion: v1
kind: Service
metadata:
  name: swiggy-food-api
  namespace: swiggy-prod
  labels:
    app: swiggy-food-api
    component: backend
    environment: production
  annotations:
    # AWS Load Balancer annotations
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-path: "/actuator/health"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-port: "8081"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-interval: "30"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-healthy-threshold: "2"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-unhealthy-threshold: "3"
    
    # Prometheus metrics
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
    prometheus.io/path: "/actuator/prometheus"
spec:
  type: LoadBalancer
  sessionAffinity: None
  ports:
  - name: http
    port: 80
    targetPort: 8080
    protocol: TCP
  - name: https
    port: 443
    targetPort: 8080
    protocol: TCP
  - name: management
    port: 8081
    targetPort: 8081
    protocol: TCP
  selector:
    app: swiggy-food-api
  loadBalancerSourceRanges:
  - 0.0.0.0/0  # Allow all (restrict in production)

---
# Internal service for inter-service communication
apiVersion: v1
kind: Service
metadata:
  name: swiggy-food-api-internal
  namespace: swiggy-prod
  labels:
    app: swiggy-food-api
    component: backend
    environment: production
    service-type: internal
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8080
    targetPort: 8080
    protocol: TCP
  - name: management
    port: 8081
    targetPort: 8081
    protocol: TCP
  selector:
    app: swiggy-food-api

---
# Headless service for StatefulSet (if needed)
apiVersion: v1
kind: Service
metadata:
  name: swiggy-food-api-headless
  namespace: swiggy-prod
  labels:
    app: swiggy-food-api
    component: backend
    environment: production
    service-type: headless
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: http
    port: 8080
    targetPort: 8080
    protocol: TCP
  selector:
    app: swiggy-food-api

---
# Service for database (MySQL)
apiVersion: v1
kind: Service
metadata:
  name: mysql-cluster
  namespace: swiggy-prod
  labels:
    app: mysql
    component: database
    environment: production
spec:
  type: ClusterIP
  ports:
  - name: mysql
    port: 3306
    targetPort: 3306
    protocol: TCP
  selector:
    app: mysql
    role: master

---
# Service for Redis cache
apiVersion: v1
kind: Service
metadata:
  name: redis-cluster
  namespace: swiggy-prod
  labels:
    app: redis
    component: cache
    environment: production
spec:
  type: ClusterIP
  ports:
  - name: redis
    port: 6379
    targetPort: 6379
    protocol: TCP
  selector:
    app: redis

---
# Service for Location Service
apiVersion: v1
kind: Service
metadata:
  name: location-service
  namespace: swiggy-prod
  labels:
    app: location-service
    component: microservice
    environment: production
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8080
    targetPort: 8080
    protocol: TCP
  - name: grpc
    port: 9090
    targetPort: 9090
    protocol: TCP
  selector:
    app: location-service

---
# Service for Notification Service
apiVersion: v1
kind: Service
metadata:
  name: notification-service
  namespace: swiggy-prod
  labels:
    app: notification-service
    component: microservice
    environment: production
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8080
    targetPort: 8080
    protocol: TCP
  - name: websocket
    port: 8090
    targetPort: 8090
    protocol: TCP
  selector:
    app: notification-service

---
# Service for Delivery Service
apiVersion: v1
kind: Service
metadata:
  name: delivery-service
  namespace: swiggy-prod
  labels:
    app: delivery-service
    component: microservice
    environment: production
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8080
    targetPort: 8080
    protocol: TCP
  selector:
    app: delivery-service

---
# Service Monitor for Prometheus monitoring
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: swiggy-food-api-monitor
  namespace: swiggy-prod
  labels:
    app: swiggy-food-api
    monitoring: "true"
spec:
  selector:
    matchLabels:
      app: swiggy-food-api
  endpoints:
  - port: management
    path: /actuator/prometheus
    interval: 30s
    scrapeTimeout: 10s
    honorLabels: false
  namespaceSelector:
    matchNames:
    - swiggy-prod

---
# Ingress for external access with SSL termination
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: swiggy-food-api-ingress
  namespace: swiggy-prod
  labels:
    app: swiggy-food-api
  annotations:
    # AWS ALB Ingress Controller annotations
    kubernetes.io/ingress.class: "alb"
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/backend-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-path: "/actuator/health"
    alb.ingress.kubernetes.io/healthcheck-port: "8081"
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: "30"
    alb.ingress.kubernetes.io/healthy-threshold-count: "2"
    alb.ingress.kubernetes.io/unhealthy-threshold-count: "3"
    
    # SSL configuration
    alb.ingress.kubernetes.io/certificate-arn: "arn:aws:acm:ap-south-1:123456789012:certificate/12345678-1234-1234-1234-123456789012"
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
    alb.ingress.kubernetes.io/ssl-redirect: '443'
    
    # Rate limiting
    alb.ingress.kubernetes.io/load-balancer-attributes: |
      routing.http.drop_invalid_header_fields.enabled=true,
      routing.http2.enabled=true,
      access_logs.s3.enabled=true,
      access_logs.s3.bucket=swiggy-alb-logs,
      access_logs.s3.prefix=swiggy-food-api
    
    # WAF integration
    alb.ingress.kubernetes.io/wafv2-acl-arn: "arn:aws:wafv2:ap-south-1:123456789012:regional/webacl/SwiggyWAF/12345678-1234-1234-1234-123456789012"
    
    # Health check grace period
    alb.ingress.kubernetes.io/healthcheck-grace-period-seconds: "60"
    
spec:
  rules:
  - host: api.swiggy.co.in
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: swiggy-food-api
            port:
              number: 80
      - path: /api/v1
        pathType: Prefix
        backend:
          service:
            name: swiggy-food-api
            port:
              number: 80
  - host: admin-api.swiggy.co.in
    http:
      paths:
      - path: /actuator
        pathType: Prefix
        backend:
          service:
            name: swiggy-food-api
            port:
              number: 8081
  tls:
  - hosts:
    - api.swiggy.co.in
    - admin-api.swiggy.co.in
    secretName: swiggy-tls-secret

---
# Network Policy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: swiggy-food-api-netpol
  namespace: swiggy-prod
spec:
  podSelector:
    matchLabels:
      app: swiggy-food-api
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow traffic from ALB/NLB
  - from:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 8081
  # Allow traffic from other microservices in the same namespace
  - from:
    - namespaceSelector:
        matchLabels:
          name: swiggy-prod
    ports:
    - protocol: TCP
      port: 8080
  egress:
  # Allow DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  # Allow database connections
  - to:
    - podSelector:
        matchLabels:
          app: mysql
    ports:
    - protocol: TCP
      port: 3306
  # Allow Redis connections
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  # Allow external API calls (payment gateways, etc.)
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80