{
  "flow_definition": {
    "flow_name": "IRCTC Booking Data Pipeline",
    "description": "जैसे IRCTC में ticket booking का complete flow होता है, वैसे ही data pipeline बनाई है। Real-time booking data को process करके analytics ready करना।",
    "version": "1.0",
    "author": "DStudio Engineering Team",
    "created_date": "2025-01-11",
    "business_context": "IRCTC processes 1M+ bookings daily, peak during festivals: 50K bookings/minute",
    
    "processors": [
      {
        "processor_id": "001",
        "processor_name": "IRCTCBookingDataExtractor",
        "processor_type": "GetHTTP",
        "description": "IRCTC के booking APIs से real-time data निकालना - जैसे tickets book होते रहते हैं",
        "properties": {
          "HTTP Method": "GET",
          "Remote URL": "https://api.irctc.co.in/booking-stream/v1/bookings",
          "Connection Timeout": "30 sec",
          "Read Timeout": "60 sec",
          "Include Date Header": "true",
          "Accept Content-Type": "application/json",
          "Send Body": "false",
          "User Agent": "NiFi-IRCTC-Pipeline/1.0",
          "Accept-Language": "en-IN,hi-IN",
          "Authorization": "${irctc.api.token}",
          "Rate Limit": "1000 requests/minute"
        },
        "scheduling": {
          "strategy": "TIMER_DRIVEN",
          "run_duration": "0 sec",
          "run_schedule": "5 sec",
          "concurrent_tasks": "3",
          "execution_node": "ALL"
        },
        "auto_terminate": {
          "success": false,
          "failure": true,
          "no_retry": true
        },
        "notes": "हर 5 सेकंड में नए bookings check करना। Festival season में traffic बहुत बढ़ जाता है।"
      },
      
      {
        "processor_id": "002", 
        "processor_name": "BookingDataValidator",
        "processor_type": "ValidateRecord",
        "description": "Booking data की validation - PNR format, passenger details, train info सब check करना",
        "properties": {
          "Record Reader": "JsonTreeReader",
          "Record Writer": "JsonRecordSetWriter",
          "Schema Access Strategy": "Use 'Schema Name' Property",
          "Schema Registry": "AvroSchemaRegistry",
          "Schema Name": "irctc-booking-schema",
          "Allow Extra Fields": "true",
          "Strict Type Checking": "true",
          "Validation Strategy": "VALIDATE_EACH_RECORD"
        },
        "validation_rules": {
          "pnr_format": "^[0-9]{10}$",
          "passenger_count": "min: 1, max: 6",
          "train_number": "^[0-9]{5}$",
          "mobile_number": "^[6-9][0-9]{9}$",
          "booking_amount": "min: 10.0, max: 50000.0",
          "journey_date": "future_date_within_120_days",
          "seat_preference": "enum: [SL, 3A, 2A, 1A, CC, EC]"
        },
        "notes": "Invalid bookings को separate करना - data quality बहुत important है railway system में।"
      },
      
      {
        "processor_id": "003",
        "processor_name": "BookingEnrichmentProcessor", 
        "processor_type": "ExecuteScript",
        "description": "Booking data को enrich करना - station names, train details, pricing info add करना",
        "properties": {
          "Script Engine": "python",
          "Script Body": "${file('scripts/irctc_booking_enrichment.py')}",
          "Module Directory": "/opt/nifi/python-modules"
        },
        "enrichment_logic": {
          "station_master_lookup": "Redis cache से station codes को names में convert करना",
          "train_details_lookup": "Train number से train name, type, speed निकालना", 
          "fare_calculation": "Distance और class के basis पर expected fare calculate करना",
          "route_information": "Source से destination का complete route निकालना",
          "weather_info": "Journey date के लिए weather forecast add करना",
          "occupancy_prediction": "Historical data से seat availability predict करना"
        },
        "external_apis": [
          "Redis Cache (Station Master)",
          "PostgreSQL (Train Details)",
          "Weather API",
          "IRCTC Seat Availability API"
        ],
        "notes": "Raw booking data को business intelligence के साथ enrich करना।"
      },
      
      {
        "processor_id": "004",
        "processor_name": "FraudDetectionProcessor",
        "processor_type": "ExecuteStreamCommand", 
        "description": "Booking fraud detection - multiple bookings, fake details, automated booking detection",
        "properties": {
          "Command": "python3",
          "Command Arguments": "/opt/nifi/scripts/fraud_detection.py",
          "Working Directory": "/opt/nifi/scripts",
          "Argument Delimiter": " ",
          "Ignore STDIN": "false",
          "Put FlowFile in Command's STDIN": "true"
        },
        "fraud_checks": {
          "velocity_check": "Same mobile/email से 1 minute में 5+ bookings",
          "amount_anomaly": "Usual booking pattern से 10x ज्यादा amount",
          "impossible_travel": "Same user का booking impossible locations पर",
          "bot_detection": "API call patterns से automated booking detect करना",
          "duplicate_passenger": "Same passenger details multiple PNRs में",
          "payment_pattern": "Suspicious payment methods या failed attempts"
        },
        "ml_models": {
          "anomaly_detection": "Isolation Forest model",
          "pattern_recognition": "LSTM for sequence analysis", 
          "risk_scoring": "Gradient Boosting Classifier"
        },
        "notes": "Railway reservation में fraud बहुत होता है - especially Tatkal में। Strong detection जरूरी है।"
      },
      
      {
        "processor_id": "005",
        "processor_name": "GeoLocationProcessor",
        "processor_type": "GeoEnrichIP",
        "description": "User के IP address से location निकालना - booking patterns समझने के लिए", 
        "properties": {
          "IP Address Attribute": "booking.user.ip_address",
          "GeoLite2 Database Path": "/opt/nifi/geodb/GeoLite2-City.mmdb",
          "Target": "flowfile-attribute",
          "Prefix": "geo"
        },
        "geo_enrichment": {
          "city": "Booking city निकालना",
          "state": "State information",
          "country": "Country (mostly India)",
          "lat_lon": "Latitude, Longitude coordinates",
          "isp": "Internet service provider",
          "timezone": "User का timezone"
        },
        "use_cases": {
          "demand_analysis": "किस city से कितनी bookings आ रही हैं",
          "fraud_detection": "Location mismatch से fake bookings detect करना",
          "marketing": "Regional campaigns के लिए data",
          "capacity_planning": "Popular routes identify करना"
        },
        "notes": "Geo data से booking patterns और user behavior समझना।"
      },
      
      {
        "processor_id": "006",
        "processor_name": "DataClassificationProcessor",
        "processor_type": "RouteOnAttribute",
        "description": "Booking data को अलग-अलग categories में बांटना - processing के लिए",
        "properties": {
          "Routing Strategy": "Route to Property name"
        },
        "routing_rules": {
          "premium_bookings": "${booking.class:equals('1A')} OR ${booking.class:equals('2A')} OR ${booking.amount:gt(5000)}",
          "tatkal_bookings": "${booking.type:equals('TATKAL')} OR ${booking.type:equals('PREMIUM_TATKAL')}",  
          "group_bookings": "${booking.passenger_count:gt(4)}",
          "senior_citizen": "${booking.concession_type:equals('SENIOR_CITIZEN')}",
          "foreign_tourist": "${booking.quota:equals('FOREIGN_TOURIST')}",
          "waitlisted": "${booking.status:equals('WL')} OR ${booking.status:equals('RAC')}",
          "confirmed": "${booking.status:equals('CNF')}",
          "high_value": "${booking.amount:gt(10000)}",
          "suspicious": "${fraud.risk_score:gt(0.7)}"
        },
        "notes": "अलग-अलग booking types को अलग तरीके से process करना पड़ता है।"
      },
      
      {
        "processor_id": "007",
        "processor_name": "RealTimeAnalyticsProcessor",
        "processor_type": "PutKafka",
        "description": "Real-time analytics के लिए Kafka में data send करना",
        "properties": {
          "Bootstrap Servers": "kafka-cluster.irctc.gov.in:9092",
          "Topic Name": "${booking.category}-bookings",
          "Delivery Guarantee": "Best Effort",
          "Message Key Field": "pnr_number",
          "Partition": "${booking.source_station:hash():mod(10)}",
          "Compression Type": "snappy",
          "Client Name": "NiFi-IRCTC-Analytics",
          "Security Protocol": "SASL_SSL",
          "SASL Mechanism": "PLAIN"
        },
        "kafka_topics": {
          "premium-bookings": "Premium class bookings for VIP analytics",
          "tatkal-bookings": "Tatkal bookings - high velocity data",
          "group-bookings": "Group travel analytics",
          "suspicious-bookings": "Fraud alerts - immediate processing",
          "waitlisted-bookings": "Waitlist analysis and prediction"
        },
        "notes": "Real-time dashboard और alerting के लिए streaming data।"
      },
      
      {
        "processor_id": "008",
        "processor_name": "DatabasePersistenceProcessor",
        "processor_type": "PutDatabaseRecord", 
        "description": "Clean और enriched booking data को PostgreSQL में store करना",
        "properties": {
          "Database Connection Pooling Service": "IRCTCPostgreSQLConnectionPool",
          "Statement Type": "INSERT",
          "Table Name": "booking_transactions",
          "Record Reader": "JsonTreeReader",
          "Include Table Name": "true",
          "Translate Field Names": "true",
          "Unmatched Field Behavior": "Ignore",
          "Unmatched Column Behavior": "Fail",
          "Update Keys": "pnr_number"
        },
        "database_schema": {
          "table_name": "booking_transactions",
          "primary_key": "pnr_number",
          "partitioning": "PARTITION BY RANGE (booking_date)",
          "indexes": [
            "idx_mobile_number",
            "idx_train_number", 
            "idx_booking_timestamp",
            "idx_source_destination",
            "idx_passenger_count"
          ]
        },
        "performance_tuning": {
          "batch_size": "1000 records",
          "connection_pool_size": "20 connections",
          "transaction_timeout": "30 seconds",
          "retry_attempts": "3"
        },
        "notes": "OLTP database में transactional data store करना।"
      },
      
      {
        "processor_id": "009",
        "processor_name": "DataLakeStorage",
        "processor_type": "PutHDFS",
        "description": "Long-term analytics के लिए data lake में raw data store करना",
        "properties": {
          "Hadoop Configuration Resources": "/etc/hadoop/conf/core-site.xml,/etc/hadoop/conf/hdfs-site.xml",
          "Directory": "/irctc/booking-data/${now():format('yyyy/MM/dd')}",
          "Conflict Resolution Strategy": "replace",
          "Block Size": "134217728",
          "IO Buffer Size": "4096",
          "Replication": "3",
          "Permissions umask": "022",
          "Remote Owner": "nifi",
          "Remote Group": "hadoop"
        },
        "storage_format": {
          "file_format": "Parquet",
          "compression": "SNAPPY", 
          "partitioning": "date (YYYY/MM/DD)",
          "file_size": "128 MB target",
          "retention_policy": "7 years (regulatory requirement)"
        },
        "data_organization": {
          "raw_data": "/irctc/raw/booking-data/",
          "processed_data": "/irctc/processed/booking-analytics/",
          "archived_data": "/irctc/archive/booking-historical/"
        },
        "notes": "Historical analysis और ML training के लिए data lake storage।"
      },
      
      {
        "processor_id": "010",
        "processor_name": "ErrorHandlingProcessor",
        "processor_type": "RouteOnAttribute", 
        "description": "Processing errors को handle करना और appropriate action लेना",
        "properties": {
          "Routing Strategy": "Route to Property name"
        },
        "error_categories": {
          "validation_failure": "${processing.error.type:equals('VALIDATION')}",
          "enrichment_failure": "${processing.error.type:equals('ENRICHMENT')}",
          "database_failure": "${processing.error.type:equals('DATABASE')}",
          "kafka_failure": "${processing.error.type:equals('KAFKA')}",
          "system_failure": "${processing.error.type:equals('SYSTEM')}"
        },
        "error_handling_strategy": {
          "validation_failure": "Send to data quality team for review",
          "enrichment_failure": "Process with available data, flag for enrichment retry",
          "database_failure": "Queue for retry with exponential backoff",
          "kafka_failure": "Store in local buffer, retry streaming",
          "system_failure": "Alert operations team, escalate to engineering"
        },
        "notes": "Error handling बहुत critical है - किसी भी booking का data lost नहीं होना चाहिए।"
      }
    ],
    
    "connections": [
      {
        "source_processor": "001",
        "destination_processor": "002",
        "relationship": "success",
        "description": "Raw booking data को validation के लिए भेजना"
      },
      {
        "source_processor": "002", 
        "destination_processor": "003",
        "relationship": "valid",
        "description": "Valid booking data को enrichment के लिए"
      },
      {
        "source_processor": "002",
        "destination_processor": "010", 
        "relationship": "invalid",
        "description": "Invalid data को error handling के लिए"
      },
      {
        "source_processor": "003",
        "destination_processor": "004",
        "relationship": "success", 
        "description": "Enriched data को fraud detection के लिए"
      },
      {
        "source_processor": "004",
        "destination_processor": "005",
        "relationship": "clean",
        "description": "Clean data को geo enrichment के लिए"
      },
      {
        "source_processor": "004",
        "destination_processor": "007",
        "relationship": "suspicious",
        "description": "Suspicious bookings को immediate alerting के लिए"
      },
      {
        "source_processor": "005",
        "destination_processor": "006", 
        "relationship": "success",
        "description": "Geo-enriched data को classification के लिए"
      },
      {
        "source_processor": "006",
        "destination_processor": "007",
        "relationship": "premium_bookings,tatkal_bookings,group_bookings",
        "description": "Classified data को real-time analytics के लिए"
      },
      {
        "source_processor": "006",
        "destination_processor": "008",
        "relationship": "confirmed",
        "description": "Confirmed bookings को database में store करना"
      },
      {
        "source_processor": "008",
        "destination_processor": "009",
        "relationship": "success",
        "description": "Successfully stored data को data lake में archive करना"
      }
    ],
    
    "controller_services": [
      {
        "service_id": "IRCTCPostgreSQLConnectionPool",
        "service_type": "DBCPConnectionPool",
        "description": "IRCTC PostgreSQL database connection pool",
        "properties": {
          "Database Connection URL": "jdbc:postgresql://irctc-db-primary.gov.in:5432/irctc_booking",
          "Database Driver Class Name": "org.postgresql.Driver", 
          "Database User": "${irctc.db.username}",
          "Database Password": "${irctc.db.password}",
          "Max Wait Time": "500 millis",
          "Max Total Connections": "50",
          "Validation Query": "SELECT 1"
        }
      },
      {
        "service_id": "JsonTreeReader",
        "service_type": "JsonTreeReader", 
        "description": "JSON data reading service",
        "properties": {
          "Schema Access Strategy": "Infer Schema",
          "Allow Comments": "false"
        }
      },
      {
        "service_id": "JsonRecordSetWriter",
        "service_type": "JsonRecordSetWriter",
        "description": "JSON data writing service", 
        "properties": {
          "Schema Write Strategy": "Do Not Write Schema",
          "Date Format": "yyyy-MM-dd",
          "Time Format": "HH:mm:ss",
          "Timestamp Format": "yyyy-MM-dd HH:mm:ss"
        }
      }
    ],
    
    "variables": {
      "irctc.api.token": "Bearer ${env:IRCTC_API_TOKEN}",
      "irctc.db.username": "${env:IRCTC_DB_USER}",
      "irctc.db.password": "${env:IRCTC_DB_PASSWORD}",
      "processing.batch.size": "1000",
      "fraud.threshold.score": "0.7",
      "geo.database.path": "/opt/nifi/geodb/",
      "hdfs.replication.factor": "3"
    },
    
    "monitoring_and_alerting": {
      "metrics_collection": {
        "processor_performance": "CPU, Memory, Throughput per processor",
        "data_quality_metrics": "Validation success/failure rates",
        "business_metrics": "Bookings processed per minute, fraud detection rate",
        "system_health": "Connection pool status, disk usage, network latency"
      },
      "alerting_rules": [
        {
          "metric": "booking_processing_rate",
          "condition": "< 100 bookings/minute for 5 minutes",
          "action": "PagerDuty alert to operations team",
          "severity": "HIGH"
        },
        {
          "metric": "fraud_detection_rate", 
          "condition": "> 10% of bookings flagged as suspicious",
          "action": "Slack alert to fraud team",
          "severity": "MEDIUM"
        },
        {
          "metric": "database_connection_failures",
          "condition": "> 5 failures in 1 minute", 
          "action": "Auto-retry + Engineering team alert",
          "severity": "CRITICAL"
        },
        {
          "metric": "data_validation_failure_rate",
          "condition": "> 5% validation failures",
          "action": "Data quality team notification",
          "severity": "MEDIUM"
        }
      ]
    },
    
    "deployment_configuration": {
      "environment": "production",
      "cluster_nodes": [
        "nifi-node-1.irctc.gov.in", 
        "nifi-node-2.irctc.gov.in",
        "nifi-node-3.irctc.gov.in"
      ],
      "load_balancing": "Round-robin with health checks",
      "backup_strategy": "Daily incremental, Weekly full backup",
      "disaster_recovery": "Multi-AZ deployment with automatic failover",
      "security": {
        "authentication": "LDAP integration with government directory",
        "authorization": "Role-based access control (RBAC)",
        "encryption": "TLS 1.3 for all communications",
        "audit_logging": "Complete audit trail for compliance"
      }
    },
    
    "business_impact": {
      "daily_volume": "1M+ booking transactions processed",
      "peak_capacity": "50K bookings/minute during festivals",
      "fraud_prevention": "₹50+ crore annual fraud prevention", 
      "compliance": "Full RBI and railway ministry compliance",
      "uptime_sla": "99.95% availability guarantee",
      "data_freshness": "Real-time processing < 5 seconds"
    },
    
    "cost_analysis": {
      "monthly_costs": {
        "compute_resources": "₹25 lakhs (NiFi cluster + processing)",
        "storage_costs": "₹8 lakhs (HDFS + PostgreSQL)",
        "network_bandwidth": "₹5 lakhs (API calls + data transfer)",
        "monitoring_tools": "₹3 lakhs (Grafana + PagerDuty + logging)",
        "total_monthly": "₹41 lakhs"
      },
      "cost_per_transaction": "₹0.14 per booking processed",
      "roi_metrics": {
        "fraud_prevention_savings": "₹4.2 crores annually",
        "operational_efficiency": "60% reduction in manual processing",
        "data_quality_improvement": "95% reduction in data errors"
      }
    }
  },
  
  "supplementary_scripts": {
    "irctc_booking_enrichment.py": {
      "description": "Booking data enrichment logic",
      "key_functions": [
        "enrich_station_details()",
        "calculate_fare_validation()", 
        "add_route_information()",
        "predict_seat_availability()",
        "add_weather_context()"
      ],
      "external_dependencies": [
        "redis", "psycopg2", "requests", "pandas", "numpy"
      ]
    },
    
    "fraud_detection.py": {
      "description": "ML-based fraud detection",
      "models_used": [
        "Isolation Forest (anomaly detection)",
        "LSTM (sequence pattern analysis)",
        "Random Forest (risk scoring)"
      ],
      "features": [
        "booking_velocity", "amount_deviation", "location_mismatch",
        "payment_pattern", "user_behavior_score", "time_pattern"
      ]
    }
  },
  
  "data_flow_summary": {
    "step_1": "IRCTC API से real-time booking data extract करना",
    "step_2": "Data validation - format, business rules, completeness",
    "step_3": "Data enrichment - station details, fare validation, route info",
    "step_4": "Fraud detection - ML models से suspicious patterns detect करना", 
    "step_5": "Geo-location enrichment - IP से location निकालना",
    "step_6": "Data classification - booking types के according routing",
    "step_7": "Real-time analytics - Kafka streams के लिए",
    "step_8": "Database persistence - PostgreSQL में OLTP storage", 
    "step_9": "Data lake storage - HDFS में long-term analytics के लिए",
    "step_10": "Error handling - हर failure को properly handle करना"
  },
  
  "success_metrics": {
    "processing_speed": "50K+ bookings/minute sustained throughput",
    "data_accuracy": "99.8% data quality score maintained",
    "fraud_detection": "85% fraud detection accuracy with <2% false positives",
    "availability": "99.95% uptime achieved",
    "latency": "End-to-end processing < 5 seconds per booking"
  }
}