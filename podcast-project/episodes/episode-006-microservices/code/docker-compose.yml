# Episode 6: Microservices Infrastructure
# Complete microservices development environment
# Optimized for Indian market development and testing

version: '3.8'

services:
  # Service Discovery
  consul:
    image: consul:1.16
    container_name: consul
    ports:
      - "8500:8500"
      - "8600:8600/udp"
    environment:
      - CONSUL_BIND_INTERFACE=eth0
    command: >
      consul agent 
      -dev 
      -client=0.0.0.0 
      -ui-content-path=/ui/
      -log-level=INFO
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8500/v1/status/leader"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - microservices

  # Caching Layer
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - microservices

  # Message Queue
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"  # Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin123
      - RABBITMQ_DEFAULT_VHOST=/
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - microservices

  # Database
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=microservices
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin123
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --locale=en_US.UTF-8
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d microservices"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - microservices

  # Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:1.50
    container_name: jaeger
    ports:
      - "16686:16686"  # Web UI
      - "14268:14268"  # HTTP collector
      - "6831:6831/udp"  # UDP collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    networks:
      - microservices

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - microservices

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:10.1.0
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - microservices

  # API Gateway (Kong)
  kong-database:
    image: postgres:13-alpine
    container_name: kong-database
    environment:
      - POSTGRES_DB=kong
      - POSTGRES_USER=kong
      - POSTGRES_PASSWORD=kong123
    volumes:
      - kong_data:/var/lib/postgresql/data
    networks:
      - microservices

  kong-migration:
    image: kong/kong-gateway:3.4.0.0-alpine
    container_name: kong-migration
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-database
      - KONG_PG_USER=kong
      - KONG_PG_PASSWORD=kong123
      - KONG_PG_DATABASE=kong
    command: kong migrations bootstrap
    depends_on:
      - kong-database
    networks:
      - microservices

  kong:
    image: kong/kong-gateway:3.4.0.0-alpine
    container_name: kong
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-database
      - KONG_PG_USER=kong
      - KONG_PG_PASSWORD=kong123
      - KONG_PG_DATABASE=kong
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001
      - KONG_ADMIN_GUI_URL=http://localhost:8002
    ports:
      - "8000:8000"  # Proxy port
      - "8001:8001"  # Admin API
      - "8002:8002"  # Manager GUI
      - "8443:8443"  # Proxy SSL port
      - "8444:8444"  # Admin API SSL port
    depends_on:
      - kong-migration
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - microservices

  # Elasticsearch for logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - microservices

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.0
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - microservices

  # Sample microservices for testing
  # Product Service (Python FastAPI)
  product-service:
    build:
      context: ./services/product-service
      dockerfile: Dockerfile
    container_name: product-service
    ports:
      - "8080:8080"
    environment:
      - DATABASE_URL=postgresql://admin:admin123@postgres:5432/microservices
      - REDIS_URL=redis://redis:6379/0
      - CONSUL_HOST=consul
      - CONSUL_PORT=8500
      - SERVICE_NAME=product-service
      - SERVICE_PORT=8080
    depends_on:
      - postgres
      - redis
      - consul
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - microservices

  # Order Service (Python FastAPI)
  order-service:
    build:
      context: ./services/order-service
      dockerfile: Dockerfile
    container_name: order-service
    ports:
      - "8081:8081"
    environment:
      - DATABASE_URL=postgresql://admin:admin123@postgres:5432/microservices
      - REDIS_URL=redis://redis:6379/1
      - CONSUL_HOST=consul
      - CONSUL_PORT=8500
      - SERVICE_NAME=order-service
      - SERVICE_PORT=8081
      - RABBITMQ_URL=amqp://admin:admin123@rabbitmq:5672/
    depends_on:
      - postgres
      - redis
      - consul
      - rabbitmq
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - microservices

  # Payment Service (Go)
  payment-service:
    build:
      context: ./services/payment-service
      dockerfile: Dockerfile
    container_name: payment-service
    ports:
      - "8082:8082"
    environment:
      - DATABASE_URL=postgres://admin:admin123@postgres:5432/microservices?sslmode=disable
      - REDIS_URL=redis:6379
      - CONSUL_HOST=consul
      - CONSUL_PORT=8500
      - SERVICE_NAME=payment-service
      - SERVICE_PORT=8082
    depends_on:
      - postgres
      - redis
      - consul
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - microservices

volumes:
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  kong_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  microservices:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Health check script for all services
# Run: docker-compose exec <service> /health-check.sh