"""
Saga Pattern Coordinator - Flipkart Order Processing ‡§ï‡•á ‡§≤‡§ø‡§è
‡§Ø‡§π example ‡§¶‡§ø‡§ñ‡§æ‡§§‡§æ ‡§π‡•à ‡§ï‡§ø ‡§ï‡•à‡§∏‡•á distributed transactions ‡§ï‡•ã handle ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç
"""

import asyncio
import uuid
import json
import time
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Callable
from dataclasses import dataclass, asdict
from enum import Enum
import logging

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class SagaStepStatus(Enum):
    """Saga step ‡§ï‡§æ status"""
    PENDING = "PENDING"
    COMPLETED = "COMPLETED"
    FAILED = "FAILED"
    COMPENSATED = "COMPENSATED"

class SagaStatus(Enum):
    """‡§™‡•Ç‡§∞‡•á Saga ‡§ï‡§æ status"""
    STARTED = "STARTED"
    IN_PROGRESS = "IN_PROGRESS"
    COMPLETED = "COMPLETED"
    FAILED = "FAILED"
    COMPENSATING = "COMPENSATING"
    COMPENSATED = "COMPENSATED"

@dataclass
class SagaStep:
    """Saga ‡§ï‡§æ ‡§è‡§ï step"""
    step_id: str
    name: str
    status: SagaStepStatus = SagaStepStatus.PENDING
    execute_command: Dict[str, Any] = None
    compensate_command: Dict[str, Any] = None
    retry_count: int = 0
    max_retries: int = 3
    timeout_seconds: int = 30
    started_at: Optional[datetime] = None
    completed_at: Optional[datetime] = None
    error_message: Optional[str] = None

@dataclass
class Saga:
    """Complete Saga definition"""
    saga_id: str
    name: str
    status: SagaStatus = SagaStatus.STARTED
    steps: List[SagaStep] = None
    context: Dict[str, Any] = None
    created_at: datetime = None
    updated_at: datetime = None
    
    def __post_init__(self):
        if self.steps is None:
            self.steps = []
        if self.context is None:
            self.context = {}
        if self.created_at is None:
            self.created_at = datetime.now()
        self.updated_at = datetime.now()

# Mock External Services - Flipkart ‡§ï‡•á micro-services
class InventoryService:
    """Inventory management service"""
    
    def __init__(self):
        self.inventory = {
            "MOBILE_001": {"available": 50, "reserved": 0},
            "LAPTOP_002": {"available": 20, "reserved": 0},
            "BOOK_003": {"available": 100, "reserved": 0}
        }
    
    async def reserve_item(self, product_id: str, quantity: int, order_id: str) -> bool:
        """Product ‡§ï‡•ã reserve ‡§ï‡§∞‡§§‡§æ ‡§π‡•à"""
        await asyncio.sleep(0.5)  # Network latency simulate ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç
        
        if product_id not in self.inventory:
            raise ValueError(f"Product {product_id} ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ")
        
        item = self.inventory[product_id]
        if item["available"] < quantity:
            raise ValueError(f"‡§ï‡•á‡§µ‡§≤ {item['available']} items available ‡§π‡•à‡§Ç")
        
        # Reserve ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç
        item["available"] -= quantity
        item["reserved"] += quantity
        
        logger.info(f"‚úÖ Reserved {quantity} units of {product_id} for order {order_id}")
        return True
    
    async def release_reservation(self, product_id: str, quantity: int, order_id: str) -> bool:
        """Reservation ‡§ï‡•ã release ‡§ï‡§∞‡§§‡§æ ‡§π‡•à"""
        await asyncio.sleep(0.3)
        
        if product_id in self.inventory:
            item = self.inventory[product_id]
            item["available"] += quantity
            item["reserved"] -= quantity
            
            logger.info(f"üîÑ Released reservation for {quantity} units of {product_id}")
        
        return True

class PaymentService:
    """Payment processing service"""
    
    def __init__(self):
        self.transactions = {}
        self.user_balances = {
            "USER_123": 50000.0,  # ‚Çπ50,000 balance
            "USER_456": 25000.0,
            "USER_789": 75000.0
        }
    
    async def process_payment(self, user_id: str, amount: float, order_id: str) -> str:
        """Payment ‡§ï‡•ã process ‡§ï‡§∞‡§§‡§æ ‡§π‡•à"""
        await asyncio.sleep(1.0)  # Payment gateway delay
        
        if user_id not in self.user_balances:
            raise ValueError(f"User {user_id} ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ")
        
        if self.user_balances[user_id] < amount:
            raise ValueError(f"Insufficient balance. Available: ‚Çπ{self.user_balances[user_id]}")
        
        # Payment process ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç
        transaction_id = f"TXN_{uuid.uuid4().hex[:8]}"
        self.user_balances[user_id] -= amount
        self.transactions[transaction_id] = {
            "user_id": user_id,
            "amount": amount,
            "order_id": order_id,
            "status": "COMPLETED",
            "timestamp": datetime.now()
        }
        
        logger.info(f"üí≥ Payment processed: ‚Çπ{amount} from {user_id}, TXN: {transaction_id}")
        return transaction_id
    
    async def refund_payment(self, transaction_id: str) -> bool:
        """Payment ‡§ï‡•ã refund ‡§ï‡§∞‡§§‡§æ ‡§π‡•à"""
        await asyncio.sleep(0.8)
        
        if transaction_id not in self.transactions:
            logger.warning(f"Transaction {transaction_id} ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ")
            return False
        
        txn = self.transactions[transaction_id]
        self.user_balances[txn["user_id"]] += txn["amount"]
        txn["status"] = "REFUNDED"
        
        logger.info(f"üí∞ Refund processed: ‚Çπ{txn['amount']} to {txn['user_id']}")
        return True

class DeliveryService:
    """Delivery/Shipping service"""
    
    def __init__(self):
        self.shipments = {}
    
    async def create_shipment(self, order_id: str, address: str, items: List[Dict]) -> str:
        """Shipment create ‡§ï‡§∞‡§§‡§æ ‡§π‡•à"""
        await asyncio.sleep(0.7)
        
        shipment_id = f"SHIP_{uuid.uuid4().hex[:8]}"
        self.shipments[shipment_id] = {
            "order_id": order_id,
            "address": address,
            "items": items,
            "status": "CREATED",
            "estimated_delivery": datetime.now() + timedelta(days=3)
        }
        
        logger.info(f"üì¶ Shipment created: {shipment_id} for order {order_id}")
        return shipment_id
    
    async def cancel_shipment(self, shipment_id: str) -> bool:
        """Shipment ‡§ï‡•ã cancel ‡§ï‡§∞‡§§‡§æ ‡§π‡•à"""
        await asyncio.sleep(0.5)
        
        if shipment_id in self.shipments:
            self.shipments[shipment_id]["status"] = "CANCELLED"
            logger.info(f"‚ùå Shipment cancelled: {shipment_id}")
        
        return True

class OrderService:
    """Order management service"""
    
    def __init__(self):
        self.orders = {}
    
    async def create_order(self, user_id: str, items: List[Dict], total_amount: float) -> str:
        """Order create ‡§ï‡§∞‡§§‡§æ ‡§π‡•à"""
        await asyncio.sleep(0.3)
        
        order_id = f"ORD_{uuid.uuid4().hex[:8]}"
        self.orders[order_id] = {
            "user_id": user_id,
            "items": items,
            "total_amount": total_amount,
            "status": "CREATED",
            "created_at": datetime.now()
        }
        
        logger.info(f"üìã Order created: {order_id} for ‚Çπ{total_amount}")
        return order_id
    
    async def update_order_status(self, order_id: str, status: str) -> bool:
        """Order status update ‡§ï‡§∞‡§§‡§æ ‡§π‡•à"""
        if order_id in self.orders:
            self.orders[order_id]["status"] = status
            logger.info(f"üìù Order {order_id} status updated to {status}")
        
        return True
    
    async def cancel_order(self, order_id: str) -> bool:
        """Order ‡§ï‡•ã cancel ‡§ï‡§∞‡§§‡§æ ‡§π‡•à"""
        return await self.update_order_status(order_id, "CANCELLED")

# Saga Coordinator - ‡§Æ‡•Å‡§ñ‡•ç‡§Ø orchestrator
class SagaCoordinator:
    """Saga ‡§ï‡•ã coordinate ‡§ï‡§∞‡§§‡§æ ‡§π‡•à"""
    
    def __init__(self):
        self.sagas: Dict[str, Saga] = {}
        self.running_sagas: Dict[str, asyncio.Task] = {}
        
        # External services setup ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç
        self.inventory_service = InventoryService()
        self.payment_service = PaymentService()
        self.delivery_service = DeliveryService()
        self.order_service = OrderService()
    
    def create_flipkart_order_saga(self, user_id: str, items: List[Dict], 
                                 delivery_address: str) -> Saga:
        """Flipkart order ‡§ï‡•á ‡§≤‡§ø‡§è complete saga create ‡§ï‡§∞‡§§‡§æ ‡§π‡•à"""
        
        saga_id = f"SAGA_{uuid.uuid4().hex[:8]}"
        total_amount = sum(item["price"] * item["quantity"] for item in items)
        
        saga = Saga(
            saga_id=saga_id,
            name="FLIPKART_ORDER_PROCESSING",
            context={
                "user_id": user_id,
                "items": items,
                "delivery_address": delivery_address,
                "total_amount": total_amount,
                "order_id": None,
                "transaction_id": None,
                "shipment_id": None
            }
        )
        
        # Saga steps define ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç
        saga.steps = [
            SagaStep(
                step_id="CREATE_ORDER",
                name="Create Order",
                execute_command={
                    "service": "order",
                    "method": "create_order",
                    "params": {
                        "user_id": user_id,
                        "items": items,
                        "total_amount": total_amount
                    }
                },
                compensate_command={
                    "service": "order",
                    "method": "cancel_order",
                    "params": {"order_id": "{order_id}"}
                }
            ),
            
            SagaStep(
                step_id="RESERVE_INVENTORY",
                name="Reserve Inventory",
                execute_command={
                    "service": "inventory",
                    "method": "reserve_items",
                    "params": {
                        "items": items,
                        "order_id": "{order_id}"
                    }
                },
                compensate_command={
                    "service": "inventory", 
                    "method": "release_reservations",
                    "params": {
                        "items": items,
                        "order_id": "{order_id}"
                    }
                }
            ),
            
            SagaStep(
                step_id="PROCESS_PAYMENT",
                name="Process Payment",
                execute_command={
                    "service": "payment",
                    "method": "process_payment",
                    "params": {
                        "user_id": user_id,
                        "amount": total_amount,
                        "order_id": "{order_id}"
                    }
                },
                compensate_command={
                    "service": "payment",
                    "method": "refund_payment", 
                    "params": {"transaction_id": "{transaction_id}"}
                }
            ),
            
            SagaStep(
                step_id="CREATE_SHIPMENT",
                name="Create Shipment",
                execute_command={
                    "service": "delivery",
                    "method": "create_shipment",
                    "params": {
                        "order_id": "{order_id}",
                        "address": delivery_address,
                        "items": items
                    }
                },
                compensate_command={
                    "service": "delivery",
                    "method": "cancel_shipment",
                    "params": {"shipment_id": "{shipment_id}"}
                }
            ),
            
            SagaStep(
                step_id="CONFIRM_ORDER",
                name="Confirm Order",
                execute_command={
                    "service": "order",
                    "method": "update_order_status",
                    "params": {
                        "order_id": "{order_id}",
                        "status": "CONFIRMED"
                    }
                },
                compensate_command={
                    "service": "order",
                    "method": "update_order_status",
                    "params": {
                        "order_id": "{order_id}",
                        "status": "CANCELLED"
                    }
                }
            )
        ]
        
        self.sagas[saga_id] = saga
        return saga
    
    async def execute_saga(self, saga_id: str) -> bool:
        """Saga ‡§ï‡•ã execute ‡§ï‡§∞‡§§‡§æ ‡§π‡•à"""
        saga = self.sagas.get(saga_id)
        if not saga:
            raise ValueError(f"Saga {saga_id} ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ")
        
        logger.info(f"üöÄ Starting saga execution: {saga.name} ({saga_id})")
        saga.status = SagaStatus.IN_PROGRESS
        
        try:
            # ‡§∏‡§≠‡•Ä steps ‡§ï‡•ã execute ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç
            for step in saga.steps:
                success = await self._execute_step(saga, step)
                if not success:
                    # Step fail ‡§π‡•ã ‡§ó‡§Ø‡§æ, compensation ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç
                    await self._compensate_saga(saga, step)
                    return False
            
            # ‡§∏‡§≠‡•Ä steps successful ‡§π‡•à‡§Ç
            saga.status = SagaStatus.COMPLETED
            saga.updated_at = datetime.now()
            logger.info(f"‚úÖ Saga completed successfully: {saga_id}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Saga execution failed: {str(e)}")
            saga.status = SagaStatus.FAILED
            await self._compensate_saga(saga)
            return False
    
    async def _execute_step(self, saga: Saga, step: SagaStep) -> bool:
        """‡§è‡§ï step ‡§ï‡•ã execute ‡§ï‡§∞‡§§‡§æ ‡§π‡•à"""
        logger.info(f"‚è≥ Executing step: {step.name}")
        
        step.status = SagaStepStatus.PENDING
        step.started_at = datetime.now()
        
        try:
            # Command ‡§Æ‡•á‡§Ç context variables ‡§ï‡•ã replace ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç
            command = self._resolve_command_params(step.execute_command, saga.context)
            
            # Service call ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç
            result = await self._call_service(command)
            
            # Result ‡§ï‡•ã context ‡§Æ‡•á‡§Ç store ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç
            if step.step_id == "CREATE_ORDER":
                saga.context["order_id"] = result
            elif step.step_id == "PROCESS_PAYMENT":
                saga.context["transaction_id"] = result
            elif step.step_id == "CREATE_SHIPMENT":
                saga.context["shipment_id"] = result
            
            step.status = SagaStepStatus.COMPLETED
            step.completed_at = datetime.now()
            logger.info(f"‚úÖ Step completed: {step.name}")
            return True
            
        except Exception as e:
            step.status = SagaStepStatus.FAILED
            step.error_message = str(e)
            step.completed_at = datetime.now()
            logger.error(f"‚ùå Step failed: {step.name} - {str(e)}")
            return False
    
    async def _compensate_saga(self, saga: Saga, failed_step: SagaStep = None):
        """Saga ‡§ï‡§æ compensation ‡§ï‡§∞‡§§‡§æ ‡§π‡•à"""
        logger.info(f"üîÑ Starting saga compensation: {saga.saga_id}")
        
        saga.status = SagaStatus.COMPENSATING
        
        # Failed step ‡§ï‡•á ‡§™‡§π‡§≤‡•á ‡§ï‡•á ‡§∏‡§≠‡•Ä completed steps ‡§ï‡•ã compensate ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç
        steps_to_compensate = []
        for step in saga.steps:
            if step == failed_step:
                break
            if step.status == SagaStepStatus.COMPLETED:
                steps_to_compensate.append(step)
        
        # Reverse order ‡§Æ‡•á‡§Ç compensation ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç
        for step in reversed(steps_to_compensate):
            await self._compensate_step(saga, step)
        
        saga.status = SagaStatus.COMPENSATED
        saga.updated_at = datetime.now()
        logger.info(f"üîÑ Saga compensation completed: {saga.saga_id}")
    
    async def _compensate_step(self, saga: Saga, step: SagaStep):
        """‡§è‡§ï step ‡§ï‡§æ compensation ‡§ï‡§∞‡§§‡§æ ‡§π‡•à"""
        if not step.compensate_command:
            logger.info(f"‚ö†Ô∏è  No compensation defined for step: {step.name}")
            return
        
        logger.info(f"üîÑ Compensating step: {step.name}")
        
        try:
            command = self._resolve_command_params(step.compensate_command, saga.context)
            await self._call_service(command)
            
            step.status = SagaStepStatus.COMPENSATED
            logger.info(f"‚úÖ Step compensated: {step.name}")
            
        except Exception as e:
            logger.error(f"‚ùå Step compensation failed: {step.name} - {str(e)}")
    
    def _resolve_command_params(self, command: Dict, context: Dict) -> Dict:
        """Command parameters ‡§Æ‡•á‡§Ç context variables ‡§ï‡•ã resolve ‡§ï‡§∞‡§§‡§æ ‡§π‡•à"""
        resolved_command = json.loads(json.dumps(command))
        
        def replace_placeholders(obj):
            if isinstance(obj, str) and obj.startswith("{") and obj.endswith("}"):
                key = obj[1:-1]
                return context.get(key, obj)
            elif isinstance(obj, dict):
                return {k: replace_placeholders(v) for k, v in obj.items()}
            elif isinstance(obj, list):
                return [replace_placeholders(item) for item in obj]
            return obj
        
        return replace_placeholders(resolved_command)
    
    async def _call_service(self, command: Dict) -> Any:
        """Service ‡§ï‡•ã call ‡§ï‡§∞‡§§‡§æ ‡§π‡•à"""
        service_name = command["service"]
        method_name = command["method"]
        params = command["params"]
        
        # Service ‡§ï‡•ã map ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç
        service_map = {
            "order": self.order_service,
            "inventory": self.inventory_service,
            "payment": self.payment_service,
            "delivery": self.delivery_service
        }
        
        service = service_map.get(service_name)
        if not service:
            raise ValueError(f"Service {service_name} ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•Ä")
        
        # Special handling for inventory operations
        if service_name == "inventory":
            if method_name == "reserve_items":
                items = params["items"]
                order_id = params["order_id"]
                for item in items:
                    await service.reserve_item(
                        item["product_id"], 
                        item["quantity"], 
                        order_id
                    )
                return True
            elif method_name == "release_reservations":
                items = params["items"]
                order_id = params["order_id"]
                for item in items:
                    await service.release_reservation(
                        item["product_id"], 
                        item["quantity"], 
                        order_id
                    )
                return True
        
        # Normal method call ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç
        method = getattr(service, method_name)
        return await method(**params)
    
    def get_saga_status(self, saga_id: str) -> Dict:
        """Saga ‡§ï‡§æ current status return ‡§ï‡§∞‡§§‡§æ ‡§π‡•à"""
        saga = self.sagas.get(saga_id)
        if not saga:
            return {"error": "Saga ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ"}
        
        return {
            "saga_id": saga.saga_id,
            "name": saga.name,
            "status": saga.status.value,
            "context": saga.context,
            "steps": [
                {
                    "step_id": step.step_id,
                    "name": step.name,
                    "status": step.status.value,
                    "error_message": step.error_message
                }
                for step in saga.steps
            ],
            "created_at": saga.created_at.isoformat(),
            "updated_at": saga.updated_at.isoformat()
        }

# Demo ‡§î‡§∞ Testing
async def demo_flipkart_order_saga():
    """Flipkart order processing ‡§ï‡§æ demo"""
    print("üõí Flipkart Order Saga Pattern Demo ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç...")
    
    coordinator = SagaCoordinator()
    
    # Sample order data
    items = [
        {"product_id": "MOBILE_001", "name": "iPhone 15", "quantity": 1, "price": 79900.0},
        {"product_id": "BOOK_003", "name": "Python Programming", "quantity": 2, "price": 599.0}
    ]
    
    user_id = "USER_123"
    delivery_address = "Flat 201, Akshaya Nagar, Bengaluru - 560037"
    
    print(f"\nüì± Order Details:")
    print(f"User: {user_id}")
    print(f"Items: {len(items)} items")
    for item in items:
        print(f"  - {item['name']}: {item['quantity']} x ‚Çπ{item['price']}")
    print(f"Delivery Address: {delivery_address}")
    print(f"Total Amount: ‚Çπ{sum(item['price'] * item['quantity'] for item in items)}")
    
    # Saga create ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç
    saga = coordinator.create_flipkart_order_saga(user_id, items, delivery_address)
    print(f"\nüöÄ Saga created: {saga.saga_id}")
    
    # Progress monitor ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è
    async def monitor_progress():
        while True:
            status = coordinator.get_saga_status(saga.saga_id)
            print(f"\nüìä Saga Status: {status['status']}")
            
            for step in status['steps']:
                status_emoji = {
                    "PENDING": "‚è≥",
                    "COMPLETED": "‚úÖ", 
                    "FAILED": "‚ùå",
                    "COMPENSATED": "üîÑ"
                }.get(step['status'], "‚ùì")
                
                print(f"  {status_emoji} {step['name']}: {step['status']}")
                if step.get('error_message'):
                    print(f"    Error: {step['error_message']}")
            
            if status['status'] in ['COMPLETED', 'FAILED', 'COMPENSATED']:
                break
            
            await asyncio.sleep(2)
    
    # Saga execute ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç ‡§î‡§∞ monitor ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç
    print(f"\nüèÅ Saga execution ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç...")
    
    # Monitor task start ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç
    monitor_task = asyncio.create_task(monitor_progress())
    
    # Saga execute ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç
    success = await coordinator.execute_saga(saga.saga_id)
    
    # Monitor task ‡§ï‡•ã complete ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç
    await monitor_task
    
    # Final result
    if success:
        print(f"\nüéâ Order successfully processed!")
        print(f"Order ID: {saga.context.get('order_id')}")
        print(f"Transaction ID: {saga.context.get('transaction_id')}")
        print(f"Shipment ID: {saga.context.get('shipment_id')}")
    else:
        print(f"\nüíî Order processing failed but compensation completed")
    
    return saga

async def demo_saga_failure_scenario():
    """Failure scenario ‡§ï‡§æ demo"""
    print("\n" + "="*60)
    print("üö® Failure Scenario Demo - Payment Failed")
    print("="*60)
    
    coordinator = SagaCoordinator()
    
    # Payment fail ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è high amount order
    items = [
        {"product_id": "LAPTOP_002", "name": "MacBook Pro", "quantity": 2, "price": 150000.0}  # Total: ‚Çπ3,00,000
    ]
    
    user_id = "USER_456"  # ‡§á‡§∏ user ‡§ï‡•á ‡§™‡§æ‡§∏ ‡§ï‡•á‡§µ‡§≤ ‚Çπ25,000 ‡§π‡•à
    delivery_address = "Office 5A, Cyber City, Gurgaon - 122001"
    
    print(f"\nüí∞ Order Amount: ‚Çπ{sum(item['price'] * item['quantity'] for item in items)}")
    print(f"üí≥ User Balance: ‚Çπ{coordinator.payment_service.user_balances[user_id]}")
    print("üîÆ Expected: Payment will fail due to insufficient balance")
    
    # Saga create ‡§î‡§∞ execute ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç
    saga = coordinator.create_flipkart_order_saga(user_id, items, delivery_address)
    success = await coordinator.execute_saga(saga.saga_id)
    
    # Final status check ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç
    status = coordinator.get_saga_status(saga.saga_id)
    print(f"\nüìã Final Saga Status: {status['status']}")
    
    print(f"\nüîç Step-by-step breakdown:")
    for step in status['steps']:
        print(f"  - {step['name']}: {step['status']}")
        if step.get('error_message'):
            print(f"    ‚ö†Ô∏è Error: {step['error_message']}")
    
    print(f"\n‚úÖ Compensation successful - all allocated resources released!")

if __name__ == "__main__":
    import asyncio
    
    print("Saga Pattern Coordinator Demo")
    print("="*50)
    
    # Success scenario
    asyncio.run(demo_flipkart_order_saga())
    
    # Failure scenario  
    asyncio.run(demo_saga_failure_scenario())