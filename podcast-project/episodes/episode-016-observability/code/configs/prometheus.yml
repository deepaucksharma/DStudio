# Episode 16: Observability & Monitoring
# Prometheus Configuration for Indian Applications
# 
# भारतीय ecosystem के लिए comprehensive monitoring configuration
# UPI, E-commerce, Banking, और regional services के लिए

global:
  scrape_interval: 15s          # Normal interval for most metrics
  evaluation_interval: 15s      # Rule evaluation frequency
  external_labels:
    cluster: 'indian-production'
    region: 'mumbai'
    datacenter: 'mumbai-dc1'
    country: 'IN'

# Rule files for alerting
rule_files:
  - "prometheus_rules.yml"
  - "indian_business_rules.yml"

# Alertmanager configuration
alerting:
  alertmanagers:
    - static_configs:
        - targets:
          - alertmanager:9093

# Scrape configurations
scrape_configs:

  # Prometheus self-monitoring
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']
    scrape_interval: 30s
    metrics_path: /metrics

  # Node Exporter - System Metrics
  - job_name: 'node-exporter'
    static_configs:
      - targets: ['node-exporter:9100']
    scrape_interval: 15s
    relabel_configs:
      - source_labels: [__address__]
        target_label: instance
        regex: '(.+)'
        replacement: 'mumbai-node-${1}'

  # cAdvisor - Container Metrics
  - job_name: 'cadvisor'
    static_configs:
      - targets: ['cadvisor:8080']
    scrape_interval: 15s
    metrics_path: /metrics

  # UPI Monitoring Service (Python)
  - job_name: 'upi-monitoring'
    static_configs:
      - targets: ['upi-monitoring:8000']
    scrape_interval: 10s        # High frequency for payment metrics
    metrics_path: /metrics
    relabel_configs:
      - source_labels: [__address__]
        target_label: service_type
        replacement: 'upi_payment_gateway'
      - source_labels: [__address__]
        target_label: region
        replacement: 'mumbai'

  # Payment Metrics Exporter (Go)
  - job_name: 'payment-exporter'
    static_configs:
      - targets: ['payment-exporter:8080']
    scrape_interval: 5s         # Very high frequency for payment processing
    metrics_path: /metrics
    relabel_configs:
      - source_labels: [__address__]
        target_label: service_type
        replacement: 'payment_processor'

  # IRCTC Service (Java with Micrometer)
  - job_name: 'irctc-service'
    static_configs:
      - targets: ['irctc-service:8080']
    scrape_interval: 10s        # Frequent for booking system
    metrics_path: /actuator/prometheus
    relabel_configs:
      - source_labels: [__address__]
        target_label: service_type
        replacement: 'railway_booking'

  # Alertmanager
  - job_name: 'alertmanager'
    static_configs:
      - targets: ['alertmanager:9093']
    scrape_interval: 30s

  # Grafana
  - job_name: 'grafana'
    static_configs:
      - targets: ['grafana:3000']
    scrape_interval: 30s
    metrics_path: /metrics

  # Elasticsearch Exporter
  - job_name: 'elasticsearch'
    static_configs:
      - targets: ['elasticsearch:9200']
    scrape_interval: 30s
    metrics_path: /_prometheus/metrics

  # Redis Exporter
  - job_name: 'redis'
    static_configs:
      - targets: ['redis:6379']
    scrape_interval: 15s

  # Indian Banks API Health Checks
  # (In production, these would be actual bank endpoints)
  - job_name: 'indian-banks-health'
    static_configs:
      - targets: 
          - 'sbi-upi-gateway:8080'
          - 'hdfc-upi-gateway:8080'
          - 'icici-upi-gateway:8080'
          - 'axis-upi-gateway:8080'
          - 'kotak-upi-gateway:8080'
    scrape_interval: 30s
    metrics_path: /health
    relabel_configs:
      - source_labels: [__address__]
        regex: '([^-]+)-.*'
        target_label: bank_name
        replacement: '${1}'
      - source_labels: [__address__]
        target_label: service_type
        replacement: 'bank_gateway'

  # E-commerce Platforms (Flipkart, Amazon India)
  - job_name: 'ecommerce-platforms'
    static_configs:
      - targets:
          - 'flipkart-api:8080'
          - 'amazon-india-api:8080'
    scrape_interval: 15s
    relabel_configs:
      - source_labels: [__address__]
        regex: '([^-]+)-.*'
        target_label: platform_name
        replacement: '${1}'

  # Food Delivery Services
  - job_name: 'food-delivery'
    static_configs:
      - targets:
          - 'zomato-api:8080'
          - 'swiggy-api:8080'
    scrape_interval: 10s        # High frequency for real-time orders
    relabel_configs:
      - source_labels: [__address__]
        regex: '([^-]+)-.*'
        target_label: platform_name
        replacement: '${1}'

  # Ride Sharing Services
  - job_name: 'ride-sharing'
    static_configs:
      - targets:
          - 'ola-api:8080'
          - 'uber-india-api:8080'
    scrape_interval: 10s        # Real-time location tracking
    relabel_configs:
      - source_labels: [__address__]
        regex: '([^-]+)-.*'
        target_label: platform_name
        replacement: '${1}'

  # Regional Services Discovery
  # Mumbai Region
  - job_name: 'mumbai-services'
    consul_sd_configs:
      - server: 'consul-mumbai:8500'
        services: ['payment', 'booking', 'delivery']
    relabel_configs:
      - source_labels: [__meta_consul_service]
        target_label: service_name
      - source_labels: [__meta_consul_node]
        target_label: node_name
      - replacement: 'mumbai'
        target_label: region

  # Delhi Region
  - job_name: 'delhi-services'
    consul_sd_configs:
      - server: 'consul-delhi:8500'
        services: ['payment', 'booking', 'delivery']
    relabel_configs:
      - source_labels: [__meta_consul_service]
        target_label: service_name
      - replacement: 'delhi'
        target_label: region

  # Bangalore Region
  - job_name: 'bangalore-services'
    consul_sd_configs:
      - server: 'consul-bangalore:8500'
        services: ['payment', 'booking', 'delivery']
    relabel_configs:
      - source_labels: [__meta_consul_service]
        target_label: service_name
      - replacement: 'bangalore'
        target_label: region

  # Kubernetes Service Discovery (for cloud deployments)
  - job_name: 'kubernetes-pods'
    kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
            - production
            - payment-gateway
            - booking-system
    relabel_configs:
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: kubernetes_pod_name

  # Festival Season Dynamic Configuration
  # During festivals, increase scrape frequency
  - job_name: 'festival-high-frequency'
    static_configs:
      - targets: 
          - 'payment-gateway:8080'
          - 'order-service:8080'
          - 'inventory-service:8080'
    scrape_interval: 2s         # Very high frequency during festivals
    metrics_path: /metrics
    # This job would be enabled/disabled based on festival calendar

  # Third-party Service Monitoring
  - job_name: 'third-party-apis'
    static_configs:
      - targets:
          - 'razorpay-api:443'
          - 'payu-api:443'
          - 'cashfree-api:443'
    scrape_interval: 60s        # Lower frequency for external APIs
    scheme: https
    relabel_configs:
      - source_labels: [__address__]
        regex: '([^-]+)-.*'
        target_label: payment_provider
        replacement: '${1}'

# Storage configuration
storage:
  tsdb:
    retention.time: 30d         # 30 days for production
    retention.size: 50GB        # Size-based retention
    wal-compression: true       # Enable WAL compression

# Remote write configuration for long-term storage
remote_write:
  - url: "http://thanos-receive:19291/api/v1/receive"
    queue_config:
      max_samples_per_send: 10000
      batch_send_deadline: 5s
      min_shards: 4
      max_shards: 200
    metadata_config:
      send: true
      send_interval: 30s

# Remote read configuration for federated queries
remote_read:
  - url: "http://thanos-query:9090/api/v1/query"
    read_recent: true

# Indian Business Context Features:
#
# 1. Regional Configuration:
#    - Multi-region scraping (Mumbai, Delhi, Bangalore)
#    - Service discovery per region
#    - Regional label assignment
#
# 2. Payment System Focus:
#    - High-frequency scraping for payment services
#    - Bank gateway health monitoring
#    - UPI transaction metrics
#
# 3. Festival Season Adaptability:
#    - Dynamic scrape intervals
#    - Festival-specific job configurations
#    - Seasonal metric collection
#
# 4. Indian Service Ecosystem:
#    - E-commerce platforms
#    - Food delivery services
#    - Ride sharing services
#    - Banking and fintech services
#
# 5. Compliance and Regulatory:
#    - Long-term data retention for audits
#    - Regional data isolation
#    - Secure metric collection
#
# 6. Performance Optimization:
#    - Efficient label management
#    - Optimized scrape intervals
#    - Resource-based retention
#    - Compression enabled