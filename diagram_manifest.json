{
  "total_diagrams": 308,
  "statistics": {
    "graph": 271,
    "unknown": 22,
    "sequence": 4,
    "state": 9,
    "flowchart": 2
  },
  "diagrams": [
    {
      "id": "pattern-antipatterns-guide-0-64faf133",
      "file": "pattern-antipatterns-guide.md",
      "index": 0,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "pattern-antipatterns-guide.md"
    },
    {
      "id": "pattern-antipatterns-guide-1-64faf133",
      "file": "pattern-antipatterns-guide.md",
      "index": 1,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "pattern-antipatterns-guide.md"
    },
    {
      "id": "pattern-antipatterns-guide-2-37af930c",
      "file": "pattern-antipatterns-guide.md",
      "index": 2,
      "type": "unknown",
      "content": "classDiagram\n    class Component9 {\n        +process() void\n        +validate() bool\n        -state: State\n    }\n    class Handler9 {\n        +handle() Result\n        +configure() void\n    }\n    Component9 --> Handler9 : uses\n    \n    note for Component9 \"Core processing logic\"",
      "line_count": 13,
      "node_count": 0,
      "complexity": "low",
      "category": "pattern-antipatterns-guide.md"
    },
    {
      "id": "pattern-antipatterns-guide-3-d5803d11",
      "file": "pattern-antipatterns-guide.md",
      "index": 3,
      "type": "unknown",
      "content": "classDiagram\n    class Component12 {\n        +process() void\n        +validate() bool\n        -state: State\n    }\n    class Handler12 {\n        +handle() Result\n        +configure() void\n    }\n    Component12 --> Handler12 : uses\n    \n    note for Component12 \"Core processing logic\"",
      "line_count": 13,
      "node_count": 0,
      "complexity": "low",
      "category": "pattern-antipatterns-guide.md"
    },
    {
      "id": "pattern-antipatterns-guide-4-3b31a448",
      "file": "pattern-antipatterns-guide.md",
      "index": 4,
      "type": "graph",
      "content": "graph LR\n    A[Component A] --> B[Component B]\n    B --> C[Component C]",
      "line_count": 3,
      "node_count": 3,
      "complexity": "low",
      "category": "pattern-antipatterns-guide.md"
    },
    {
      "id": "pattern-antipatterns-guide-5-c6a48579",
      "file": "pattern-antipatterns-guide.md",
      "index": 5,
      "type": "graph",
      "content": "graph TB\n    subgraph \"Component 0\"\n        Input[Input Handler]\n        Process[Core Processor]\n        Output[Output Handler]\n        \n        Input --> Process\n        Process --> Output\n    end\n    \n    subgraph \"Dependencies\"\n        Cache[(Cache)]\n        Queue[Message Queue]\n        Store[(Data Store)]\n    end\n    \n    Process --> Cache\n    Process --> Queue\n    Process --> Store\n    \n    style Input fill:#e3f2fd\n    style Process fill:#f3e5f5\n    style Output fill:#e8f5e9",
      "line_count": 23,
      "node_count": 6,
      "complexity": "low",
      "category": "pattern-antipatterns-guide.md"
    },
    {
      "id": "pattern-antipatterns-guide-6-3361824c",
      "file": "pattern-antipatterns-guide.md",
      "index": 6,
      "type": "graph",
      "content": "graph TB\n    subgraph \"Component 2\"\n        Input[Input Handler]\n        Process[Core Processor]\n        Output[Output Handler]\n        \n        Input --> Process\n        Process --> Output\n    end\n    \n    subgraph \"Dependencies\"\n        Cache[(Cache)]\n        Queue[Message Queue]\n        Store[(Data Store)]\n    end\n    \n    Process --> Cache\n    Process --> Queue\n    Process --> Store\n    \n    style Input fill:#e3f2fd\n    style Process fill:#f3e5f5\n    style Output fill:#e8f5e9",
      "line_count": 23,
      "node_count": 6,
      "complexity": "low",
      "category": "pattern-antipatterns-guide.md"
    },
    {
      "id": "pattern-antipatterns-guide-7-fba0eeb1",
      "file": "pattern-antipatterns-guide.md",
      "index": 7,
      "type": "sequence",
      "content": "sequenceDiagram\n    participant Client\n    participant Service\n    participant Database\n    participant Cache\n    \n    Client->>Service: Request\n    Service->>Cache: Check cache\n    alt Cache hit\n        Cache-->>Service: Cached data\n    else Cache miss\n        Service->>Database: Query\n        Database-->>Service: Data\n        Service->>Cache: Update cache\n    end\n    Service-->>Client: Response",
      "line_count": 16,
      "node_count": 0,
      "complexity": "low",
      "category": "pattern-antipatterns-guide.md"
    },
    {
      "id": "pattern-antipatterns-guide-8-4d0fb947",
      "file": "pattern-antipatterns-guide.md",
      "index": 8,
      "type": "graph",
      "content": "graph TB\n    subgraph \"Component 5\"\n        Input[Input Handler]\n        Process[Core Processor]\n        Output[Output Handler]\n        \n        Input --> Process\n        Process --> Output\n    end\n    \n    subgraph \"Dependencies\"\n        Cache[(Cache)]\n        Queue[Message Queue]\n        Store[(Data Store)]\n    end\n    \n    Process --> Cache\n    Process --> Queue\n    Process --> Store\n    \n    style Input fill:#e3f2fd\n    style Process fill:#f3e5f5\n    style Output fill:#e8f5e9",
      "line_count": 23,
      "node_count": 6,
      "complexity": "low",
      "category": "pattern-antipatterns-guide.md"
    },
    {
      "id": "pattern-antipatterns-guide-9-d7e34dd7",
      "file": "pattern-antipatterns-guide.md",
      "index": 9,
      "type": "graph",
      "content": "graph TB\n    subgraph \"Component 6\"\n        Input[Input Handler]\n        Process[Core Processor]\n        Output[Output Handler]\n        \n        Input --> Process\n        Process --> Output\n    end\n    \n    subgraph \"Dependencies\"\n        Cache[(Cache)]\n        Queue[Message Queue]\n        Store[(Data Store)]\n    end\n    \n    Process --> Cache\n    Process --> Queue\n    Process --> Store\n    \n    style Input fill:#e3f2fd\n    style Process fill:#f3e5f5\n    style Output fill:#e8f5e9",
      "line_count": 23,
      "node_count": 6,
      "complexity": "low",
      "category": "pattern-antipatterns-guide.md"
    },
    {
      "id": "pattern-antipatterns-guide-10-7b417836",
      "file": "pattern-antipatterns-guide.md",
      "index": 10,
      "type": "graph",
      "content": "graph TB\n    subgraph \"Component 15\"\n        Input[Input Handler]\n        Process[Core Processor]\n        Output[Output Handler]\n        \n        Input --> Process\n        Process --> Output\n    end\n    \n    subgraph \"Dependencies\"\n        Cache[(Cache)]\n        Queue[Message Queue]\n        Store[(Data Store)]\n    end\n    \n    Process --> Cache\n    Process --> Queue\n    Process --> Store\n    \n    style Input fill:#e3f2fd\n    style Process fill:#f3e5f5\n    style Output fill:#e8f5e9",
      "line_count": 23,
      "node_count": 6,
      "complexity": "low",
      "category": "pattern-antipatterns-guide.md"
    },
    {
      "id": "pattern-antipatterns-guide-11-0ffc3a64",
      "file": "pattern-antipatterns-guide.md",
      "index": 11,
      "type": "graph",
      "content": "graph TB\n    subgraph \"Component 17\"\n        Input[Input Handler]\n        Process[Core Processor]\n        Output[Output Handler]\n        \n        Input --> Process\n        Process --> Output\n    end\n    \n    subgraph \"Dependencies\"\n        Cache[(Cache)]\n        Queue[Message Queue]\n        Store[(Data Store)]\n    end\n    \n    Process --> Cache\n    Process --> Queue\n    Process --> Store\n    \n    style Input fill:#e3f2fd\n    style Process fill:#f3e5f5\n    style Output fill:#e8f5e9",
      "line_count": 23,
      "node_count": 6,
      "complexity": "low",
      "category": "pattern-antipatterns-guide.md"
    },
    {
      "id": "pattern-antipatterns-guide-12-fc2cc220",
      "file": "pattern-antipatterns-guide.md",
      "index": 12,
      "type": "graph",
      "content": "graph TB\n    subgraph \"Component 19\"\n        Input[Input Handler]\n        Process[Core Processor]\n        Output[Output Handler]\n        \n        Input --> Process\n        Process --> Output\n    end\n    \n    subgraph \"Dependencies\"\n        Cache[(Cache)]\n        Queue[Message Queue]\n        Store[(Data Store)]\n    end\n    \n    Process --> Cache\n    Process --> Queue\n    Process --> Store\n    \n    style Input fill:#e3f2fd\n    style Process fill:#f3e5f5\n    style Output fill:#e8f5e9",
      "line_count": 23,
      "node_count": 6,
      "complexity": "low",
      "category": "pattern-antipatterns-guide.md"
    },
    {
      "id": "pattern-antipatterns-guide-13-e686a241",
      "file": "pattern-antipatterns-guide.md",
      "index": 13,
      "type": "graph",
      "content": "graph TB\n    subgraph \"Component 21\"\n        Input[Input Handler]\n        Process[Core Processor]\n        Output[Output Handler]\n        \n        Input --> Process\n        Process --> Output\n    end\n    \n    subgraph \"Dependencies\"\n        Cache[(Cache)]\n        Queue[Message Queue]\n        Store[(Data Store)]\n    end\n    \n    Process --> Cache\n    Process --> Queue\n    Process --> Store\n    \n    style Input fill:#e3f2fd\n    style Process fill:#f3e5f5\n    style Output fill:#e8f5e9",
      "line_count": 23,
      "node_count": 6,
      "complexity": "low",
      "category": "pattern-antipatterns-guide.md"
    },
    {
      "id": "pattern-comparison-tool-0-64faf133",
      "file": "pattern-comparison-tool.md",
      "index": 0,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "pattern-comparison-tool.md"
    },
    {
      "id": "pattern-comparison-tool-1-c5b63505",
      "file": "pattern-comparison-tool.md",
      "index": 1,
      "type": "graph",
      "content": "graph LR\n    subgraph \"Resilience Stack\"\n        CB[Circuit Breaker]\n        R[Retry]\n        T[Timeout]\n        CB --> R\n        R --> T\n    end\n    \n    subgraph \"Data Stack\"\n        ES[Event Sourcing]\n        CQRS[CQRS]\n        S[Saga]\n        ES --> CQRS\n        CQRS --> S\n    end\n    \n    subgraph \"Scale Stack\"\n        LB[Load Balancer]\n        AS[Auto-scaling]\n        C[Caching]\n        LB --> AS\n        AS --> C\n    end",
      "line_count": 24,
      "node_count": 9,
      "complexity": "low",
      "category": "pattern-comparison-tool.md"
    },
    {
      "id": "pattern-comparison-tool-2-3b31a448",
      "file": "pattern-comparison-tool.md",
      "index": 2,
      "type": "graph",
      "content": "graph LR\n    A[Component A] --> B[Component B]\n    B --> C[Component C]",
      "line_count": 3,
      "node_count": 3,
      "complexity": "low",
      "category": "pattern-comparison-tool.md"
    },
    {
      "id": "pattern-comparison-tool-3-d69fcedc",
      "file": "pattern-comparison-tool.md",
      "index": 3,
      "type": "graph",
      "content": "graph TD\n    Start[Need This Pattern?] --> Q1{High Traffic?}\n    Q1 -->|Yes| Q2{Distributed System?}\n    Q1 -->|No| Simple[Use Simple Approach]\n    Q2 -->|Yes| Q3{Complex Coordination?}\n    Q2 -->|No| Basic[Use Basic Pattern]\n    Q3 -->|Yes| Advanced[Use This Pattern]\n    Q3 -->|No| Intermediate[Consider Alternatives]\n    \n    style Start fill:#f9f,stroke:#333,stroke-width:2px\n    style Advanced fill:#bfb,stroke:#333,stroke-width:2px\n    style Simple fill:#ffd,stroke:#333,stroke-width:2px",
      "line_count": 12,
      "node_count": 5,
      "complexity": "low",
      "category": "pattern-comparison-tool.md"
    },
    {
      "id": "index-0-d5aed166",
      "file": "index.md",
      "index": 0,
      "type": "graph",
      "content": "graph LR\n    A[Health Check] --> B[Load Balancer]\n    B --> C[Retry + Timeout]\n    C --> D[Circuit Breaker]\n    D --> E[Basic Caching]\n    \n    style A fill:#4caf50\n    style E fill:#2196f3",
      "line_count": 8,
      "node_count": 5,
      "complexity": "low",
      "category": "index.md"
    },
    {
      "id": "index-1-42f6a62a",
      "file": "index.md",
      "index": 1,
      "type": "graph",
      "content": "graph LR\n    A[API Gateway] --> B[Service Discovery]\n    B --> C[Message Queue]\n    C --> D[Auto-scaling]\n    D --> E[Database per Service]\n    \n    style A fill:#2196f3\n    style E fill:#ff9800",
      "line_count": 8,
      "node_count": 5,
      "complexity": "low",
      "category": "index.md"
    },
    {
      "id": "index-2-0487a8ca",
      "file": "index.md",
      "index": 2,
      "type": "graph",
      "content": "graph LR\n    A[Service Mesh] --> B[Event Sourcing]\n    B --> C[CQRS]\n    C --> D[Saga]\n    D --> E[Multi-region]\n    \n    style A fill:#ff9800\n    style E fill:#9c27b0",
      "line_count": 8,
      "node_count": 5,
      "complexity": "low",
      "category": "index.md"
    },
    {
      "id": "pattern-template-v2-0-daedf8a6",
      "file": "pattern-template-v2.md",
      "index": 0,
      "type": "graph",
      "content": "graph LR\n    A[Simple Visual] --> B[That Shows]\n    B --> C[Core Concept]\n    \n    style A fill:#81c784,stroke:#388e3c\n    style C fill:#64b5f6,stroke:#1976d2",
      "line_count": 6,
      "node_count": 3,
      "complexity": "low",
      "category": "pattern-template-v2.md"
    },
    {
      "id": "pattern-template-v2-1-3d4a2262",
      "file": "pattern-template-v2.md",
      "index": 1,
      "type": "graph",
      "content": "graph TB\n    subgraph \"Pattern Architecture\"\n        A[Component A] --> B[Component B]\n        B --> C[Component C]\n        C --> D[Component D]\n    end\n    \n    classDef primary fill:#5448C8,stroke:#3f33a6,color:#fff\n    classDef secondary fill:#00BCD4,stroke:#0097a7,color:#fff\n    \n    class A,C primary\n    class B,D secondary",
      "line_count": 12,
      "node_count": 4,
      "complexity": "low",
      "category": "pattern-template-v2.md"
    },
    {
      "id": "pattern-template-v2-2-0713935c",
      "file": "pattern-template-v2.md",
      "index": 2,
      "type": "state",
      "content": "stateDiagram-v2\n    [*] --> State1\n    State1 --> State2: Event1\n    State2 --> State3: Event2\n    State3 --> State1: Event3\n    State3 --> [*]: Complete",
      "line_count": 6,
      "node_count": 0,
      "complexity": "low",
      "category": "pattern-template-v2.md"
    },
    {
      "id": "pattern-template-v2-3-cf6d4231",
      "file": "pattern-template-v2.md",
      "index": 3,
      "type": "graph",
      "content": "graph LR\n    subgraph \"Small Scale\"\n        A1[Single Instance]\n    end\n    \n    subgraph \"Medium Scale\"\n        B1[Instance 1]\n        B2[Instance 2]\n        B3[Load Balancer]\n        B3 --> B1\n        B3 --> B2\n    end\n    \n    subgraph \"Large Scale\"\n        C1[Region 1]\n        C2[Region 2]\n        C3[Global LB]\n        C3 --> C1\n        C3 --> C2\n    end\n    \n    A1 -->|10K reqs/sec| B3\n    B3 -->|1M reqs/sec| C3",
      "line_count": 23,
      "node_count": 7,
      "complexity": "low",
      "category": "pattern-template-v2.md"
    },
    {
      "id": "pattern-template-v2-4-3095fd4b",
      "file": "pattern-template-v2.md",
      "index": 4,
      "type": "graph",
      "content": "graph LR\n    A[Legacy System] -->|Step 1| B[Hybrid State]\n    B -->|Step 2| C[Partial Migration]\n    C -->|Step 3| D[Full Pattern]\n    \n    style A fill:#ffb74d,stroke:#f57c00\n    style D fill:#81c784,stroke:#388e3c",
      "line_count": 7,
      "node_count": 4,
      "complexity": "low",
      "category": "pattern-template-v2.md"
    },
    {
      "id": "pattern-template-v2-5-3bc9a8e2",
      "file": "pattern-template-v2.md",
      "index": 5,
      "type": "graph",
      "content": "graph TD\n    A[Need to solve X?] --> B{Scale?}\n    B -->|< 10K ops/sec| C[Simple Implementation]\n    B -->|10K-1M ops/sec| D[Standard Pattern]\n    B -->|> 1M ops/sec| E[Advanced Pattern]\n    \n    C --> F[Use Basic Config]\n    D --> G[Use Full Pattern]\n    E --> H[Use Optimized Version]\n    \n    classDef recommended fill:#81c784,stroke:#388e3c,stroke-width:2px\n    classDef caution fill:#ffb74d,stroke:#f57c00,stroke-width:2px\n    \n    class G recommended\n    class H caution",
      "line_count": 15,
      "node_count": 7,
      "complexity": "low",
      "category": "pattern-template-v2.md"
    },
    {
      "id": "pattern-synthesis-guide-0-64faf133",
      "file": "pattern-synthesis-guide.md",
      "index": 0,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "pattern-synthesis-guide.md"
    },
    {
      "id": "pattern-synthesis-guide-1-b3910eea",
      "file": "pattern-synthesis-guide.md",
      "index": 1,
      "type": "graph",
      "content": "graph LR\n    CB[Circuit Breaker] <--> R[Retry]\n    R <--> T[Timeout]\n    T <--> CB\n    \n    CB -.->|wraps| R\n    R -.->|triggers| T\n    T -.->|opens| CB",
      "line_count": 8,
      "node_count": 3,
      "complexity": "low",
      "category": "pattern-synthesis-guide.md"
    },
    {
      "id": "pattern-synthesis-guide-2-3f65a9ab",
      "file": "pattern-synthesis-guide.md",
      "index": 2,
      "type": "graph",
      "content": "graph TD\n    AG[API Gateway] --> SM[Service Mesh]\n    SM --> SD[Service Discovery]\n    SD --> LB[Load Balancer]\n    LB --> HC[Health Check]\n    \n    AG -.->|uses| CB[Circuit Breaker]\n    SM -.->|implements| CB\n    LB -.->|requires| HC",
      "line_count": 9,
      "node_count": 6,
      "complexity": "low",
      "category": "pattern-synthesis-guide.md"
    },
    {
      "id": "pattern-synthesis-guide-3-975753d5",
      "file": "pattern-synthesis-guide.md",
      "index": 3,
      "type": "graph",
      "content": "graph LR\n    ES[Event Sourcing] --> CQRS[CQRS]\n    CQRS --> S[Saga]\n    S --> MQ[Message Queue]\n    MQ --> CDC[CDC]\n    \n    ES -.->|enables| Audit[Audit Trail]\n    CQRS -.->|optimizes| Read[Read Models]\n    S -.->|coordinates| Trans[Transactions]",
      "line_count": 9,
      "node_count": 8,
      "complexity": "low",
      "category": "pattern-synthesis-guide.md"
    },
    {
      "id": "pattern-synthesis-guide-4-a3d64291",
      "file": "pattern-synthesis-guide.md",
      "index": 4,
      "type": "graph",
      "content": "graph LR\n    Start([Start]) --> LB[Load Balancer]\n    LB --> HC[Health Check]\n    HC --> R[Retry]\n    R --> CB[Circuit Breaker]\n    CB --> C[Caching]\n    C --> End([Basic Reliability])\n    \n    style Start fill:#4caf50\n    style End fill:#2196f3",
      "line_count": 10,
      "node_count": 5,
      "complexity": "low",
      "category": "pattern-synthesis-guide.md"
    },
    {
      "id": "pattern-synthesis-guide-5-22933b27",
      "file": "pattern-synthesis-guide.md",
      "index": 5,
      "type": "graph",
      "content": "graph LR\n    Start([Reliable Service]) --> AS[Auto-scaling]\n    AS --> S[Sharding]\n    S --> MQ[Message Queue]\n    MQ --> ES[Event Streaming]\n    ES --> CDN[CDN]\n    CDN --> End([Scale Ready])\n    \n    style Start fill:#2196f3\n    style End fill:#ff9800",
      "line_count": 10,
      "node_count": 5,
      "complexity": "low",
      "category": "pattern-synthesis-guide.md"
    },
    {
      "id": "pattern-synthesis-guide-6-0b77faff",
      "file": "pattern-synthesis-guide.md",
      "index": 6,
      "type": "graph",
      "content": "graph LR\n    Start([Scale Ready]) --> MS[Microservices]\n    MS --> CQRS[CQRS]\n    CQRS --> Saga[Saga]\n    Saga --> SM[Service Mesh]\n    SM --> ES[Event Sourcing]\n    ES --> End([Architect Level])\n    \n    style Start fill:#ff9800\n    style End fill:#9c27b0",
      "line_count": 10,
      "node_count": 5,
      "complexity": "low",
      "category": "pattern-synthesis-guide.md"
    },
    {
      "id": "pattern-synthesis-guide-7-3b31a448",
      "file": "pattern-synthesis-guide.md",
      "index": 7,
      "type": "graph",
      "content": "graph LR\n    A[Component A] --> B[Component B]\n    B --> C[Component C]",
      "line_count": 3,
      "node_count": 3,
      "complexity": "low",
      "category": "pattern-synthesis-guide.md"
    },
    {
      "id": "pattern-synthesis-guide-8-0adfd738",
      "file": "pattern-synthesis-guide.md",
      "index": 8,
      "type": "graph",
      "content": "graph TB\n    subgraph \"Component 1\"\n        Input[Input Handler]\n        Process[Core Processor]\n        Output[Output Handler]\n        \n        Input --> Process\n        Process --> Output\n    end\n    \n    subgraph \"Dependencies\"\n        Cache[(Cache)]\n        Queue[Message Queue]\n        Store[(Data Store)]\n    end\n    \n    Process --> Cache\n    Process --> Queue\n    Process --> Store\n    \n    style Input fill:#e3f2fd\n    style Process fill:#f3e5f5\n    style Output fill:#e8f5e9",
      "line_count": 23,
      "node_count": 6,
      "complexity": "low",
      "category": "pattern-synthesis-guide.md"
    },
    {
      "id": "pattern-synthesis-guide-9-7b417836",
      "file": "pattern-synthesis-guide.md",
      "index": 9,
      "type": "graph",
      "content": "graph TB\n    subgraph \"Component 15\"\n        Input[Input Handler]\n        Process[Core Processor]\n        Output[Output Handler]\n        \n        Input --> Process\n        Process --> Output\n    end\n    \n    subgraph \"Dependencies\"\n        Cache[(Cache)]\n        Queue[Message Queue]\n        Store[(Data Store)]\n    end\n    \n    Process --> Cache\n    Process --> Queue\n    Process --> Store\n    \n    style Input fill:#e3f2fd\n    style Process fill:#f3e5f5\n    style Output fill:#e8f5e9",
      "line_count": 23,
      "node_count": 6,
      "complexity": "low",
      "category": "pattern-synthesis-guide.md"
    },
    {
      "id": "pattern-synthesis-guide-10-66d25c5d",
      "file": "pattern-synthesis-guide.md",
      "index": 10,
      "type": "graph",
      "content": "graph TB\n    subgraph \"Component 16\"\n        Input[Input Handler]\n        Process[Core Processor]\n        Output[Output Handler]\n        \n        Input --> Process\n        Process --> Output\n    end\n    \n    subgraph \"Dependencies\"\n        Cache[(Cache)]\n        Queue[Message Queue]\n        Store[(Data Store)]\n    end\n    \n    Process --> Cache\n    Process --> Queue\n    Process --> Store\n    \n    style Input fill:#e3f2fd\n    style Process fill:#f3e5f5\n    style Output fill:#e8f5e9",
      "line_count": 23,
      "node_count": 6,
      "complexity": "low",
      "category": "pattern-synthesis-guide.md"
    },
    {
      "id": "pattern-synthesis-guide-11-0ffc3a64",
      "file": "pattern-synthesis-guide.md",
      "index": 11,
      "type": "graph",
      "content": "graph TB\n    subgraph \"Component 17\"\n        Input[Input Handler]\n        Process[Core Processor]\n        Output[Output Handler]\n        \n        Input --> Process\n        Process --> Output\n    end\n    \n    subgraph \"Dependencies\"\n        Cache[(Cache)]\n        Queue[Message Queue]\n        Store[(Data Store)]\n    end\n    \n    Process --> Cache\n    Process --> Queue\n    Process --> Store\n    \n    style Input fill:#e3f2fd\n    style Process fill:#f3e5f5\n    style Output fill:#e8f5e9",
      "line_count": 23,
      "node_count": 6,
      "complexity": "low",
      "category": "pattern-synthesis-guide.md"
    },
    {
      "id": "pattern-synthesis-guide-12-0a2d9034",
      "file": "pattern-synthesis-guide.md",
      "index": 12,
      "type": "graph",
      "content": "graph TB\n    subgraph \"Component 18\"\n        Input[Input Handler]\n        Process[Core Processor]\n        Output[Output Handler]\n        \n        Input --> Process\n        Process --> Output\n    end\n    \n    subgraph \"Dependencies\"\n        Cache[(Cache)]\n        Queue[Message Queue]\n        Store[(Data Store)]\n    end\n    \n    Process --> Cache\n    Process --> Queue\n    Process --> Store\n    \n    style Input fill:#e3f2fd\n    style Process fill:#f3e5f5\n    style Output fill:#e8f5e9",
      "line_count": 23,
      "node_count": 6,
      "complexity": "low",
      "category": "pattern-synthesis-guide.md"
    },
    {
      "id": "pattern-synthesis-guide-13-1c7b9efd",
      "file": "pattern-synthesis-guide.md",
      "index": 13,
      "type": "graph",
      "content": "graph TB\n    subgraph \"Component 20\"\n        Input[Input Handler]\n        Process[Core Processor]\n        Output[Output Handler]\n        \n        Input --> Process\n        Process --> Output\n    end\n    \n    subgraph \"Dependencies\"\n        Cache[(Cache)]\n        Queue[Message Queue]\n        Store[(Data Store)]\n    end\n    \n    Process --> Cache\n    Process --> Queue\n    Process --> Store\n    \n    style Input fill:#e3f2fd\n    style Process fill:#f3e5f5\n    style Output fill:#e8f5e9",
      "line_count": 23,
      "node_count": 6,
      "complexity": "low",
      "category": "pattern-synthesis-guide.md"
    },
    {
      "id": "visual-asset-creation-plan-0-3b31a448",
      "file": "visual-asset-creation-plan.md",
      "index": 0,
      "type": "graph",
      "content": "graph LR\n    A[Component A] --> B[Component B]\n    B --> C[Component C]",
      "line_count": 3,
      "node_count": 3,
      "complexity": "low",
      "category": "visual-asset-creation-plan.md"
    },
    {
      "id": "visual-asset-creation-plan-1-c6a48579",
      "file": "visual-asset-creation-plan.md",
      "index": 1,
      "type": "graph",
      "content": "graph TB\n    subgraph \"Component 0\"\n        Input[Input Handler]\n        Process[Core Processor]\n        Output[Output Handler]\n        \n        Input --> Process\n        Process --> Output\n    end\n    \n    subgraph \"Dependencies\"\n        Cache[(Cache)]\n        Queue[Message Queue]\n        Store[(Data Store)]\n    end\n    \n    Process --> Cache\n    Process --> Queue\n    Process --> Store\n    \n    style Input fill:#e3f2fd\n    style Process fill:#f3e5f5\n    style Output fill:#e8f5e9",
      "line_count": 23,
      "node_count": 6,
      "complexity": "low",
      "category": "visual-asset-creation-plan.md"
    },
    {
      "id": "visual-asset-creation-plan-2-0adfd738",
      "file": "visual-asset-creation-plan.md",
      "index": 2,
      "type": "graph",
      "content": "graph TB\n    subgraph \"Component 1\"\n        Input[Input Handler]\n        Process[Core Processor]\n        Output[Output Handler]\n        \n        Input --> Process\n        Process --> Output\n    end\n    \n    subgraph \"Dependencies\"\n        Cache[(Cache)]\n        Queue[Message Queue]\n        Store[(Data Store)]\n    end\n    \n    Process --> Cache\n    Process --> Queue\n    Process --> Store\n    \n    style Input fill:#e3f2fd\n    style Process fill:#f3e5f5\n    style Output fill:#e8f5e9",
      "line_count": 23,
      "node_count": 6,
      "complexity": "low",
      "category": "visual-asset-creation-plan.md"
    },
    {
      "id": "visual-asset-creation-plan-3-8f766fa8",
      "file": "visual-asset-creation-plan.md",
      "index": 3,
      "type": "graph",
      "content": "graph TB\n    subgraph \"Component 3\"\n        Input[Input Handler]\n        Process[Core Processor]\n        Output[Output Handler]\n        \n        Input --> Process\n        Process --> Output\n    end\n    \n    subgraph \"Dependencies\"\n        Cache[(Cache)]\n        Queue[Message Queue]\n        Store[(Data Store)]\n    end\n    \n    Process --> Cache\n    Process --> Queue\n    Process --> Store\n    \n    style Input fill:#e3f2fd\n    style Process fill:#f3e5f5\n    style Output fill:#e8f5e9",
      "line_count": 23,
      "node_count": 6,
      "complexity": "low",
      "category": "visual-asset-creation-plan.md"
    },
    {
      "id": "visual-asset-creation-plan-4-ccf7dc3a",
      "file": "visual-asset-creation-plan.md",
      "index": 4,
      "type": "graph",
      "content": "graph TB\n    subgraph \"Component 7\"\n        Input[Input Handler]\n        Process[Core Processor]\n        Output[Output Handler]\n        \n        Input --> Process\n        Process --> Output\n    end\n    \n    subgraph \"Dependencies\"\n        Cache[(Cache)]\n        Queue[Message Queue]\n        Store[(Data Store)]\n    end\n    \n    Process --> Cache\n    Process --> Queue\n    Process --> Store\n    \n    style Input fill:#e3f2fd\n    style Process fill:#f3e5f5\n    style Output fill:#e8f5e9",
      "line_count": 23,
      "node_count": 6,
      "complexity": "low",
      "category": "visual-asset-creation-plan.md"
    },
    {
      "id": "pattern-relationship-map-0-64faf133",
      "file": "pattern-relationship-map.md",
      "index": 0,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "pattern-relationship-map.md"
    },
    {
      "id": "pattern-relationship-map-1-64faf133",
      "file": "pattern-relationship-map.md",
      "index": 1,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "pattern-relationship-map.md"
    },
    {
      "id": "pattern-relationship-map-2-64faf133",
      "file": "pattern-relationship-map.md",
      "index": 2,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "pattern-relationship-map.md"
    },
    {
      "id": "pattern-relationship-map-3-64faf133",
      "file": "pattern-relationship-map.md",
      "index": 3,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "pattern-relationship-map.md"
    },
    {
      "id": "pattern-relationship-map-4-64faf133",
      "file": "pattern-relationship-map.md",
      "index": 4,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "pattern-relationship-map.md"
    },
    {
      "id": "pattern-relationship-map-5-64faf133",
      "file": "pattern-relationship-map.md",
      "index": 5,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "pattern-relationship-map.md"
    },
    {
      "id": "pattern-relationship-map-6-e6608a2e",
      "file": "pattern-relationship-map.md",
      "index": 6,
      "type": "graph",
      "content": "graph LR\n    subgraph \"Must Have Together\"\n        LB[Load Balancer] -->|requires| HC[Health Check]\n        SM[Service Mesh] -->|requires| SD[Service Discovery]\n        AS[Auto-scaling] -->|requires| Metrics[Metrics]\n        Saga -->|requires| Compensation[Compensation Logic]\n        CQRS -->|requires| ES[Event Store/Source]\n    end",
      "line_count": 8,
      "node_count": 8,
      "complexity": "low",
      "category": "pattern-relationship-map.md"
    },
    {
      "id": "pattern-relationship-map-7-0edc9659",
      "file": "pattern-relationship-map.md",
      "index": 7,
      "type": "graph",
      "content": "graph LR\n    subgraph \"Work Better Together\"\n        CB[Circuit Breaker] -.->|enhances| RT[Retry]\n        Cache -.->|supports| GD[Graceful Degradation]\n        ES[Event Sourcing] -.->|enables| TT[Time Travel]\n        CDC -.->|feeds| Search[Search Index]\n        AG[API Gateway] -.->|benefits from| RL[Rate Limiting]\n    end",
      "line_count": 8,
      "node_count": 8,
      "complexity": "low",
      "category": "pattern-relationship-map.md"
    },
    {
      "id": "pattern-relationship-map-8-dad85b68",
      "file": "pattern-relationship-map.md",
      "index": 8,
      "type": "graph",
      "content": "graph LR\n    Client --> LB[Load Balancer]\n    LB --> App[Monolith App]\n    App --> DB[(Database)]\n    App --> Cache[Cache]",
      "line_count": 5,
      "node_count": 4,
      "complexity": "low",
      "category": "pattern-relationship-map.md"
    },
    {
      "id": "pattern-relationship-map-9-3b31a448",
      "file": "pattern-relationship-map.md",
      "index": 9,
      "type": "graph",
      "content": "graph LR\n    A[Component A] --> B[Component B]\n    B --> C[Component C]",
      "line_count": 3,
      "node_count": 3,
      "complexity": "low",
      "category": "pattern-relationship-map.md"
    },
    {
      "id": "pattern-relationship-map-10-0adfd738",
      "file": "pattern-relationship-map.md",
      "index": 10,
      "type": "graph",
      "content": "graph TB\n    subgraph \"Component 1\"\n        Input[Input Handler]\n        Process[Core Processor]\n        Output[Output Handler]\n        \n        Input --> Process\n        Process --> Output\n    end\n    \n    subgraph \"Dependencies\"\n        Cache[(Cache)]\n        Queue[Message Queue]\n        Store[(Data Store)]\n    end\n    \n    Process --> Cache\n    Process --> Queue\n    Process --> Store\n    \n    style Input fill:#e3f2fd\n    style Process fill:#f3e5f5\n    style Output fill:#e8f5e9",
      "line_count": 23,
      "node_count": 6,
      "complexity": "low",
      "category": "pattern-relationship-map.md"
    },
    {
      "id": "pattern-relationship-map-11-8f766fa8",
      "file": "pattern-relationship-map.md",
      "index": 11,
      "type": "graph",
      "content": "graph TB\n    subgraph \"Component 3\"\n        Input[Input Handler]\n        Process[Core Processor]\n        Output[Output Handler]\n        \n        Input --> Process\n        Process --> Output\n    end\n    \n    subgraph \"Dependencies\"\n        Cache[(Cache)]\n        Queue[Message Queue]\n        Store[(Data Store)]\n    end\n    \n    Process --> Cache\n    Process --> Queue\n    Process --> Store\n    \n    style Input fill:#e3f2fd\n    style Process fill:#f3e5f5\n    style Output fill:#e8f5e9",
      "line_count": 23,
      "node_count": 6,
      "complexity": "low",
      "category": "pattern-relationship-map.md"
    },
    {
      "id": "pattern-relationship-map-12-4d0fb947",
      "file": "pattern-relationship-map.md",
      "index": 12,
      "type": "graph",
      "content": "graph TB\n    subgraph \"Component 5\"\n        Input[Input Handler]\n        Process[Core Processor]\n        Output[Output Handler]\n        \n        Input --> Process\n        Process --> Output\n    end\n    \n    subgraph \"Dependencies\"\n        Cache[(Cache)]\n        Queue[Message Queue]\n        Store[(Data Store)]\n    end\n    \n    Process --> Cache\n    Process --> Queue\n    Process --> Store\n    \n    style Input fill:#e3f2fd\n    style Process fill:#f3e5f5\n    style Output fill:#e8f5e9",
      "line_count": 23,
      "node_count": 6,
      "complexity": "low",
      "category": "pattern-relationship-map.md"
    },
    {
      "id": "pattern-relationship-map-13-ccf7dc3a",
      "file": "pattern-relationship-map.md",
      "index": 13,
      "type": "graph",
      "content": "graph TB\n    subgraph \"Component 7\"\n        Input[Input Handler]\n        Process[Core Processor]\n        Output[Output Handler]\n        \n        Input --> Process\n        Process --> Output\n    end\n    \n    subgraph \"Dependencies\"\n        Cache[(Cache)]\n        Queue[Message Queue]\n        Store[(Data Store)]\n    end\n    \n    Process --> Cache\n    Process --> Queue\n    Process --> Store\n    \n    style Input fill:#e3f2fd\n    style Process fill:#f3e5f5\n    style Output fill:#e8f5e9",
      "line_count": 23,
      "node_count": 6,
      "complexity": "low",
      "category": "pattern-relationship-map.md"
    },
    {
      "id": "pattern-relationship-map-14-2e474738",
      "file": "pattern-relationship-map.md",
      "index": 14,
      "type": "graph",
      "content": "graph TB\n    subgraph \"Component 9\"\n        Input[Input Handler]\n        Process[Core Processor]\n        Output[Output Handler]\n        \n        Input --> Process\n        Process --> Output\n    end\n    \n    subgraph \"Dependencies\"\n        Cache[(Cache)]\n        Queue[Message Queue]\n        Store[(Data Store)]\n    end\n    \n    Process --> Cache\n    Process --> Queue\n    Process --> Store\n    \n    style Input fill:#e3f2fd\n    style Process fill:#f3e5f5\n    style Output fill:#e8f5e9",
      "line_count": 23,
      "node_count": 6,
      "complexity": "low",
      "category": "pattern-relationship-map.md"
    },
    {
      "id": "pattern-relationship-map-15-f8963a42",
      "file": "pattern-relationship-map.md",
      "index": 15,
      "type": "graph",
      "content": "graph TB\n    subgraph \"Component 10\"\n        Input[Input Handler]\n        Process[Core Processor]\n        Output[Output Handler]\n        \n        Input --> Process\n        Process --> Output\n    end\n    \n    subgraph \"Dependencies\"\n        Cache[(Cache)]\n        Queue[Message Queue]\n        Store[(Data Store)]\n    end\n    \n    Process --> Cache\n    Process --> Queue\n    Process --> Store\n    \n    style Input fill:#e3f2fd\n    style Process fill:#f3e5f5\n    style Output fill:#e8f5e9",
      "line_count": 23,
      "node_count": 6,
      "complexity": "low",
      "category": "pattern-relationship-map.md"
    },
    {
      "id": "pattern-relationship-map-16-266b0b02",
      "file": "pattern-relationship-map.md",
      "index": 16,
      "type": "graph",
      "content": "graph TB\n    subgraph \"Component 12\"\n        Input[Input Handler]\n        Process[Core Processor]\n        Output[Output Handler]\n        \n        Input --> Process\n        Process --> Output\n    end\n    \n    subgraph \"Dependencies\"\n        Cache[(Cache)]\n        Queue[Message Queue]\n        Store[(Data Store)]\n    end\n    \n    Process --> Cache\n    Process --> Queue\n    Process --> Store\n    \n    style Input fill:#e3f2fd\n    style Process fill:#f3e5f5\n    style Output fill:#e8f5e9",
      "line_count": 23,
      "node_count": 6,
      "complexity": "low",
      "category": "pattern-relationship-map.md"
    },
    {
      "id": "pattern-relationship-map-17-7b417836",
      "file": "pattern-relationship-map.md",
      "index": 17,
      "type": "graph",
      "content": "graph TB\n    subgraph \"Component 15\"\n        Input[Input Handler]\n        Process[Core Processor]\n        Output[Output Handler]\n        \n        Input --> Process\n        Process --> Output\n    end\n    \n    subgraph \"Dependencies\"\n        Cache[(Cache)]\n        Queue[Message Queue]\n        Store[(Data Store)]\n    end\n    \n    Process --> Cache\n    Process --> Queue\n    Process --> Store\n    \n    style Input fill:#e3f2fd\n    style Process fill:#f3e5f5\n    style Output fill:#e8f5e9",
      "line_count": 23,
      "node_count": 6,
      "complexity": "low",
      "category": "pattern-relationship-map.md"
    },
    {
      "id": "pattern-relationship-map-18-66d25c5d",
      "file": "pattern-relationship-map.md",
      "index": 18,
      "type": "graph",
      "content": "graph TB\n    subgraph \"Component 16\"\n        Input[Input Handler]\n        Process[Core Processor]\n        Output[Output Handler]\n        \n        Input --> Process\n        Process --> Output\n    end\n    \n    subgraph \"Dependencies\"\n        Cache[(Cache)]\n        Queue[Message Queue]\n        Store[(Data Store)]\n    end\n    \n    Process --> Cache\n    Process --> Queue\n    Process --> Store\n    \n    style Input fill:#e3f2fd\n    style Process fill:#f3e5f5\n    style Output fill:#e8f5e9",
      "line_count": 23,
      "node_count": 6,
      "complexity": "low",
      "category": "pattern-relationship-map.md"
    },
    {
      "id": "pattern-relationship-map-19-e686a241",
      "file": "pattern-relationship-map.md",
      "index": 19,
      "type": "graph",
      "content": "graph TB\n    subgraph \"Component 21\"\n        Input[Input Handler]\n        Process[Core Processor]\n        Output[Output Handler]\n        \n        Input --> Process\n        Process --> Output\n    end\n    \n    subgraph \"Dependencies\"\n        Cache[(Cache)]\n        Queue[Message Queue]\n        Store[(Data Store)]\n    end\n    \n    Process --> Cache\n    Process --> Queue\n    Process --> Store\n    \n    style Input fill:#e3f2fd\n    style Process fill:#f3e5f5\n    style Output fill:#e8f5e9",
      "line_count": 23,
      "node_count": 6,
      "complexity": "low",
      "category": "pattern-relationship-map.md"
    },
    {
      "id": "pattern-relationship-map-20-1628f73b",
      "file": "pattern-relationship-map.md",
      "index": 20,
      "type": "graph",
      "content": "graph TB\n    subgraph \"Component 22\"\n        Input[Input Handler]\n        Process[Core Processor]\n        Output[Output Handler]\n        \n        Input --> Process\n        Process --> Output\n    end\n    \n    subgraph \"Dependencies\"\n        Cache[(Cache)]\n        Queue[Message Queue]\n        Store[(Data Store)]\n    end\n    \n    Process --> Cache\n    Process --> Queue\n    Process --> Store\n    \n    style Input fill:#e3f2fd\n    style Process fill:#f3e5f5\n    style Output fill:#e8f5e9",
      "line_count": 23,
      "node_count": 6,
      "complexity": "low",
      "category": "pattern-relationship-map.md"
    },
    {
      "id": "pattern-relationship-map-21-a148091f",
      "file": "pattern-relationship-map.md",
      "index": 21,
      "type": "graph",
      "content": "graph TB\n    subgraph \"Component 24\"\n        Input[Input Handler]\n        Process[Core Processor]\n        Output[Output Handler]\n        \n        Input --> Process\n        Process --> Output\n    end\n    \n    subgraph \"Dependencies\"\n        Cache[(Cache)]\n        Queue[Message Queue]\n        Store[(Data Store)]\n    end\n    \n    Process --> Cache\n    Process --> Queue\n    Process --> Store\n    \n    style Input fill:#e3f2fd\n    style Process fill:#f3e5f5\n    style Output fill:#e8f5e9",
      "line_count": 23,
      "node_count": 6,
      "complexity": "low",
      "category": "pattern-relationship-map.md"
    },
    {
      "id": "pattern-migration-guides-0-f9b3f12e",
      "file": "pattern-migration-guides.md",
      "index": 0,
      "type": "sequence",
      "content": "sequenceDiagram\n    participant TC as Transaction Coordinator\n    participant S1 as Service 1\n    participant S2 as Service 2\n    participant S3 as Service 3\n    \n    TC->>S1: Prepare\n    TC->>S2: Prepare \n    TC->>S3: Prepare\n    Note over TC: All services ready?\n    TC->>S1: Commit/Abort\n    TC->>S2: Commit/Abort\n    TC->>S3: Commit/Abort",
      "line_count": 13,
      "node_count": 0,
      "complexity": "low",
      "category": "pattern-migration-guides.md"
    },
    {
      "id": "pattern-migration-guides-1-a1720bd2",
      "file": "pattern-migration-guides.md",
      "index": 1,
      "type": "unknown",
      "content": "classDiagram\n    class Component7 {\n        +process() void\n        +validate() bool\n        -state: State\n    }\n    class Handler7 {\n        +handle() Result\n        +configure() void\n    }\n    Component7 --> Handler7 : uses\n    \n    note for Component7 \"Core processing logic\"",
      "line_count": 13,
      "node_count": 0,
      "complexity": "low",
      "category": "pattern-migration-guides.md"
    },
    {
      "id": "pattern-migration-guides-2-70cd895f",
      "file": "pattern-migration-guides.md",
      "index": 2,
      "type": "unknown",
      "content": "classDiagram\n    class Component8 {\n        +process() void\n        +validate() bool\n        -state: State\n    }\n    class Handler8 {\n        +handle() Result\n        +configure() void\n    }\n    Component8 --> Handler8 : uses\n    \n    note for Component8 \"Core processing logic\"",
      "line_count": 13,
      "node_count": 0,
      "complexity": "low",
      "category": "pattern-migration-guides.md"
    },
    {
      "id": "pattern-migration-guides-3-37af930c",
      "file": "pattern-migration-guides.md",
      "index": 3,
      "type": "unknown",
      "content": "classDiagram\n    class Component9 {\n        +process() void\n        +validate() bool\n        -state: State\n    }\n    class Handler9 {\n        +handle() Result\n        +configure() void\n    }\n    Component9 --> Handler9 : uses\n    \n    note for Component9 \"Core processing logic\"",
      "line_count": 13,
      "node_count": 0,
      "complexity": "low",
      "category": "pattern-migration-guides.md"
    },
    {
      "id": "pattern-migration-guides-4-64faf133",
      "file": "pattern-migration-guides.md",
      "index": 4,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "pattern-migration-guides.md"
    },
    {
      "id": "pattern-migration-guides-5-64faf133",
      "file": "pattern-migration-guides.md",
      "index": 5,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "pattern-migration-guides.md"
    },
    {
      "id": "pattern-migration-guides-6-64faf133",
      "file": "pattern-migration-guides.md",
      "index": 6,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "pattern-migration-guides.md"
    },
    {
      "id": "pattern-migration-guides-7-3760de60",
      "file": "pattern-migration-guides.md",
      "index": 7,
      "type": "graph",
      "content": "graph LR\n    subgraph \"Time \u2192\"\n        L1[Legacy 100%]\n        L2[Legacy 75%<br/>New 25%]\n        L3[Legacy 50%<br/>New 50%]\n        L4[Legacy 25%<br/>New 75%]\n        L5[New 100%]\n        \n        L1 --> L2 --> L3 --> L4 --> L5\n    end",
      "line_count": 10,
      "node_count": 5,
      "complexity": "low",
      "category": "pattern-migration-guides.md"
    },
    {
      "id": "pattern-migration-guides-8-7af9eecf",
      "file": "pattern-migration-guides.md",
      "index": 8,
      "type": "unknown",
      "content": "classDiagram\n    class Component20 {\n        +process() void\n        +validate() bool\n        -state: State\n    }\n    class Handler20 {\n        +handle() Result\n        +configure() void\n    }\n    Component20 --> Handler20 : uses\n    \n    note for Component20 \"Core processing logic\"",
      "line_count": 13,
      "node_count": 0,
      "complexity": "low",
      "category": "pattern-migration-guides.md"
    },
    {
      "id": "pattern-migration-guides-9-d597c150",
      "file": "pattern-migration-guides.md",
      "index": 9,
      "type": "unknown",
      "content": "classDiagram\n    class Component21 {\n        +process() void\n        +validate() bool\n        -state: State\n    }\n    class Handler21 {\n        +handle() Result\n        +configure() void\n    }\n    Component21 --> Handler21 : uses\n    \n    note for Component21 \"Core processing logic\"",
      "line_count": 13,
      "node_count": 0,
      "complexity": "low",
      "category": "pattern-migration-guides.md"
    },
    {
      "id": "pattern-migration-guides-10-3b31a448",
      "file": "pattern-migration-guides.md",
      "index": 10,
      "type": "graph",
      "content": "graph LR\n    A[Component A] --> B[Component B]\n    B --> C[Component C]",
      "line_count": 3,
      "node_count": 3,
      "complexity": "low",
      "category": "pattern-migration-guides.md"
    },
    {
      "id": "pattern-decision-matrix-0-3b31a448",
      "file": "pattern-decision-matrix.md",
      "index": 0,
      "type": "graph",
      "content": "graph LR\n    A[Component A] --> B[Component B]\n    B --> C[Component C]",
      "line_count": 3,
      "node_count": 3,
      "complexity": "low",
      "category": "pattern-decision-matrix.md"
    },
    {
      "id": "pattern-decision-matrix-1-d69fcedc",
      "file": "pattern-decision-matrix.md",
      "index": 1,
      "type": "graph",
      "content": "graph TD\n    Start[Need This Pattern?] --> Q1{High Traffic?}\n    Q1 -->|Yes| Q2{Distributed System?}\n    Q1 -->|No| Simple[Use Simple Approach]\n    Q2 -->|Yes| Q3{Complex Coordination?}\n    Q2 -->|No| Basic[Use Basic Pattern]\n    Q3 -->|Yes| Advanced[Use This Pattern]\n    Q3 -->|No| Intermediate[Consider Alternatives]\n    \n    style Start fill:#f9f,stroke:#333,stroke-width:2px\n    style Advanced fill:#bfb,stroke:#333,stroke-width:2px\n    style Simple fill:#ffd,stroke:#333,stroke-width:2px",
      "line_count": 12,
      "node_count": 5,
      "complexity": "low",
      "category": "pattern-decision-matrix.md"
    },
    {
      "id": "pattern-combination-recipes-0-64faf133",
      "file": "pattern-combination-recipes.md",
      "index": 0,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "pattern-combination-recipes.md"
    },
    {
      "id": "pattern-combination-recipes-1-64faf133",
      "file": "pattern-combination-recipes.md",
      "index": 1,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "pattern-combination-recipes.md"
    },
    {
      "id": "pattern-combination-recipes-2-64faf133",
      "file": "pattern-combination-recipes.md",
      "index": 2,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "pattern-combination-recipes.md"
    },
    {
      "id": "pattern-combination-recipes-3-64faf133",
      "file": "pattern-combination-recipes.md",
      "index": 3,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "pattern-combination-recipes.md"
    },
    {
      "id": "pattern-combination-recipes-4-3b31a448",
      "file": "pattern-combination-recipes.md",
      "index": 4,
      "type": "graph",
      "content": "graph LR\n    A[Component A] --> B[Component B]\n    B --> C[Component C]",
      "line_count": 3,
      "node_count": 3,
      "complexity": "low",
      "category": "pattern-combination-recipes.md"
    },
    {
      "id": "pattern-combination-recipes-5-0adfd738",
      "file": "pattern-combination-recipes.md",
      "index": 5,
      "type": "graph",
      "content": "graph TB\n    subgraph \"Component 1\"\n        Input[Input Handler]\n        Process[Core Processor]\n        Output[Output Handler]\n        \n        Input --> Process\n        Process --> Output\n    end\n    \n    subgraph \"Dependencies\"\n        Cache[(Cache)]\n        Queue[Message Queue]\n        Store[(Data Store)]\n    end\n    \n    Process --> Cache\n    Process --> Queue\n    Process --> Store\n    \n    style Input fill:#e3f2fd\n    style Process fill:#f3e5f5\n    style Output fill:#e8f5e9",
      "line_count": 23,
      "node_count": 6,
      "complexity": "low",
      "category": "pattern-combination-recipes.md"
    },
    {
      "id": "pattern-combination-recipes-6-8f766fa8",
      "file": "pattern-combination-recipes.md",
      "index": 6,
      "type": "graph",
      "content": "graph TB\n    subgraph \"Component 3\"\n        Input[Input Handler]\n        Process[Core Processor]\n        Output[Output Handler]\n        \n        Input --> Process\n        Process --> Output\n    end\n    \n    subgraph \"Dependencies\"\n        Cache[(Cache)]\n        Queue[Message Queue]\n        Store[(Data Store)]\n    end\n    \n    Process --> Cache\n    Process --> Queue\n    Process --> Store\n    \n    style Input fill:#e3f2fd\n    style Process fill:#f3e5f5\n    style Output fill:#e8f5e9",
      "line_count": 23,
      "node_count": 6,
      "complexity": "low",
      "category": "pattern-combination-recipes.md"
    },
    {
      "id": "pattern-combination-recipes-7-4d0fb947",
      "file": "pattern-combination-recipes.md",
      "index": 7,
      "type": "graph",
      "content": "graph TB\n    subgraph \"Component 5\"\n        Input[Input Handler]\n        Process[Core Processor]\n        Output[Output Handler]\n        \n        Input --> Process\n        Process --> Output\n    end\n    \n    subgraph \"Dependencies\"\n        Cache[(Cache)]\n        Queue[Message Queue]\n        Store[(Data Store)]\n    end\n    \n    Process --> Cache\n    Process --> Queue\n    Process --> Store\n    \n    style Input fill:#e3f2fd\n    style Process fill:#f3e5f5\n    style Output fill:#e8f5e9",
      "line_count": 23,
      "node_count": 6,
      "complexity": "low",
      "category": "pattern-combination-recipes.md"
    },
    {
      "id": "pattern-combination-recipes-8-d7e34dd7",
      "file": "pattern-combination-recipes.md",
      "index": 8,
      "type": "graph",
      "content": "graph TB\n    subgraph \"Component 6\"\n        Input[Input Handler]\n        Process[Core Processor]\n        Output[Output Handler]\n        \n        Input --> Process\n        Process --> Output\n    end\n    \n    subgraph \"Dependencies\"\n        Cache[(Cache)]\n        Queue[Message Queue]\n        Store[(Data Store)]\n    end\n    \n    Process --> Cache\n    Process --> Queue\n    Process --> Store\n    \n    style Input fill:#e3f2fd\n    style Process fill:#f3e5f5\n    style Output fill:#e8f5e9",
      "line_count": 23,
      "node_count": 6,
      "complexity": "low",
      "category": "pattern-combination-recipes.md"
    },
    {
      "id": "pattern-combination-recipes-9-ccf7dc3a",
      "file": "pattern-combination-recipes.md",
      "index": 9,
      "type": "graph",
      "content": "graph TB\n    subgraph \"Component 7\"\n        Input[Input Handler]\n        Process[Core Processor]\n        Output[Output Handler]\n        \n        Input --> Process\n        Process --> Output\n    end\n    \n    subgraph \"Dependencies\"\n        Cache[(Cache)]\n        Queue[Message Queue]\n        Store[(Data Store)]\n    end\n    \n    Process --> Cache\n    Process --> Queue\n    Process --> Store\n    \n    style Input fill:#e3f2fd\n    style Process fill:#f3e5f5\n    style Output fill:#e8f5e9",
      "line_count": 23,
      "node_count": 6,
      "complexity": "low",
      "category": "pattern-combination-recipes.md"
    },
    {
      "id": "pattern-combination-recipes-10-fba0eeb1",
      "file": "pattern-combination-recipes.md",
      "index": 10,
      "type": "sequence",
      "content": "sequenceDiagram\n    participant Client\n    participant Service\n    participant Database\n    participant Cache\n    \n    Client->>Service: Request\n    Service->>Cache: Check cache\n    alt Cache hit\n        Cache-->>Service: Cached data\n    else Cache miss\n        Service->>Database: Query\n        Database-->>Service: Data\n        Service->>Cache: Update cache\n    end\n    Service-->>Client: Response",
      "line_count": 16,
      "node_count": 0,
      "complexity": "low",
      "category": "pattern-combination-recipes.md"
    },
    {
      "id": "pattern-combination-recipes-11-2e474738",
      "file": "pattern-combination-recipes.md",
      "index": 11,
      "type": "graph",
      "content": "graph TB\n    subgraph \"Component 9\"\n        Input[Input Handler]\n        Process[Core Processor]\n        Output[Output Handler]\n        \n        Input --> Process\n        Process --> Output\n    end\n    \n    subgraph \"Dependencies\"\n        Cache[(Cache)]\n        Queue[Message Queue]\n        Store[(Data Store)]\n    end\n    \n    Process --> Cache\n    Process --> Queue\n    Process --> Store\n    \n    style Input fill:#e3f2fd\n    style Process fill:#f3e5f5\n    style Output fill:#e8f5e9",
      "line_count": 23,
      "node_count": 6,
      "complexity": "low",
      "category": "pattern-combination-recipes.md"
    },
    {
      "id": "pattern-combination-recipes-12-f8963a42",
      "file": "pattern-combination-recipes.md",
      "index": 12,
      "type": "graph",
      "content": "graph TB\n    subgraph \"Component 10\"\n        Input[Input Handler]\n        Process[Core Processor]\n        Output[Output Handler]\n        \n        Input --> Process\n        Process --> Output\n    end\n    \n    subgraph \"Dependencies\"\n        Cache[(Cache)]\n        Queue[Message Queue]\n        Store[(Data Store)]\n    end\n    \n    Process --> Cache\n    Process --> Queue\n    Process --> Store\n    \n    style Input fill:#e3f2fd\n    style Process fill:#f3e5f5\n    style Output fill:#e8f5e9",
      "line_count": 23,
      "node_count": 6,
      "complexity": "low",
      "category": "pattern-combination-recipes.md"
    },
    {
      "id": "pattern-combination-recipes-13-a04a3dec",
      "file": "pattern-combination-recipes.md",
      "index": 13,
      "type": "graph",
      "content": "graph TB\n    subgraph \"Component 11\"\n        Input[Input Handler]\n        Process[Core Processor]\n        Output[Output Handler]\n        \n        Input --> Process\n        Process --> Output\n    end\n    \n    subgraph \"Dependencies\"\n        Cache[(Cache)]\n        Queue[Message Queue]\n        Store[(Data Store)]\n    end\n    \n    Process --> Cache\n    Process --> Queue\n    Process --> Store\n    \n    style Input fill:#e3f2fd\n    style Process fill:#f3e5f5\n    style Output fill:#e8f5e9",
      "line_count": 23,
      "node_count": 6,
      "complexity": "low",
      "category": "pattern-combination-recipes.md"
    },
    {
      "id": "pattern-combination-recipes-14-266b0b02",
      "file": "pattern-combination-recipes.md",
      "index": 14,
      "type": "graph",
      "content": "graph TB\n    subgraph \"Component 12\"\n        Input[Input Handler]\n        Process[Core Processor]\n        Output[Output Handler]\n        \n        Input --> Process\n        Process --> Output\n    end\n    \n    subgraph \"Dependencies\"\n        Cache[(Cache)]\n        Queue[Message Queue]\n        Store[(Data Store)]\n    end\n    \n    Process --> Cache\n    Process --> Queue\n    Process --> Store\n    \n    style Input fill:#e3f2fd\n    style Process fill:#f3e5f5\n    style Output fill:#e8f5e9",
      "line_count": 23,
      "node_count": 6,
      "complexity": "low",
      "category": "pattern-combination-recipes.md"
    },
    {
      "id": "pattern-combination-recipes-15-66d25c5d",
      "file": "pattern-combination-recipes.md",
      "index": 15,
      "type": "graph",
      "content": "graph TB\n    subgraph \"Component 16\"\n        Input[Input Handler]\n        Process[Core Processor]\n        Output[Output Handler]\n        \n        Input --> Process\n        Process --> Output\n    end\n    \n    subgraph \"Dependencies\"\n        Cache[(Cache)]\n        Queue[Message Queue]\n        Store[(Data Store)]\n    end\n    \n    Process --> Cache\n    Process --> Queue\n    Process --> Store\n    \n    style Input fill:#e3f2fd\n    style Process fill:#f3e5f5\n    style Output fill:#e8f5e9",
      "line_count": 23,
      "node_count": 6,
      "complexity": "low",
      "category": "pattern-combination-recipes.md"
    },
    {
      "id": "pattern-combination-recipes-16-0a2d9034",
      "file": "pattern-combination-recipes.md",
      "index": 16,
      "type": "graph",
      "content": "graph TB\n    subgraph \"Component 18\"\n        Input[Input Handler]\n        Process[Core Processor]\n        Output[Output Handler]\n        \n        Input --> Process\n        Process --> Output\n    end\n    \n    subgraph \"Dependencies\"\n        Cache[(Cache)]\n        Queue[Message Queue]\n        Store[(Data Store)]\n    end\n    \n    Process --> Cache\n    Process --> Queue\n    Process --> Store\n    \n    style Input fill:#e3f2fd\n    style Process fill:#f3e5f5\n    style Output fill:#e8f5e9",
      "line_count": 23,
      "node_count": 6,
      "complexity": "low",
      "category": "pattern-combination-recipes.md"
    },
    {
      "id": "pattern-implementation-roadmap-0-64faf133",
      "file": "pattern-implementation-roadmap.md",
      "index": 0,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "pattern-implementation-roadmap.md"
    },
    {
      "id": "pattern-implementation-roadmap-1-64faf133",
      "file": "pattern-implementation-roadmap.md",
      "index": 1,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "pattern-implementation-roadmap.md"
    },
    {
      "id": "pattern-implementation-roadmap-2-3b31a448",
      "file": "pattern-implementation-roadmap.md",
      "index": 2,
      "type": "graph",
      "content": "graph LR\n    A[Component A] --> B[Component B]\n    B --> C[Component C]",
      "line_count": 3,
      "node_count": 3,
      "complexity": "low",
      "category": "pattern-implementation-roadmap.md"
    },
    {
      "id": "pattern-implementation-roadmap-3-0adfd738",
      "file": "pattern-implementation-roadmap.md",
      "index": 3,
      "type": "graph",
      "content": "graph TB\n    subgraph \"Component 1\"\n        Input[Input Handler]\n        Process[Core Processor]\n        Output[Output Handler]\n        \n        Input --> Process\n        Process --> Output\n    end\n    \n    subgraph \"Dependencies\"\n        Cache[(Cache)]\n        Queue[Message Queue]\n        Store[(Data Store)]\n    end\n    \n    Process --> Cache\n    Process --> Queue\n    Process --> Store\n    \n    style Input fill:#e3f2fd\n    style Process fill:#f3e5f5\n    style Output fill:#e8f5e9",
      "line_count": 23,
      "node_count": 6,
      "complexity": "low",
      "category": "pattern-implementation-roadmap.md"
    },
    {
      "id": "pattern-implementation-roadmap-4-3361824c",
      "file": "pattern-implementation-roadmap.md",
      "index": 4,
      "type": "graph",
      "content": "graph TB\n    subgraph \"Component 2\"\n        Input[Input Handler]\n        Process[Core Processor]\n        Output[Output Handler]\n        \n        Input --> Process\n        Process --> Output\n    end\n    \n    subgraph \"Dependencies\"\n        Cache[(Cache)]\n        Queue[Message Queue]\n        Store[(Data Store)]\n    end\n    \n    Process --> Cache\n    Process --> Queue\n    Process --> Store\n    \n    style Input fill:#e3f2fd\n    style Process fill:#f3e5f5\n    style Output fill:#e8f5e9",
      "line_count": 23,
      "node_count": 6,
      "complexity": "low",
      "category": "pattern-implementation-roadmap.md"
    },
    {
      "id": "pattern-implementation-roadmap-5-8f766fa8",
      "file": "pattern-implementation-roadmap.md",
      "index": 5,
      "type": "graph",
      "content": "graph TB\n    subgraph \"Component 3\"\n        Input[Input Handler]\n        Process[Core Processor]\n        Output[Output Handler]\n        \n        Input --> Process\n        Process --> Output\n    end\n    \n    subgraph \"Dependencies\"\n        Cache[(Cache)]\n        Queue[Message Queue]\n        Store[(Data Store)]\n    end\n    \n    Process --> Cache\n    Process --> Queue\n    Process --> Store\n    \n    style Input fill:#e3f2fd\n    style Process fill:#f3e5f5\n    style Output fill:#e8f5e9",
      "line_count": 23,
      "node_count": 6,
      "complexity": "low",
      "category": "pattern-implementation-roadmap.md"
    },
    {
      "id": "pattern-implementation-roadmap-6-96742724",
      "file": "pattern-implementation-roadmap.md",
      "index": 6,
      "type": "graph",
      "content": "graph TB\n    subgraph \"Component 4\"\n        Input[Input Handler]\n        Process[Core Processor]\n        Output[Output Handler]\n        \n        Input --> Process\n        Process --> Output\n    end\n    \n    subgraph \"Dependencies\"\n        Cache[(Cache)]\n        Queue[Message Queue]\n        Store[(Data Store)]\n    end\n    \n    Process --> Cache\n    Process --> Queue\n    Process --> Store\n    \n    style Input fill:#e3f2fd\n    style Process fill:#f3e5f5\n    style Output fill:#e8f5e9",
      "line_count": 23,
      "node_count": 6,
      "complexity": "low",
      "category": "pattern-implementation-roadmap.md"
    },
    {
      "id": "pattern-implementation-roadmap-7-d7e34dd7",
      "file": "pattern-implementation-roadmap.md",
      "index": 7,
      "type": "graph",
      "content": "graph TB\n    subgraph \"Component 6\"\n        Input[Input Handler]\n        Process[Core Processor]\n        Output[Output Handler]\n        \n        Input --> Process\n        Process --> Output\n    end\n    \n    subgraph \"Dependencies\"\n        Cache[(Cache)]\n        Queue[Message Queue]\n        Store[(Data Store)]\n    end\n    \n    Process --> Cache\n    Process --> Queue\n    Process --> Store\n    \n    style Input fill:#e3f2fd\n    style Process fill:#f3e5f5\n    style Output fill:#e8f5e9",
      "line_count": 23,
      "node_count": 6,
      "complexity": "low",
      "category": "pattern-implementation-roadmap.md"
    },
    {
      "id": "pattern-implementation-roadmap-8-ccf7dc3a",
      "file": "pattern-implementation-roadmap.md",
      "index": 8,
      "type": "graph",
      "content": "graph TB\n    subgraph \"Component 7\"\n        Input[Input Handler]\n        Process[Core Processor]\n        Output[Output Handler]\n        \n        Input --> Process\n        Process --> Output\n    end\n    \n    subgraph \"Dependencies\"\n        Cache[(Cache)]\n        Queue[Message Queue]\n        Store[(Data Store)]\n    end\n    \n    Process --> Cache\n    Process --> Queue\n    Process --> Store\n    \n    style Input fill:#e3f2fd\n    style Process fill:#f3e5f5\n    style Output fill:#e8f5e9",
      "line_count": 23,
      "node_count": 6,
      "complexity": "low",
      "category": "pattern-implementation-roadmap.md"
    },
    {
      "id": "pattern-implementation-roadmap-9-b1cb8872",
      "file": "pattern-implementation-roadmap.md",
      "index": 9,
      "type": "graph",
      "content": "graph TB\n    subgraph \"Component 13\"\n        Input[Input Handler]\n        Process[Core Processor]\n        Output[Output Handler]\n        \n        Input --> Process\n        Process --> Output\n    end\n    \n    subgraph \"Dependencies\"\n        Cache[(Cache)]\n        Queue[Message Queue]\n        Store[(Data Store)]\n    end\n    \n    Process --> Cache\n    Process --> Queue\n    Process --> Store\n    \n    style Input fill:#e3f2fd\n    style Process fill:#f3e5f5\n    style Output fill:#e8f5e9",
      "line_count": 23,
      "node_count": 6,
      "complexity": "low",
      "category": "pattern-implementation-roadmap.md"
    },
    {
      "id": "anti-corruption-layer-0-64faf133",
      "file": "architecture/anti-corruption-layer.md",
      "index": 0,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "architecture"
    },
    {
      "id": "anti-corruption-layer-1-64faf133",
      "file": "architecture/anti-corruption-layer.md",
      "index": 1,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "architecture"
    },
    {
      "id": "anti-corruption-layer-2-64faf133",
      "file": "architecture/anti-corruption-layer.md",
      "index": 2,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "architecture"
    },
    {
      "id": "anti-corruption-layer-3-64faf133",
      "file": "architecture/anti-corruption-layer.md",
      "index": 3,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "architecture"
    },
    {
      "id": "anti-corruption-layer-4-64faf133",
      "file": "architecture/anti-corruption-layer.md",
      "index": 4,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "architecture"
    },
    {
      "id": "anti-corruption-layer-5-64faf133",
      "file": "architecture/anti-corruption-layer.md",
      "index": 5,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "architecture"
    },
    {
      "id": "anti-corruption-layer-6-64faf133",
      "file": "architecture/anti-corruption-layer.md",
      "index": 6,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "architecture"
    },
    {
      "id": "anti-corruption-layer-7-64faf133",
      "file": "architecture/anti-corruption-layer.md",
      "index": 7,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "architecture"
    },
    {
      "id": "anti-corruption-layer-8-64faf133",
      "file": "architecture/anti-corruption-layer.md",
      "index": 8,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "architecture"
    },
    {
      "id": "anti-corruption-layer-9-64faf133",
      "file": "architecture/anti-corruption-layer.md",
      "index": 9,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "architecture"
    },
    {
      "id": "choreography-0-8208cc03",
      "file": "architecture/choreography.md",
      "index": 0,
      "type": "graph",
      "content": "graph LR\n    subgraph \"Choreography Flow\"\n        A[\"\ud83c\udfaa Order Service<br/>Creates order\"] --> B[\"\ud83d\udce6 Inventory Service<br/>Reserves items\"]\n        B --> C[\"\ud83d\udcb3 Payment Service<br/>Processes payment\"]\n        C --> D[\"\ud83d\ude9a Shipping Service<br/>Ships order\"]\n    end\n    \n    style A fill:#81c784,stroke:#388e3c\n    style D fill:#64b5f6,stroke:#1976d2",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "architecture"
    },
    {
      "id": "choreography-1-9070693d",
      "file": "architecture/choreography.md",
      "index": 1,
      "type": "graph",
      "content": "graph LR\n    A[\"Monolithic Workflows<br/>(Centralized Processing)\"] -->|\"Step 1\"| B[\"Event-Driven Services<br/>(Choreography)\"]\n    B -->|\"Step 2\"| C[\"Event Streaming<br/>(Kafka + Schema Registry)\"]\n    C -->|\"Step 3\"| D[\"Workflow Orchestration<br/>(Temporal/Zeebe)\"]\n    \n    style A fill:#ffb74d,stroke:#f57c00\n    style D fill:#81c784,stroke:#388e3c",
      "line_count": 7,
      "node_count": 4,
      "complexity": "low",
      "category": "architecture"
    },
    {
      "id": "kappa-architecture-0-3b31a448",
      "file": "architecture/kappa-architecture.md",
      "index": 0,
      "type": "graph",
      "content": "graph LR\n    A[Component A] --> B[Component B]\n    B --> C[Component C]",
      "line_count": 3,
      "node_count": 3,
      "complexity": "low",
      "category": "architecture"
    },
    {
      "id": "kappa-architecture-1-d69fcedc",
      "file": "architecture/kappa-architecture.md",
      "index": 1,
      "type": "graph",
      "content": "graph TD\n    Start[Need This Pattern?] --> Q1{High Traffic?}\n    Q1 -->|Yes| Q2{Distributed System?}\n    Q1 -->|No| Simple[Use Simple Approach]\n    Q2 -->|Yes| Q3{Complex Coordination?}\n    Q2 -->|No| Basic[Use Basic Pattern]\n    Q3 -->|Yes| Advanced[Use This Pattern]\n    Q3 -->|No| Intermediate[Consider Alternatives]\n    \n    style Start fill:#f9f,stroke:#333,stroke-width:2px\n    style Advanced fill:#bfb,stroke:#333,stroke-width:2px\n    style Simple fill:#ffd,stroke:#333,stroke-width:2px",
      "line_count": 12,
      "node_count": 5,
      "complexity": "low",
      "category": "architecture"
    },
    {
      "id": "cell-based-0-3b31a448",
      "file": "architecture/cell-based.md",
      "index": 0,
      "type": "graph",
      "content": "graph LR\n    A[Component A] --> B[Component B]\n    B --> C[Component C]",
      "line_count": 3,
      "node_count": 3,
      "complexity": "low",
      "category": "architecture"
    },
    {
      "id": "cell-based-1-64faf133",
      "file": "architecture/cell-based.md",
      "index": 1,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "architecture"
    },
    {
      "id": "cell-based-2-64faf133",
      "file": "architecture/cell-based.md",
      "index": 2,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "architecture"
    },
    {
      "id": "cell-based-3-64faf133",
      "file": "architecture/cell-based.md",
      "index": 3,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "architecture"
    },
    {
      "id": "cell-based-4-64faf133",
      "file": "architecture/cell-based.md",
      "index": 4,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "architecture"
    },
    {
      "id": "cap-theorem-0-64faf133",
      "file": "architecture/cap-theorem.md",
      "index": 0,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "architecture"
    },
    {
      "id": "cap-theorem-1-64faf133",
      "file": "architecture/cap-theorem.md",
      "index": 1,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "architecture"
    },
    {
      "id": "cap-theorem-2-64faf133",
      "file": "architecture/cap-theorem.md",
      "index": 2,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "architecture"
    },
    {
      "id": "event-driven-0-19a895b4",
      "file": "architecture/event-driven.md",
      "index": 0,
      "type": "graph",
      "content": "graph LR\n    subgraph \"Traditional Coupling\"\n        A1[Order Service] -->|HTTP Call| B1[Inventory]\n        A1 -->|HTTP Call| C1[Payment]\n        A1 -->|HTTP Call| D1[Email]\n    end\n    \n    subgraph \"Event-Driven Decoupling\"\n        A2[Order Service] -->|Order Placed Event| E[Event Bus]\n        E --> B2[Inventory]\n        E --> C2[Payment]\n        E --> D2[Email]\n        E --> F[Analytics]\n    end\n    \n    classDef service fill:#e1f5fe,stroke:#0277bd,stroke-width:2px\n    classDef event fill:#f3e5f5,stroke:#7b1fa2,stroke-width:2px\n    \n    class A1,B1,C1,D1,A2,B2,C2,D2,F service\n    class E event",
      "line_count": 20,
      "node_count": 10,
      "complexity": "low",
      "category": "architecture"
    },
    {
      "id": "event-driven-1-879a606e",
      "file": "architecture/event-driven.md",
      "index": 1,
      "type": "graph",
      "content": "graph TD\n    subgraph \"Command Side (Write)\"\n        CMD[Commands] --> AGG[Aggregates]\n        AGG --> ES[Event Store]\n        ES --> EVT[Events Published]\n    end\n    \n    subgraph \"Query Side (Read)\"\n        EVT --> PROJ[Projections]\n        PROJ --> RM1[Read Model 1]\n        PROJ --> RM2[Read Model 2]\n        PROJ --> RM3[Read Model N]\n    end\n    \n    subgraph \"Event Processing\"\n        EVT --> CEP[Complex Event Processing]\n        CEP --> ALERTS[Alerts]\n        CEP --> ANALYTICS[Analytics]\n    end\n    \n    classDef command fill:#ffecb3,stroke:#f57c00,stroke-width:2px\n    classDef event fill:#e8f5e8,stroke:#388e3c,stroke-width:2px\n    classDef query fill:#e3f2fd,stroke:#1976d2,stroke-width:2px\n    \n    class CMD,AGG command\n    class ES,EVT,CEP event\n    class PROJ,RM1,RM2,RM3,ALERTS,ANALYTICS query",
      "line_count": 27,
      "node_count": 11,
      "complexity": "low",
      "category": "architecture"
    },
    {
      "id": "event-driven-2-3e72cbd8",
      "file": "architecture/event-driven.md",
      "index": 2,
      "type": "graph",
      "content": "graph TB\n    subgraph \"Data Sources\"\n        API[API Events]\n        DB[Database Changes]\n        LOG[Application Logs]\n        IOT[IoT Sensors]\n    end\n    \n    subgraph \"Stream Processing Pipeline\"\n        API --> KAFKA[Kafka Cluster]\n        DB --> KAFKA\n        LOG --> KAFKA\n        IOT --> KAFKA\n        \n        KAFKA --> STREAM[Stream Processors]\n        STREAM --> ENRICH[Enrichment]\n        ENRICH --> FILTER[Filtering]\n        FILTER --> AGG[Aggregation]\n    end\n    \n    subgraph \"Outputs\"\n        AGG --> DASH[Dashboards]\n        AGG --> ALERT[Alerts]\n        AGG --> ML[ML Models]\n        AGG --> STORE[Data Stores]\n    end\n    \n    classDef source fill:#fff3e0,stroke:#f57c00,stroke-width:2px\n    classDef processing fill:#e8f5e8,stroke:#388e3c,stroke-width:2px\n    classDef output fill:#e3f2fd,stroke:#1976d2,stroke-width:2px\n    \n    class API,DB,LOG,IOT source\n    class KAFKA,STREAM,ENRICH,FILTER,AGG processing\n    class DASH,ALERT,ML,STORE output",
      "line_count": 34,
      "node_count": 13,
      "complexity": "low",
      "category": "architecture"
    },
    {
      "id": "event-driven-3-39e221ea",
      "file": "architecture/event-driven.md",
      "index": 3,
      "type": "graph",
      "content": "graph TB\n    subgraph \"Event Flow Monitoring\"\n        PROD[Producers] --> MON1[Rate Monitor]\n        MON1 --> KAFKA[Event Bus]\n        KAFKA --> MON2[Lag Monitor]\n        MON2 --> CONS[Consumers]\n    end\n    \n    subgraph \"Health Monitoring\"\n        MON1 --> METRICS[Metrics Store]\n        MON2 --> METRICS\n        CONS --> MON3[Error Monitor]\n        MON3 --> METRICS\n    end\n    \n    subgraph \"Alerting\"\n        METRICS --> ALERT[Alert Manager]\n        ALERT --> PAGE[Paging]\n        ALERT --> DASH[Dashboards]\n        ALERT --> DLQ[Dead Letter Queue]\n    end\n    \n    classDef producer fill:#fff3e0,stroke:#f57c00,stroke-width:2px\n    classDef monitoring fill:#e8f5e8,stroke:#388e3c,stroke-width:2px\n    classDef alerting fill:#ffebee,stroke:#d32f2f,stroke-width:2px\n    \n    class PROD,KAFKA,CONS producer\n    class MON1,MON2,MON3,METRICS monitoring\n    class ALERT,PAGE,DASH,DLQ alerting",
      "line_count": 29,
      "node_count": 11,
      "complexity": "low",
      "category": "architecture"
    },
    {
      "id": "event-driven-4-63694ae8",
      "file": "architecture/event-driven.md",
      "index": 4,
      "type": "graph",
      "content": "graph TB\n    subgraph \"Cloud Region 1\"\n        EB1[Event Broker 1]\n        APP1[Applications]\n        APP1 --> EB1\n    end\n    \n    subgraph \"Cloud Region 2\"\n        EB2[Event Broker 2]\n        APP2[Applications]\n        APP2 --> EB2\n    end\n    \n    subgraph \"Edge Locations\"\n        EB3[Edge Broker]\n        IOT[IoT Devices]\n        MOBILE[Mobile Apps]\n        IOT --> EB3\n        MOBILE --> EB3\n    end\n    \n    subgraph \"Event Mesh Layer\"\n        MESH[Event Mesh Controller]\n        DISCOVERY[Service Discovery]\n        ROUTING[Smart Routing]\n        SECURITY[Security Policies]\n    end\n    \n    EB1 <--> MESH\n    EB2 <--> MESH\n    EB3 <--> MESH\n    \n    MESH --> DISCOVERY\n    MESH --> ROUTING\n    MESH --> SECURITY\n    \n    classDef broker fill:#e3f2fd,stroke:#1976d2,stroke-width:2px\n    classDef app fill:#fff3e0,stroke:#f57c00,stroke-width:2px\n    classDef mesh fill:#f3e5f5,stroke:#7b1fa2,stroke-width:2px\n    \n    class EB1,EB2,EB3 broker\n    class APP1,APP2,IOT,MOBILE app\n    class MESH,DISCOVERY,ROUTING,SECURITY mesh",
      "line_count": 43,
      "node_count": 11,
      "complexity": "low",
      "category": "architecture"
    },
    {
      "id": "ambassador-0-64faf133",
      "file": "architecture/ambassador.md",
      "index": 0,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "architecture"
    },
    {
      "id": "ambassador-1-64faf133",
      "file": "architecture/ambassador.md",
      "index": 1,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "architecture"
    },
    {
      "id": "ambassador-2-64faf133",
      "file": "architecture/ambassador.md",
      "index": 2,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "architecture"
    },
    {
      "id": "ambassador-3-64faf133",
      "file": "architecture/ambassador.md",
      "index": 3,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "architecture"
    },
    {
      "id": "ambassador-4-64faf133",
      "file": "architecture/ambassador.md",
      "index": 4,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "architecture"
    },
    {
      "id": "ambassador-5-64faf133",
      "file": "architecture/ambassador.md",
      "index": 5,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "architecture"
    },
    {
      "id": "ambassador-6-64faf133",
      "file": "architecture/ambassador.md",
      "index": 6,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "architecture"
    },
    {
      "id": "strangler-fig-0-3b31a448",
      "file": "architecture/strangler-fig.md",
      "index": 0,
      "type": "graph",
      "content": "graph LR\n    A[Component A] --> B[Component B]\n    B --> C[Component C]",
      "line_count": 3,
      "node_count": 3,
      "complexity": "low",
      "category": "architecture"
    },
    {
      "id": "strangler-fig-1-64faf133",
      "file": "architecture/strangler-fig.md",
      "index": 1,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "architecture"
    },
    {
      "id": "strangler-fig-2-64faf133",
      "file": "architecture/strangler-fig.md",
      "index": 2,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "architecture"
    },
    {
      "id": "strangler-fig-3-64faf133",
      "file": "architecture/strangler-fig.md",
      "index": 3,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "architecture"
    },
    {
      "id": "strangler-fig-4-64faf133",
      "file": "architecture/strangler-fig.md",
      "index": 4,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "architecture"
    },
    {
      "id": "strangler-fig-5-3b31a448",
      "file": "architecture/strangler-fig.md",
      "index": 5,
      "type": "graph",
      "content": "graph LR\n    A[Component A] --> B[Component B]\n    B --> C[Component C]",
      "line_count": 3,
      "node_count": 3,
      "complexity": "low",
      "category": "architecture"
    },
    {
      "id": "strangler-fig-6-64faf133",
      "file": "architecture/strangler-fig.md",
      "index": 6,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "architecture"
    },
    {
      "id": "event-streaming-0-1f26f954",
      "file": "architecture/event-streaming.md",
      "index": 0,
      "type": "state",
      "content": "stateDiagram-v2\n    [*] --> EventArrival\n    EventArrival --> StateUpdate: Process event\n    StateUpdate --> StateCheckpoint: Periodic snapshot\n    StateCheckpoint --> EventArrival: Continue processing\n    StateUpdate --> OutputEmit: Trigger condition met\n    OutputEmit --> EventArrival: Continue\n    StateCheckpoint --> Recovery: System failure\n    Recovery --> StateUpdate: Restore from checkpoint",
      "line_count": 9,
      "node_count": 0,
      "complexity": "low",
      "category": "architecture"
    },
    {
      "id": "event-streaming-1-4bbf9d28",
      "file": "architecture/event-streaming.md",
      "index": 1,
      "type": "graph",
      "content": "graph LR\n    A[\"Batch ETL<br/>(Hours delay)\"] -->|\"Step 1\"| B[\"Micro-batches<br/>(Minutes delay)\"]\n    B -->|\"Step 2\"| C[\"Stream Processing<br/>(Seconds delay)\"]\n    C -->|\"Step 3\"| D[\"Real-time ML<br/>(Milliseconds)\"]\n    \n    style A fill:#ffb74d,stroke:#f57c00\n    style D fill:#81c784,stroke:#388e3c",
      "line_count": 7,
      "node_count": 4,
      "complexity": "low",
      "category": "architecture"
    },
    {
      "id": "sidecar-0-3b31a448",
      "file": "architecture/sidecar.md",
      "index": 0,
      "type": "graph",
      "content": "graph LR\n    A[Component A] --> B[Component B]\n    B --> C[Component C]",
      "line_count": 3,
      "node_count": 3,
      "complexity": "low",
      "category": "architecture"
    },
    {
      "id": "sidecar-1-64faf133",
      "file": "architecture/sidecar.md",
      "index": 1,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "architecture"
    },
    {
      "id": "lambda-architecture-0-3b31a448",
      "file": "architecture/lambda-architecture.md",
      "index": 0,
      "type": "graph",
      "content": "graph LR\n    A[Component A] --> B[Component B]\n    B --> C[Component C]",
      "line_count": 3,
      "node_count": 3,
      "complexity": "low",
      "category": "architecture"
    },
    {
      "id": "lambda-architecture-1-3b31a448",
      "file": "architecture/lambda-architecture.md",
      "index": 1,
      "type": "graph",
      "content": "graph LR\n    A[Component A] --> B[Component B]\n    B --> C[Component C]",
      "line_count": 3,
      "node_count": 3,
      "complexity": "low",
      "category": "architecture"
    },
    {
      "id": "lambda-architecture-2-6618dbb7",
      "file": "architecture/lambda-architecture.md",
      "index": 2,
      "type": "graph",
      "content": "graph TD\n    Q1{Need reprocessing?} -->|No| Stream[Stream-only]\n    Q1 -->|Yes| Q2{Complex analytics?}\n    Q2 -->|No| Unified[Unified Processing]\n    Q2 -->|Yes| Q3{Legacy constraints?}\n    Q3 -->|No| Modern[Modern Lakehouse]\n    Q3 -->|Yes| Lambda[Lambda Architecture]",
      "line_count": 7,
      "node_count": 4,
      "complexity": "low",
      "category": "architecture"
    },
    {
      "id": "valet-key-0-3b31a448",
      "file": "architecture/valet-key.md",
      "index": 0,
      "type": "graph",
      "content": "graph LR\n    A[Component A] --> B[Component B]\n    B --> C[Component C]",
      "line_count": 3,
      "node_count": 3,
      "complexity": "low",
      "category": "architecture"
    },
    {
      "id": "valet-key-1-3b31a448",
      "file": "architecture/valet-key.md",
      "index": 1,
      "type": "graph",
      "content": "graph LR\n    A[Component A] --> B[Component B]\n    B --> C[Component C]",
      "line_count": 3,
      "node_count": 3,
      "complexity": "low",
      "category": "architecture"
    },
    {
      "id": "valet-key-2-4b304e29",
      "file": "architecture/valet-key.md",
      "index": 2,
      "type": "graph",
      "content": "graph TD\n    VK[Valet Key] --> |Complements| GW[API Gateway]\n    VK --> |Enables| CDN[CDN Pattern]\n    VK --> |Supports| MS[Microservices]\n    VK --> |Implements| LS[Least Privilege]\n    \n    VK --> |Addresses| L7[Law 7: Economic Reality]\n    VK --> |Relates to| P4[Pillar 4: Control Distribution]\n    VK --> |Supports| P2[Pillar 2: State Distribution]",
      "line_count": 9,
      "node_count": 8,
      "complexity": "low",
      "category": "architecture"
    },
    {
      "id": "serverless-faas-0-64faf133",
      "file": "architecture/serverless-faas.md",
      "index": 0,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "architecture"
    },
    {
      "id": "serverless-faas-1-64faf133",
      "file": "architecture/serverless-faas.md",
      "index": 1,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "architecture"
    },
    {
      "id": "serverless-faas-2-64faf133",
      "file": "architecture/serverless-faas.md",
      "index": 2,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "architecture"
    },
    {
      "id": "hlc-0-64faf133",
      "file": "coordination/hlc.md",
      "index": 0,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "coordination"
    },
    {
      "id": "hlc-1-3b31a448",
      "file": "coordination/hlc.md",
      "index": 1,
      "type": "graph",
      "content": "graph LR\n    A[Component A] --> B[Component B]\n    B --> C[Component C]",
      "line_count": 3,
      "node_count": 3,
      "complexity": "low",
      "category": "coordination"
    },
    {
      "id": "distributed-queue-0-d2b604d5",
      "file": "coordination/distributed-queue.md",
      "index": 0,
      "type": "unknown",
      "content": "classDiagram\n    class Component2 {\n        +process() void\n        +validate() bool\n        -state: State\n    }\n    class Handler2 {\n        +handle() Result\n        +configure() void\n    }\n    Component2 --> Handler2 : uses\n    \n    note for Component2 \"Core processing logic\"",
      "line_count": 13,
      "node_count": 0,
      "complexity": "low",
      "category": "coordination"
    },
    {
      "id": "distributed-queue-1-d4b035bc",
      "file": "coordination/distributed-queue.md",
      "index": 1,
      "type": "graph",
      "content": "graph LR\n    A[Synchronous<br/>Coupling] -->|Step 1| B[Add Queue<br/>Layer]\n    B -->|Step 2| C[Async<br/>Processing]\n    C -->|Step 3| D[Event-Driven<br/>Architecture]\n    \n    style A fill:#ffb74d,stroke:#f57c00\n    style D fill:#81c784,stroke:#388e3c",
      "line_count": 7,
      "node_count": 4,
      "complexity": "low",
      "category": "coordination"
    },
    {
      "id": "leader-follower-0-64faf133",
      "file": "coordination/leader-follower.md",
      "index": 0,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "coordination"
    },
    {
      "id": "leader-follower-1-3b31a448",
      "file": "coordination/leader-follower.md",
      "index": 1,
      "type": "graph",
      "content": "graph LR\n    A[Component A] --> B[Component B]\n    B --> C[Component C]",
      "line_count": 3,
      "node_count": 3,
      "complexity": "low",
      "category": "coordination"
    },
    {
      "id": "leader-follower-2-a1720bd2",
      "file": "coordination/leader-follower.md",
      "index": 2,
      "type": "unknown",
      "content": "classDiagram\n    class Component7 {\n        +process() void\n        +validate() bool\n        -state: State\n    }\n    class Handler7 {\n        +handle() Result\n        +configure() void\n    }\n    Component7 --> Handler7 : uses\n    \n    note for Component7 \"Core processing logic\"",
      "line_count": 13,
      "node_count": 0,
      "complexity": "low",
      "category": "coordination"
    },
    {
      "id": "leader-follower-3-70cd895f",
      "file": "coordination/leader-follower.md",
      "index": 3,
      "type": "unknown",
      "content": "classDiagram\n    class Component8 {\n        +process() void\n        +validate() bool\n        -state: State\n    }\n    class Handler8 {\n        +handle() Result\n        +configure() void\n    }\n    Component8 --> Handler8 : uses\n    \n    note for Component8 \"Core processing logic\"",
      "line_count": 13,
      "node_count": 0,
      "complexity": "low",
      "category": "coordination"
    },
    {
      "id": "leader-follower-4-51e326f3",
      "file": "coordination/leader-follower.md",
      "index": 4,
      "type": "graph",
      "content": "graph TB\n Master[(Master DB)] -->|Binary Log| Slave1[(Slave 1)]\n Master -->|Binary Log| Slave2[(Slave 2)]\n \n App[Application] -->|Writes| Master\n App -->|Reads| LB[Load Balancer]\n LB --> Slave1\n LB --> Slave2",
      "line_count": 8,
      "node_count": 5,
      "complexity": "low",
      "category": "coordination"
    },
    {
      "id": "leader-follower-5-3b31a448",
      "file": "coordination/leader-follower.md",
      "index": 5,
      "type": "graph",
      "content": "graph LR\n    A[Component A] --> B[Component B]\n    B --> C[Component C]",
      "line_count": 3,
      "node_count": 3,
      "complexity": "low",
      "category": "coordination"
    },
    {
      "id": "cas-0-f724c7dd",
      "file": "coordination/cas.md",
      "index": 0,
      "type": "graph",
      "content": "graph LR\n    A[Coarse-Grained<br/>Locks] -->|Step 1| B[Fine-Grained<br/>Locks]\n    B -->|Step 2| C[Lock-Free<br/>CAS]\n    C -->|Step 3| D[Wait-Free<br/>Algorithms]\n    \n    style A fill:#ffb74d,stroke:#f57c00\n    style B fill:#fff176,stroke:#f57f17\n    style C fill:#81c784,stroke:#388e3c\n    style D fill:#64b5f6,stroke:#1976d2",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "coordination"
    },
    {
      "id": "logical-clocks-0-d119fd99",
      "file": "coordination/logical-clocks.md",
      "index": 0,
      "type": "graph",
      "content": "graph LR\n    Event[Local Event] --> Inc[Clock++]\n    Inc --> New[New Timestamp]\n    \n    Example[Example: Clock 5 \u2192 6]",
      "line_count": 5,
      "node_count": 4,
      "complexity": "low",
      "category": "coordination"
    },
    {
      "id": "logical-clocks-1-3b31a448",
      "file": "coordination/logical-clocks.md",
      "index": 1,
      "type": "graph",
      "content": "graph LR\n    A[Component A] --> B[Component B]\n    B --> C[Component C]",
      "line_count": 3,
      "node_count": 3,
      "complexity": "low",
      "category": "coordination"
    },
    {
      "id": "logical-clocks-2-64faf133",
      "file": "coordination/logical-clocks.md",
      "index": 2,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "coordination"
    },
    {
      "id": "logical-clocks-3-64faf133",
      "file": "coordination/logical-clocks.md",
      "index": 3,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "coordination"
    },
    {
      "id": "logical-clocks-4-64faf133",
      "file": "coordination/logical-clocks.md",
      "index": 4,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "coordination"
    },
    {
      "id": "logical-clocks-5-64faf133",
      "file": "coordination/logical-clocks.md",
      "index": 5,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "coordination"
    },
    {
      "id": "logical-clocks-6-391b0310",
      "file": "coordination/logical-clocks.md",
      "index": 6,
      "type": "unknown",
      "content": "classDiagram\n    class Component23 {\n        +process() void\n        +validate() bool\n        -state: State\n    }\n    class Handler23 {\n        +handle() Result\n        +configure() void\n    }\n    Component23 --> Handler23 : uses\n    \n    note for Component23 \"Core processing logic\"",
      "line_count": 13,
      "node_count": 0,
      "complexity": "low",
      "category": "coordination"
    },
    {
      "id": "logical-clocks-7-3b31a448",
      "file": "coordination/logical-clocks.md",
      "index": 7,
      "type": "graph",
      "content": "graph LR\n    A[Component A] --> B[Component B]\n    B --> C[Component C]",
      "line_count": 3,
      "node_count": 3,
      "complexity": "low",
      "category": "coordination"
    },
    {
      "id": "distributed-lock-0-c2aa139e",
      "file": "coordination/distributed-lock.md",
      "index": 0,
      "type": "graph",
      "content": "graph LR\n    A[Database Locks] -->|Step 1| B[Hybrid: DB + Redis]\n    B -->|Step 2| C[Redis Primary]\n    C -->|Step 3| D[etcd Consensus]\n    \n    style A fill:#ffb74d,stroke:#f57c00\n    style D fill:#81c784,stroke:#388e3c",
      "line_count": 7,
      "node_count": 4,
      "complexity": "low",
      "category": "coordination"
    },
    {
      "id": "state-watch-0-64faf133",
      "file": "coordination/state-watch.md",
      "index": 0,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "coordination"
    },
    {
      "id": "state-watch-1-64faf133",
      "file": "coordination/state-watch.md",
      "index": 1,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "coordination"
    },
    {
      "id": "state-watch-2-64faf133",
      "file": "coordination/state-watch.md",
      "index": 2,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "coordination"
    },
    {
      "id": "state-watch-3-64faf133",
      "file": "coordination/state-watch.md",
      "index": 3,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "coordination"
    },
    {
      "id": "leader-election-0-d2b604d5",
      "file": "coordination/leader-election.md",
      "index": 0,
      "type": "unknown",
      "content": "classDiagram\n    class Component2 {\n        +process() void\n        +validate() bool\n        -state: State\n    }\n    class Handler2 {\n        +handle() Result\n        +configure() void\n    }\n    Component2 --> Handler2 : uses\n    \n    note for Component2 \"Core processing logic\"",
      "line_count": 13,
      "node_count": 0,
      "complexity": "low",
      "category": "coordination"
    },
    {
      "id": "leader-election-1-d9500147",
      "file": "coordination/leader-election.md",
      "index": 1,
      "type": "graph",
      "content": "graph LR\n    A[Manual Failover] -->|Step 1| B[Simple Health Checks]\n    B -->|Step 2| C[Bully Algorithm]\n    C -->|Step 3| D[Raft Consensus]\n    \n    style A fill:#ffb74d,stroke:#f57c00\n    style D fill:#81c784,stroke:#388e3c",
      "line_count": 7,
      "node_count": 4,
      "complexity": "low",
      "category": "coordination"
    },
    {
      "id": "actor-model-0-d2b604d5",
      "file": "coordination/actor-model.md",
      "index": 0,
      "type": "unknown",
      "content": "classDiagram\n    class Component2 {\n        +process() void\n        +validate() bool\n        -state: State\n    }\n    class Handler2 {\n        +handle() Result\n        +configure() void\n    }\n    Component2 --> Handler2 : uses\n    \n    note for Component2 \"Core processing logic\"",
      "line_count": 13,
      "node_count": 0,
      "complexity": "low",
      "category": "coordination"
    },
    {
      "id": "actor-model-1-7c7d65fc",
      "file": "coordination/actor-model.md",
      "index": 1,
      "type": "graph",
      "content": "graph LR\n    A[Shared State<br/>Threading] -->|Step 1| B[Message Passing<br/>Actors]\n    B -->|Step 2| C[Service Mesh<br/>Microservices]\n    C -->|Step 3| D[Serverless<br/>Functions]\n    \n    style A fill:#ffb74d,stroke:#f57c00\n    style B fill:#81c784,stroke:#388e3c\n    style C fill:#4fc3f7,stroke:#0288d1\n    style D fill:#ba68c8,stroke:#7b1fa2",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "coordination"
    },
    {
      "id": "clock-sync-0-d251fddd",
      "file": "coordination/clock-sync.md",
      "index": 0,
      "type": "state",
      "content": "stateDiagram-v2\n    [*] --> Unsynchronized\n    Unsynchronized --> Synchronized: Valid time received\n    Synchronized --> Synchronized: Periodic updates\n    Synchronized --> Unsynchronized: Server unreachable\n    Synchronized --> Spike: Clock jump detected\n    Spike --> Synchronized: Spike filtered\n    Spike --> Unsynchronized: Persistent error",
      "line_count": 8,
      "node_count": 0,
      "complexity": "low",
      "category": "coordination"
    },
    {
      "id": "clock-sync-1-ea95041f",
      "file": "coordination/clock-sync.md",
      "index": 1,
      "type": "graph",
      "content": "graph LR\n    A[Basic NTP] -->|Step 1| B[Redundant Servers]\n    B -->|Step 2| C[Hardware Timestamps]\n    C -->|Step 3| D[GPS/PTP Precision]\n    \n    style A fill:#ffb74d,stroke:#f57c00\n    style D fill:#81c784,stroke:#388e3c",
      "line_count": 7,
      "node_count": 4,
      "complexity": "low",
      "category": "coordination"
    },
    {
      "id": "low-high-water-marks-0-64faf133",
      "file": "coordination/low-high-water-marks.md",
      "index": 0,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "coordination"
    },
    {
      "id": "low-high-water-marks-1-64faf133",
      "file": "coordination/low-high-water-marks.md",
      "index": 1,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "coordination"
    },
    {
      "id": "low-high-water-marks-2-64faf133",
      "file": "coordination/low-high-water-marks.md",
      "index": 2,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "coordination"
    },
    {
      "id": "low-high-water-marks-3-d5803d11",
      "file": "coordination/low-high-water-marks.md",
      "index": 3,
      "type": "unknown",
      "content": "classDiagram\n    class Component12 {\n        +process() void\n        +validate() bool\n        -state: State\n    }\n    class Handler12 {\n        +handle() Result\n        +configure() void\n    }\n    Component12 --> Handler12 : uses\n    \n    note for Component12 \"Core processing logic\"",
      "line_count": 13,
      "node_count": 0,
      "complexity": "low",
      "category": "coordination"
    },
    {
      "id": "low-high-water-marks-4-64faf133",
      "file": "coordination/low-high-water-marks.md",
      "index": 4,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "coordination"
    },
    {
      "id": "shared-database-0-64faf133",
      "file": "data-management/shared-database.md",
      "index": 0,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "data-management"
    },
    {
      "id": "shared-database-1-3b31a448",
      "file": "data-management/shared-database.md",
      "index": 1,
      "type": "graph",
      "content": "graph LR\n    A[Component A] --> B[Component B]\n    B --> C[Component C]",
      "line_count": 3,
      "node_count": 3,
      "complexity": "low",
      "category": "data-management"
    },
    {
      "id": "polyglot-persistence-0-64faf133",
      "file": "data-management/polyglot-persistence.md",
      "index": 0,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "data-management"
    },
    {
      "id": "polyglot-persistence-1-64faf133",
      "file": "data-management/polyglot-persistence.md",
      "index": 1,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "data-management"
    },
    {
      "id": "polyglot-persistence-2-64faf133",
      "file": "data-management/polyglot-persistence.md",
      "index": 2,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "data-management"
    },
    {
      "id": "polyglot-persistence-3-64faf133",
      "file": "data-management/polyglot-persistence.md",
      "index": 3,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "data-management"
    },
    {
      "id": "polyglot-persistence-4-64faf133",
      "file": "data-management/polyglot-persistence.md",
      "index": 4,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "data-management"
    },
    {
      "id": "polyglot-persistence-5-64faf133",
      "file": "data-management/polyglot-persistence.md",
      "index": 5,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "data-management"
    },
    {
      "id": "distributed-storage-0-3b31a448",
      "file": "data-management/distributed-storage.md",
      "index": 0,
      "type": "graph",
      "content": "graph LR\n    A[Component A] --> B[Component B]\n    B --> C[Component C]",
      "line_count": 3,
      "node_count": 3,
      "complexity": "low",
      "category": "data-management"
    },
    {
      "id": "eventual-consistency-0-93a51a2b",
      "file": "data-management/eventual-consistency.md",
      "index": 0,
      "type": "state",
      "content": "stateDiagram-v2\n    [*] --> Node1: Write arrives\n    Node1 --> Node2: Async replication\n    Node1 --> Node3: Async replication\n    Node2 --> Converged: Anti-entropy\n    Node3 --> Converged: Anti-entropy\n    Converged --> [*]: All nodes consistent",
      "line_count": 7,
      "node_count": 0,
      "complexity": "low",
      "category": "data-management"
    },
    {
      "id": "eventual-consistency-1-1fa0f0af",
      "file": "data-management/eventual-consistency.md",
      "index": 1,
      "type": "state",
      "content": "stateDiagram-v2\n    [*] --> Inconsistent\n    Inconsistent --> Synchronizing: Anti-entropy triggered\n    Synchronizing --> Conflicted: Concurrent writes detected\n    Synchronizing --> Consistent: No conflicts found\n    Conflicted --> Consistent: Conflicts resolved\n    Consistent --> Inconsistent: New write arrives\n    Consistent --> [*]: System idle",
      "line_count": 8,
      "node_count": 0,
      "complexity": "low",
      "category": "data-management"
    },
    {
      "id": "eventual-consistency-2-4ac0570d",
      "file": "data-management/eventual-consistency.md",
      "index": 2,
      "type": "graph",
      "content": "graph LR\n    A[Strongly Consistent DB] -->|Step 1| B[Add Read Replicas]\n    B -->|Step 2| C[Introduce Write Replicas]\n    C -->|Step 3| D[Implement Conflict Resolution]\n    D -->|Step 4| E[Full Eventual Consistency]\n    \n    style A fill:#ffb74d,stroke:#f57c00\n    style E fill:#81c784,stroke:#388e3c",
      "line_count": 8,
      "node_count": 5,
      "complexity": "low",
      "category": "data-management"
    },
    {
      "id": "eventual-consistency-3-49aba774",
      "file": "data-management/eventual-consistency.md",
      "index": 3,
      "type": "flowchart",
      "content": "flowchart TD\n Start[Choose Consistency Model] --> Q1{Can tolerate<br/>temporary inconsistency?}\n \n Q1 -->|No| SC[Strong Consistency]\n Q1 -->|Yes| Q2{Need causal<br/>relationships?}\n \n Q2 -->|Yes| Q3{Cross-region<br/>deployment?}\n Q2 -->|No| Q4{Session guarantees<br/>needed?}\n \n Q3 -->|Yes| CC[Causal Consistency<br/>with Vector Clocks]\n Q3 -->|No| CC2[Causal Consistency<br/>with Logical Clocks]\n \n Q4 -->|Yes| Q5{Which guarantees?}\n Q4 -->|No| EC[Basic Eventual<br/>Consistency]\n \n Q5 -->|Read Your Writes| RYW[Session-based<br/>Read Your Writes]\n Q5 -->|Monotonic| MR[Monotonic Reads/<br/>Writes]\n Q5 -->|Both| BOTH[Full Session<br/>Guarantees]\n \n SC --> SCEx[Examples:<br/>\u2022 Banking<br/>\u2022 Inventory<br/>\u2022 Auctions]\n CC --> CCEx[Examples:<br/>\u2022 Social feeds<br/>\u2022 Comments<br/>\u2022 Messaging]\n EC --> ECEx[Examples:<br/>\u2022 Analytics<br/>\u2022 Metrics<br/>\u2022 Logs]\n \n style SC fill:#f96,stroke:#333,stroke-width:2px\n style CC fill:#fc6,stroke:#333,stroke-width:2px\n style EC fill:#9f6,stroke:#333,stroke-width:2px",
      "line_count": 26,
      "node_count": 11,
      "complexity": "low",
      "category": "data-management"
    },
    {
      "id": "eventual-consistency-4-5984996e",
      "file": "data-management/eventual-consistency.md",
      "index": 4,
      "type": "graph",
      "content": "graph TD\n subgraph \"Conflict Type Analysis\"\n CT[Conflict Type] --> Q1{Data Type?}\n \n Q1 -->|Numeric| Q2{Operation?}\n Q1 -->|Set/List| Q3{Semantics?}\n Q1 -->|Object| Q4{Domain?}\n \n Q2 -->|Counter| CRDT1[Use PN-Counter CRDT]\n Q2 -->|Max/Min| LWW1[Last Write Wins]\n \n Q3 -->|Add Only| CRDT2[Use G-Set CRDT]\n Q3 -->|Add/Remove| CRDT3[Use OR-Set CRDT]\n \n Q4 -->|Shopping Cart| SEM1[Semantic Merge<br/>Union of items]\n Q4 -->|Document| SEM2[Three-way merge<br/>Track changes]\n Q4 -->|Custom| APP[Application-specific<br/>Resolution]\n end\n \n style CRDT1 fill:#9f6,stroke:#333,stroke-width:2px\n style CRDT2 fill:#9f6,stroke:#333,stroke-width:2px\n style CRDT3 fill:#9f6,stroke:#333,stroke-width:2px\n style LWW1 fill:#69f,stroke:#333,stroke-width:2px\n style SEM1 fill:#fc6,stroke:#333,stroke-width:2px",
      "line_count": 24,
      "node_count": 8,
      "complexity": "low",
      "category": "data-management"
    },
    {
      "id": "outbox-0-154ad59c",
      "file": "data-management/outbox.md",
      "index": 0,
      "type": "graph",
      "content": "graph LR\n    A[Synchronous Events] -->|Step 1| B[Async with Retry]\n    B -->|Step 2| C[Basic Outbox]\n    C -->|Step 3| D[CDC Outbox]\n    \n    style A fill:#ffb74d,stroke:#f57c00\n    style D fill:#81c784,stroke:#388e3c",
      "line_count": 7,
      "node_count": 4,
      "complexity": "low",
      "category": "data-management"
    },
    {
      "id": "cdc-0-64faf133",
      "file": "data-management/cdc.md",
      "index": 0,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "data-management"
    },
    {
      "id": "cdc-1-64faf133",
      "file": "data-management/cdc.md",
      "index": 1,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "data-management"
    },
    {
      "id": "saga-0-64faf133",
      "file": "data-management/saga.md",
      "index": 0,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "data-management"
    },
    {
      "id": "event-sourcing-0-b86a0c16",
      "file": "data-management/event-sourcing.md",
      "index": 0,
      "type": "graph",
      "content": "graph LR\n    E1[Event 1] --> E2[Event 2]\n    E2 --> E3[...]\n    E3 --> E100[Event 100]\n    E100 --> S1[Snapshot v100]\n    S1 --> E101[Event 101]\n    E101 --> E102[Event 102]\n    \n    R[Replay] -->|Skip to| S1\n    S1 -->|Then apply| E101",
      "line_count": 10,
      "node_count": 8,
      "complexity": "low",
      "category": "data-management"
    },
    {
      "id": "event-sourcing-1-64faf133",
      "file": "data-management/event-sourcing.md",
      "index": 1,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "data-management"
    },
    {
      "id": "segmented-log-0-64faf133",
      "file": "data-management/segmented-log.md",
      "index": 0,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "data-management"
    },
    {
      "id": "read-repair-0-4108d91f",
      "file": "data-management/read-repair.md",
      "index": 0,
      "type": "graph",
      "content": "graph LR\n    A[No Repair] -->|Step 1| B[Manual Fixes]\n    B -->|Step 2| C[Batch Repair]\n    C -->|Step 3| D[Read Repair]\n    \n    style A fill:#ffb74d,stroke:#f57c00\n    style D fill:#81c784,stroke:#388e3c",
      "line_count": 7,
      "node_count": 4,
      "complexity": "low",
      "category": "data-management"
    },
    {
      "id": "data-lake-0-64faf133",
      "file": "data-management/data-lake.md",
      "index": 0,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "data-management"
    },
    {
      "id": "data-lake-1-3b31a448",
      "file": "data-management/data-lake.md",
      "index": 1,
      "type": "graph",
      "content": "graph LR\n    A[Component A] --> B[Component B]\n    B --> C[Component C]",
      "line_count": 3,
      "node_count": 3,
      "complexity": "low",
      "category": "data-management"
    },
    {
      "id": "bloom-filter-0-e59d7c36",
      "file": "data-management/bloom-filter.md",
      "index": 0,
      "type": "graph",
      "content": "graph LR\n    A[Element] --> B[Hash Functions]\n    B --> C[Bit Positions]\n    C --> D{All Bits Set?}\n    D -->|No| E[Definitely NOT in set]\n    D -->|Yes| F[MAYBE in set]\n    \n    style E fill:#ff6b6b,stroke:#d63031,color:#fff\n    style F fill:#ffeaa7,stroke:#fdcb6e,color:#333",
      "line_count": 9,
      "node_count": 5,
      "complexity": "low",
      "category": "data-management"
    },
    {
      "id": "bloom-filter-1-d2b604d5",
      "file": "data-management/bloom-filter.md",
      "index": 1,
      "type": "unknown",
      "content": "classDiagram\n    class Component2 {\n        +process() void\n        +validate() bool\n        -state: State\n    }\n    class Handler2 {\n        +handle() Result\n        +configure() void\n    }\n    Component2 --> Handler2 : uses\n    \n    note for Component2 \"Core processing logic\"",
      "line_count": 13,
      "node_count": 0,
      "complexity": "low",
      "category": "data-management"
    },
    {
      "id": "bloom-filter-2-05152c8f",
      "file": "data-management/bloom-filter.md",
      "index": 2,
      "type": "state",
      "content": "stateDiagram-v2\n    [*] --> Empty: Initialize\n    Empty --> Populated: Add elements\n    Populated --> Queried: Check membership\n    Queried --> Populated: Continue adding\n    Populated --> Saturated: Too many elements\n    Saturated --> [*]: Rebuild required",
      "line_count": 7,
      "node_count": 0,
      "complexity": "low",
      "category": "data-management"
    },
    {
      "id": "bloom-filter-3-a02e1f13",
      "file": "data-management/bloom-filter.md",
      "index": 3,
      "type": "graph",
      "content": "graph LR\n    A[Full Hash Table] -->|Step 1| B[Hybrid: Hash + Bloom]\n    B -->|Step 2| C[Bloom Pre-filter]\n    C -->|Step 3| D[Distributed Bloom]\n    \n    style A fill:#ffb74d,stroke:#f57c00\n    style D fill:#81c784,stroke:#388e3c",
      "line_count": 7,
      "node_count": 4,
      "complexity": "low",
      "category": "data-management"
    },
    {
      "id": "materialized-view-0-5c63312f",
      "file": "data-management/materialized-view.md",
      "index": 0,
      "type": "state",
      "content": "stateDiagram-v2\n    [*] --> Creating\n    Creating --> Ready: Initial build complete\n    Ready --> Refreshing: Scheduled/triggered refresh\n    Ready --> Stale: Data changes detected\n    Refreshing --> Ready: Refresh complete\n    Refreshing --> Failed: Refresh error\n    Stale --> Refreshing: Refresh initiated\n    Failed --> Refreshing: Retry refresh\n    Ready --> [*]: Drop view",
      "line_count": 10,
      "node_count": 0,
      "complexity": "low",
      "category": "data-management"
    },
    {
      "id": "materialized-view-1-18c79ba6",
      "file": "data-management/materialized-view.md",
      "index": 1,
      "type": "graph",
      "content": "graph LR\n    A[Regular Views] -->|Step 1| B[Identify Slow Queries]\n    B -->|Step 2| C[Create MV for Top 10]\n    C -->|Step 3| D[Monitor Performance]\n    D -->|Step 4| E[Expand Coverage]\n    \n    style A fill:#ffb74d,stroke:#f57c00\n    style E fill:#81c784,stroke:#388e3c",
      "line_count": 8,
      "node_count": 5,
      "complexity": "low",
      "category": "data-management"
    },
    {
      "id": "materialized-view-2-ac340b25",
      "file": "data-management/materialized-view.md",
      "index": 2,
      "type": "sequence",
      "content": "sequenceDiagram\n    participant Base as Base Table\n    participant Delta as Delta Log\n    participant MV as Materialized View\n    participant Query as Query Engine\n    \n    Base->>Delta: New records\n    Delta->>MV: Append deltas\n    Query->>MV: Read data\n    Note over MV: Only new data processed",
      "line_count": 10,
      "node_count": 0,
      "complexity": "low",
      "category": "data-management"
    },
    {
      "id": "deduplication-0-3b31a448",
      "file": "data-management/deduplication.md",
      "index": 0,
      "type": "graph",
      "content": "graph LR\n    A[Component A] --> B[Component B]\n    B --> C[Component C]",
      "line_count": 3,
      "node_count": 3,
      "complexity": "low",
      "category": "data-management"
    },
    {
      "id": "deduplication-1-47e4cad9",
      "file": "data-management/deduplication.md",
      "index": 1,
      "type": "graph",
      "content": "graph LR\n    V1[Version 1] --> Delta[Compute Delta]\n    V2[Version 2] --> Delta\n    Delta --> D[Delta Block]\n    V1 --> Store[(Storage)]\n    D --> Store\n    \n    Restore[Restore V2] --> V1\n    Restore --> D\n    Restore --> V2R[Version 2 Restored]",
      "line_count": 10,
      "node_count": 7,
      "complexity": "low",
      "category": "data-management"
    },
    {
      "id": "deduplication-2-3b31a448",
      "file": "data-management/deduplication.md",
      "index": 2,
      "type": "graph",
      "content": "graph LR\n    A[Component A] --> B[Component B]\n    B --> C[Component C]",
      "line_count": 3,
      "node_count": 3,
      "complexity": "low",
      "category": "data-management"
    },
    {
      "id": "merkle-trees-0-d2b604d5",
      "file": "data-management/merkle-trees.md",
      "index": 0,
      "type": "unknown",
      "content": "classDiagram\n    class Component2 {\n        +process() void\n        +validate() bool\n        -state: State\n    }\n    class Handler2 {\n        +handle() Result\n        +configure() void\n    }\n    Component2 --> Handler2 : uses\n    \n    note for Component2 \"Core processing logic\"",
      "line_count": 13,
      "node_count": 0,
      "complexity": "low",
      "category": "data-management"
    },
    {
      "id": "merkle-trees-1-2c274911",
      "file": "data-management/merkle-trees.md",
      "index": 1,
      "type": "state",
      "content": "stateDiagram-v2\n    [*] --> Building: Construct tree\n    Building --> Complete: Tree built\n    Complete --> Verifying: Generate proof\n    Verifying --> Valid: Proof validates\n    Verifying --> Invalid: Proof fails\n    Valid --> Complete: Continue operations\n    Invalid --> Error: Handle failure\n    Complete --> Updating: Data changes\n    Updating --> Building: Rebuild affected path",
      "line_count": 10,
      "node_count": 0,
      "complexity": "low",
      "category": "data-management"
    },
    {
      "id": "merkle-trees-2-9b15519a",
      "file": "data-management/merkle-trees.md",
      "index": 2,
      "type": "graph",
      "content": "graph LR\n    A[Simple Checksums] -->|Step 1| B[Hash Lists]\n    B -->|Step 2| C[Binary Merkle Trees]\n    C -->|Step 3| D[Optimized Variants]\n    \n    style A fill:#ffb74d,stroke:#f57c00\n    style D fill:#81c784,stroke:#388e3c",
      "line_count": 7,
      "node_count": 4,
      "complexity": "low",
      "category": "data-management"
    },
    {
      "id": "cqrs-0-64faf133",
      "file": "data-management/cqrs.md",
      "index": 0,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "data-management"
    },
    {
      "id": "write-ahead-log-0-d1a492e2",
      "file": "data-management/write-ahead-log.md",
      "index": 0,
      "type": "graph",
      "content": "graph LR\n    A[Transaction Request] --> B[Write to Log]\n    B --> C[Log Persisted]\n    C --> D[Apply to Data]\n    D --> E[Data Updated]\n    \n    style B fill:#5448C8,stroke:#3f33a6,color:#fff\n    style C fill:#81c784,stroke:#388e3c,color:#fff",
      "line_count": 8,
      "node_count": 5,
      "complexity": "low",
      "category": "data-management"
    },
    {
      "id": "write-ahead-log-1-d2b604d5",
      "file": "data-management/write-ahead-log.md",
      "index": 1,
      "type": "unknown",
      "content": "classDiagram\n    class Component2 {\n        +process() void\n        +validate() bool\n        -state: State\n    }\n    class Handler2 {\n        +handle() Result\n        +configure() void\n    }\n    Component2 --> Handler2 : uses\n    \n    note for Component2 \"Core processing logic\"",
      "line_count": 13,
      "node_count": 0,
      "complexity": "low",
      "category": "data-management"
    },
    {
      "id": "write-ahead-log-2-04fab274",
      "file": "data-management/write-ahead-log.md",
      "index": 2,
      "type": "graph",
      "content": "graph LR\n    A[No Durability] -->|Step 1| B[Simple Logging]\n    B -->|Step 2| C[Full WAL Protocol]\n    C -->|Step 3| D[Optimized WAL]\n    \n    style A fill:#ffb74d,stroke:#f57c00\n    style D fill:#81c784,stroke:#388e3c",
      "line_count": 7,
      "node_count": 4,
      "complexity": "low",
      "category": "data-management"
    },
    {
      "id": "crdt-0-64faf133",
      "file": "data-management/crdt.md",
      "index": 0,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "data-management"
    },
    {
      "id": "crdt-1-64faf133",
      "file": "data-management/crdt.md",
      "index": 1,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "data-management"
    },
    {
      "id": "crdt-2-64faf133",
      "file": "data-management/crdt.md",
      "index": 2,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "data-management"
    },
    {
      "id": "crdt-3-64faf133",
      "file": "data-management/crdt.md",
      "index": 3,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "data-management"
    },
    {
      "id": "crdt-4-3b31a448",
      "file": "data-management/crdt.md",
      "index": 4,
      "type": "graph",
      "content": "graph LR\n    A[Component A] --> B[Component B]\n    B --> C[Component C]",
      "line_count": 3,
      "node_count": 3,
      "complexity": "low",
      "category": "data-management"
    },
    {
      "id": "crdt-5-64faf133",
      "file": "data-management/crdt.md",
      "index": 5,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "data-management"
    },
    {
      "id": "delta-sync-0-500641e4",
      "file": "data-management/delta-sync.md",
      "index": 0,
      "type": "graph",
      "content": "graph LR\n    A[Original Document<br/>\ud83d\udcc4\ud83d\udcc4\ud83d\udcc4\ud83d\udcc4\ud83d\udcc4] --> B[Changed Document<br/>\ud83d\udcc4\ud83d\udcc4\ud83d\udcdd\ud83d\udcc4\ud83d\udcc4]\n    B --> C[Delta: Only Changed Page<br/>\ud83d\udcdd]\n    C --> D[Synchronized<br/>\ud83d\udcc4\ud83d\udcc4\ud83d\udcdd\ud83d\udcc4\ud83d\udcc4]\n    \n    style C fill:#81c784,stroke:#388e3c,color:#fff\n    style D fill:#64b5f6,stroke:#1976d2,color:#fff",
      "line_count": 7,
      "node_count": 4,
      "complexity": "low",
      "category": "data-management"
    },
    {
      "id": "delta-sync-1-d2b604d5",
      "file": "data-management/delta-sync.md",
      "index": 1,
      "type": "unknown",
      "content": "classDiagram\n    class Component2 {\n        +process() void\n        +validate() bool\n        -state: State\n    }\n    class Handler2 {\n        +handle() Result\n        +configure() void\n    }\n    Component2 --> Handler2 : uses\n    \n    note for Component2 \"Core processing logic\"",
      "line_count": 13,
      "node_count": 0,
      "complexity": "low",
      "category": "data-management"
    },
    {
      "id": "delta-sync-2-23f1b73a",
      "file": "data-management/delta-sync.md",
      "index": 2,
      "type": "graph",
      "content": "graph LR\n    A[Full Sync Only] -->|Step 1| B[Hybrid Sync]\n    B -->|Step 2| C[Delta Primary]\n    C -->|Step 3| D[Intelligent Routing]\n    \n    style A fill:#ffb74d,stroke:#f57c00\n    style D fill:#81c784,stroke:#388e3c",
      "line_count": 7,
      "node_count": 4,
      "complexity": "low",
      "category": "data-management"
    },
    {
      "id": "caching-strategies-0-ebb0abcb",
      "file": "scaling/caching-strategies.md",
      "index": 0,
      "type": "graph",
      "content": "graph LR\n    A[Database Query<br/>\ud83d\udc0c 500ms] --> B[Smart Caching<br/>\u26a1]\n    B --> C[Cached Response<br/>\ud83d\ude80 10ms]\n    \n    style A fill:#ff6b6b,stroke:#e55353\n    style B fill:#4ecdc4,stroke:#45a29e  \n    style C fill:#45b7d1,stroke:#3a9bc1",
      "line_count": 7,
      "node_count": 3,
      "complexity": "low",
      "category": "scaling"
    },
    {
      "id": "caching-strategies-1-7465da58",
      "file": "scaling/caching-strategies.md",
      "index": 1,
      "type": "graph",
      "content": "graph LR\n    A[Direct DB Access<br/>High Latency] -->|Step 1| B[Application Cache<br/>Cache-Aside]\n    B -->|Step 2| C[Distributed Cache<br/>Redis Cluster]\n    C -->|Step 3| D[Multi-Tier<br/>CDN + App + DB Cache]\n    \n    style A fill:#ffb74d,stroke:#f57c00\n    style D fill:#81c784,stroke:#388e3c",
      "line_count": 7,
      "node_count": 4,
      "complexity": "low",
      "category": "scaling"
    },
    {
      "id": "geo-distribution-0-64faf133",
      "file": "scaling/geo-distribution.md",
      "index": 0,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "scaling"
    },
    {
      "id": "geo-distribution-1-3b31a448",
      "file": "scaling/geo-distribution.md",
      "index": 1,
      "type": "graph",
      "content": "graph LR\n    A[Component A] --> B[Component B]\n    B --> C[Component C]",
      "line_count": 3,
      "node_count": 3,
      "complexity": "low",
      "category": "scaling"
    },
    {
      "id": "geo-distribution-2-64faf133",
      "file": "scaling/geo-distribution.md",
      "index": 2,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "scaling"
    },
    {
      "id": "tile-caching-0-3b31a448",
      "file": "scaling/tile-caching.md",
      "index": 0,
      "type": "graph",
      "content": "graph LR\n    A[Component A] --> B[Component B]\n    B --> C[Component C]",
      "line_count": 3,
      "node_count": 3,
      "complexity": "low",
      "category": "scaling"
    },
    {
      "id": "tile-caching-1-d69fcedc",
      "file": "scaling/tile-caching.md",
      "index": 1,
      "type": "graph",
      "content": "graph TD\n    Start[Need This Pattern?] --> Q1{High Traffic?}\n    Q1 -->|Yes| Q2{Distributed System?}\n    Q1 -->|No| Simple[Use Simple Approach]\n    Q2 -->|Yes| Q3{Complex Coordination?}\n    Q2 -->|No| Basic[Use Basic Pattern]\n    Q3 -->|Yes| Advanced[Use This Pattern]\n    Q3 -->|No| Intermediate[Consider Alternatives]\n    \n    style Start fill:#f9f,stroke:#333,stroke-width:2px\n    style Advanced fill:#bfb,stroke:#333,stroke-width:2px\n    style Simple fill:#ffd,stroke:#333,stroke-width:2px",
      "line_count": 12,
      "node_count": 5,
      "complexity": "low",
      "category": "scaling"
    },
    {
      "id": "backpressure-0-05b7b396",
      "file": "scaling/backpressure.md",
      "index": 0,
      "type": "graph",
      "content": "graph LR\n    A[Fast Producer<br/>\ud83d\ude97\ud83d\ude97\ud83d\ude97\ud83d\ude97\ud83d\ude97\ud83d\ude97] --> B[Traffic Control<br/>\ud83d\udea6]\n    B --> C[Slow Consumer<br/>\ud83d\ude97]\n    \n    style A fill:#ff6b6b,stroke:#e55353\n    style B fill:#4ecdc4,stroke:#45a29e  \n    style C fill:#45b7d1,stroke:#3a9bc1",
      "line_count": 7,
      "node_count": 3,
      "complexity": "low",
      "category": "scaling"
    },
    {
      "id": "backpressure-1-569478c4",
      "file": "scaling/backpressure.md",
      "index": 1,
      "type": "graph",
      "content": "graph LR\n    A[No Control<br/>Frequent Crashes] -->|Step 1| B[Simple Blocking<br/>Basic Stability]\n    B -->|Step 2| C[Bounded Queues<br/>Configurable Policy]\n    C -->|Step 3| D[Adaptive Control<br/>ML-driven Optimization]\n    \n    style A fill:#ffb74d,stroke:#f57c00\n    style D fill:#81c784,stroke:#388e3c",
      "line_count": 7,
      "node_count": 4,
      "complexity": "low",
      "category": "scaling"
    },
    {
      "id": "queues-streaming-0-64faf133",
      "file": "scaling/queues-streaming.md",
      "index": 0,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "scaling"
    },
    {
      "id": "queues-streaming-1-64faf133",
      "file": "scaling/queues-streaming.md",
      "index": 1,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "scaling"
    },
    {
      "id": "queues-streaming-2-64faf133",
      "file": "scaling/queues-streaming.md",
      "index": 2,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "scaling"
    },
    {
      "id": "queues-streaming-3-64faf133",
      "file": "scaling/queues-streaming.md",
      "index": 3,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "scaling"
    },
    {
      "id": "queues-streaming-4-64faf133",
      "file": "scaling/queues-streaming.md",
      "index": 4,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "scaling"
    },
    {
      "id": "queues-streaming-5-64faf133",
      "file": "scaling/queues-streaming.md",
      "index": 5,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "scaling"
    },
    {
      "id": "queues-streaming-6-64faf133",
      "file": "scaling/queues-streaming.md",
      "index": 6,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "scaling"
    },
    {
      "id": "analytics-scale-0-0f72feb5",
      "file": "scaling/analytics-scale.md",
      "index": 0,
      "type": "graph",
      "content": "graph LR\n    A[Raw Data<br/>Rivers] --> B[Processing<br/>Factories]\n    B --> C[Insight<br/>Products]\n    \n    style A fill:#81c784,stroke:#388e3c\n    style B fill:#ffb74d,stroke:#f57c00  \n    style C fill:#64b5f6,stroke:#1976d2",
      "line_count": 7,
      "node_count": 3,
      "complexity": "low",
      "category": "scaling"
    },
    {
      "id": "analytics-scale-1-59986d93",
      "file": "scaling/analytics-scale.md",
      "index": 1,
      "type": "graph",
      "content": "graph LR\n    A[Traditional DW<br/>Monolithic] -->|Step 1| B[Hybrid Cloud<br/>Lift & Shift]\n    B -->|Step 2| C[Data Lake<br/>Raw Storage]\n    C -->|Step 3| D[Lakehouse<br/>Unified Analytics]\n    \n    style A fill:#ffb74d,stroke:#f57c00\n    style D fill:#81c784,stroke:#388e3c",
      "line_count": 7,
      "node_count": 4,
      "complexity": "low",
      "category": "scaling"
    },
    {
      "id": "geo-replication-0-64faf133",
      "file": "scaling/geo-replication.md",
      "index": 0,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "scaling"
    },
    {
      "id": "geo-replication-1-64faf133",
      "file": "scaling/geo-replication.md",
      "index": 1,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "scaling"
    },
    {
      "id": "geo-replication-2-64faf133",
      "file": "scaling/geo-replication.md",
      "index": 2,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "scaling"
    },
    {
      "id": "geo-replication-3-64faf133",
      "file": "scaling/geo-replication.md",
      "index": 3,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "scaling"
    },
    {
      "id": "geo-replication-4-64faf133",
      "file": "scaling/geo-replication.md",
      "index": 4,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "scaling"
    },
    {
      "id": "geo-replication-5-3b31a448",
      "file": "scaling/geo-replication.md",
      "index": 5,
      "type": "graph",
      "content": "graph LR\n    A[Component A] --> B[Component B]\n    B --> C[Component C]",
      "line_count": 3,
      "node_count": 3,
      "complexity": "low",
      "category": "scaling"
    },
    {
      "id": "geo-replication-6-64faf133",
      "file": "scaling/geo-replication.md",
      "index": 6,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "scaling"
    },
    {
      "id": "auto-scaling-0-24381806",
      "file": "scaling/auto-scaling.md",
      "index": 0,
      "type": "graph",
      "content": "graph LR\n    A[Traffic Load<br/>\ud83d\udcc8] --> B[Auto-scaler<br/>\u2696\ufe0f]\n    B --> C[Adjusted Capacity<br/>\ud83d\udda5\ufe0f\ud83d\udda5\ufe0f\ud83d\udda5\ufe0f]\n    \n    style A fill:#ff6b6b,stroke:#e55353\n    style B fill:#4ecdc4,stroke:#45a29e  \n    style C fill:#45b7d1,stroke:#3a9bc1",
      "line_count": 7,
      "node_count": 3,
      "complexity": "low",
      "category": "scaling"
    },
    {
      "id": "auto-scaling-1-b3caadf6",
      "file": "scaling/auto-scaling.md",
      "index": 1,
      "type": "graph",
      "content": "graph LR\n    A[Fixed Overprovisioning<br/>High Cost] -->|Step 1| B[Basic Reactive<br/>CPU-based]\n    B -->|Step 2| C[Multi-metric<br/>Policies]\n    C -->|Step 3| D[Predictive Scaling<br/>ML-driven]\n    \n    style A fill:#ffb74d,stroke:#f57c00\n    style D fill:#81c784,stroke:#388e3c",
      "line_count": 7,
      "node_count": 4,
      "complexity": "low",
      "category": "scaling"
    },
    {
      "id": "edge-computing-0-64faf133",
      "file": "scaling/edge-computing.md",
      "index": 0,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "scaling"
    },
    {
      "id": "edge-computing-1-64faf133",
      "file": "scaling/edge-computing.md",
      "index": 1,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "scaling"
    },
    {
      "id": "edge-computing-2-64faf133",
      "file": "scaling/edge-computing.md",
      "index": 2,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "scaling"
    },
    {
      "id": "edge-computing-3-64faf133",
      "file": "scaling/edge-computing.md",
      "index": 3,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "scaling"
    },
    {
      "id": "edge-computing-4-64faf133",
      "file": "scaling/edge-computing.md",
      "index": 4,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "scaling"
    },
    {
      "id": "edge-computing-5-64faf133",
      "file": "scaling/edge-computing.md",
      "index": 5,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "scaling"
    },
    {
      "id": "edge-computing-6-3b31a448",
      "file": "scaling/edge-computing.md",
      "index": 6,
      "type": "graph",
      "content": "graph LR\n    A[Component A] --> B[Component B]\n    B --> C[Component C]",
      "line_count": 3,
      "node_count": 3,
      "complexity": "low",
      "category": "scaling"
    },
    {
      "id": "edge-computing-7-64faf133",
      "file": "scaling/edge-computing.md",
      "index": 7,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "scaling"
    },
    {
      "id": "request-batching-0-3b31a448",
      "file": "scaling/request-batching.md",
      "index": 0,
      "type": "graph",
      "content": "graph LR\n    A[Component A] --> B[Component B]\n    B --> C[Component C]",
      "line_count": 3,
      "node_count": 3,
      "complexity": "low",
      "category": "scaling"
    },
    {
      "id": "request-batching-1-a4ca80d4",
      "file": "scaling/request-batching.md",
      "index": 1,
      "type": "graph",
      "content": "graph LR\n    subgraph \"Metrics\"\n        direction TB\n        L[Latency] -.->|Inverse<br/>Relationship| T[Throughput]\n        BS[Batch Size] -->|Increases| T\n        BS -->|Increases| L\n    end",
      "line_count": 7,
      "node_count": 3,
      "complexity": "low",
      "category": "scaling"
    },
    {
      "id": "request-batching-2-3b31a448",
      "file": "scaling/request-batching.md",
      "index": 2,
      "type": "graph",
      "content": "graph LR\n    A[Component A] --> B[Component B]\n    B --> C[Component C]",
      "line_count": 3,
      "node_count": 3,
      "complexity": "low",
      "category": "scaling"
    },
    {
      "id": "request-batching-3-5e62e7be",
      "file": "scaling/request-batching.md",
      "index": 3,
      "type": "graph",
      "content": "graph LR\n    P1[Producer 1] --> Q[Queue]\n    P2[Producer 2] --> Q\n    P3[Producer 3] --> Q\n    \n    Q --> B[Batcher]\n    B -->|Batch of N| C[Consumer]\n    \n    B -.->|Timer| B\n    B -.->|Size Check| B",
      "line_count": 10,
      "node_count": 6,
      "complexity": "low",
      "category": "scaling"
    },
    {
      "id": "request-batching-4-dc652d9d",
      "file": "scaling/request-batching.md",
      "index": 4,
      "type": "graph",
      "content": "graph TB\n    C[Coordinator] -->|Batched Request| S1[Shard 1]\n    C -->|Batched Request| S2[Shard 2]\n    C -->|Batched Request| S3[Shard 3]\n    \n    S1 -->|Batch Response| A[Aggregator]\n    S2 -->|Batch Response| A\n    S3 -->|Batch Response| A\n    \n    A -->|Combined Result| C",
      "line_count": 10,
      "node_count": 5,
      "complexity": "low",
      "category": "scaling"
    },
    {
      "id": "request-batching-5-e21daebd",
      "file": "scaling/request-batching.md",
      "index": 5,
      "type": "flowchart",
      "content": "flowchart TD\n    A[Start] --> B{Latency<br/>Sensitive?}\n    B -->|Yes| C[Small Batches<br/>10-100]\n    B -->|No| D{Memory<br/>Constrained?}\n    D -->|Yes| E[Medium Batches<br/>100-1000]\n    D -->|No| F{Network<br/>Overhead High?}\n    F -->|Yes| G[Large Batches<br/>1000-10000]\n    F -->|No| H[Adaptive<br/>Strategy]",
      "line_count": 8,
      "node_count": 5,
      "complexity": "low",
      "category": "scaling"
    },
    {
      "id": "request-batching-6-3b31a448",
      "file": "scaling/request-batching.md",
      "index": 6,
      "type": "graph",
      "content": "graph LR\n    A[Component A] --> B[Component B]\n    B --> C[Component C]",
      "line_count": 3,
      "node_count": 3,
      "complexity": "low",
      "category": "scaling"
    },
    {
      "id": "request-batching-7-43d034e3",
      "file": "scaling/request-batching.md",
      "index": 7,
      "type": "graph",
      "content": "graph TB\n    M[Metrics] --> D[Dashboard]\n    L[Logs] --> D\n    T[Traces] --> D\n    \n    D --> A[Alerts]\n    A -->|Queue Full| P1[Increase Workers]\n    A -->|High Latency| P2[Reduce Batch Size]\n    A -->|Low Throughput| P3[Increase Batch Size]",
      "line_count": 9,
      "node_count": 8,
      "complexity": "low",
      "category": "scaling"
    },
    {
      "id": "rate-limiting-0-66e84a86",
      "file": "scaling/rate-limiting.md",
      "index": 0,
      "type": "graph",
      "content": "graph LR\n    A[High Traffic<br/>\ud83d\ude97\ud83d\ude97\ud83d\ude97\ud83d\ude97\ud83d\ude97] --> B[Rate Limiter<br/>\ud83d\udea6]\n    B --> C[Protected Service<br/>\u2705 Stable]\n    \n    style A fill:#ff6b6b,stroke:#e55353\n    style B fill:#4ecdc4,stroke:#45a29e  \n    style C fill:#45b7d1,stroke:#3a9bc1",
      "line_count": 7,
      "node_count": 3,
      "complexity": "low",
      "category": "scaling"
    },
    {
      "id": "rate-limiting-1-8f3c8044",
      "file": "scaling/rate-limiting.md",
      "index": 1,
      "type": "graph",
      "content": "graph LR\n    A[No Protection<br/>Vulnerable to Abuse] -->|Step 1| B[Basic Global<br/>Request Limiting]\n    B -->|Step 2| C[Per-User<br/>Token Bucket]\n    C -->|Step 3| D[Multi-Tier<br/>Cost-Based Quotas]\n    \n    style A fill:#ffb74d,stroke:#f57c00\n    style D fill:#81c784,stroke:#388e3c",
      "line_count": 7,
      "node_count": 4,
      "complexity": "low",
      "category": "scaling"
    },
    {
      "id": "load-balancing-0-e9c54867",
      "file": "scaling/load-balancing.md",
      "index": 0,
      "type": "graph",
      "content": "graph LR\n    A[Client Requests<br/>\ud83c\udf0a] --> B[Load Balancer<br/>\u2696\ufe0f]\n    B --> C[Server Pool<br/>\ud83d\udda5\ufe0f\ud83d\udda5\ufe0f\ud83d\udda5\ufe0f]\n    \n    style A fill:#ff6b6b,stroke:#e55353\n    style B fill:#4ecdc4,stroke:#45a29e  \n    style C fill:#45b7d1,stroke:#3a9bc1",
      "line_count": 7,
      "node_count": 3,
      "complexity": "low",
      "category": "scaling"
    },
    {
      "id": "load-balancing-1-d2b604d5",
      "file": "scaling/load-balancing.md",
      "index": 1,
      "type": "unknown",
      "content": "classDiagram\n    class Component2 {\n        +process() void\n        +validate() bool\n        -state: State\n    }\n    class Handler2 {\n        +handle() Result\n        +configure() void\n    }\n    Component2 --> Handler2 : uses\n    \n    note for Component2 \"Core processing logic\"",
      "line_count": 13,
      "node_count": 0,
      "complexity": "low",
      "category": "scaling"
    },
    {
      "id": "load-balancing-2-2b773006",
      "file": "scaling/load-balancing.md",
      "index": 2,
      "type": "state",
      "content": "stateDiagram-v2\n    [*] --> Request_Received\n    Request_Received --> Health_Check: Validate backends\n    Health_Check --> Algorithm_Selection: Healthy backends found\n    Health_Check --> Fallback_Server: All backends unhealthy\n    Algorithm_Selection --> Route_Request: Select optimal server\n    Route_Request --> Monitor_Response: Forward to backend\n    Monitor_Response --> Update_Metrics: Track performance\n    Update_Metrics --> [*]: Complete\n    Fallback_Server --> [*]: Emergency response",
      "line_count": 10,
      "node_count": 0,
      "complexity": "low",
      "category": "scaling"
    },
    {
      "id": "load-balancing-3-eef767ee",
      "file": "scaling/load-balancing.md",
      "index": 3,
      "type": "graph",
      "content": "graph LR\n    A[Single Server<br/>No Redundancy] -->|Step 1| B[Basic LB<br/>Round-Robin]\n    B -->|Step 2| C[Health Monitoring<br/>Automatic Failover]\n    C -->|Step 3| D[Multi-Tier LB<br/>Geographic Distribution]\n    \n    style A fill:#ffb74d,stroke:#f57c00\n    style D fill:#81c784,stroke:#388e3c",
      "line_count": 7,
      "node_count": 4,
      "complexity": "low",
      "category": "scaling"
    },
    {
      "id": "service-discovery-0-64faf133",
      "file": "communication/service-discovery.md",
      "index": 0,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]\n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "communication"
    },
    {
      "id": "service-discovery-1-9821a5fc",
      "file": "communication/service-discovery.md",
      "index": 1,
      "type": "graph",
      "content": "graph TD\n    A[Input] --> B[Process]  \n    B --> C[Output]\n    B --> D[Error Handling]\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "communication"
    },
    {
      "id": "load-shedding-0-88b270e9",
      "file": "resilience/load-shedding.md",
      "index": 0,
      "type": "unknown",
      "content": "classDiagram\n    class Component4 {\n        +process() void\n        +validate() bool\n        -state: State\n    }\n    class Handler4 {\n        +handle() Result\n        +configure() void\n    }\n    Component4 --> Handler4 : uses\n    \n    note for Component4 \"Core processing logic\"",
      "line_count": 13,
      "node_count": 0,
      "complexity": "low",
      "category": "resilience"
    },
    {
      "id": "timeout-0-e389d21a",
      "file": "resilience/timeout.md",
      "index": 0,
      "type": "graph",
      "content": "graph LR\n    A[Client: 30s] --> B[Gateway: 25s]\n    B --> C[Service: 20s]\n    C --> D[Database: 15s]\n    \n    style A fill:#e1f5fe\n    style B fill:#b3e5fc\n    style C fill:#81d4fa\n    style D fill:#4fc3f7",
      "line_count": 9,
      "node_count": 4,
      "complexity": "low",
      "category": "resilience"
    },
    {
      "id": "timeout-1-05257271",
      "file": "resilience/timeout.md",
      "index": 1,
      "type": "graph",
      "content": "graph TD\n    A[Select Strategy] --> B{System Type?}\n    B -->|Simple| C[Fixed Timeout<br/>All ops: 30s]\n    B -->|Complex| D{Load Pattern?}\n    D -->|Predictable| E[Tiered Timeout<br/>Read: 5s<br/>Write: 30s]\n    D -->|Variable| F{Criticality?}\n    F -->|High| G[Adaptive Timeout<br/>P99 \u00d7 1.5]\n    F -->|Low| H[Aggressive Timeout<br/>P50 + 1s]",
      "line_count": 8,
      "node_count": 5,
      "complexity": "low",
      "category": "resilience"
    },
    {
      "id": "timeout-2-c2435e99",
      "file": "resilience/timeout.md",
      "index": 2,
      "type": "graph",
      "content": "graph TD\n    A[Measure Latency] --> B{Performance?}\n    B -->|Good| C[Decrease 10%]\n    B -->|Normal| D[No Change]\n    B -->|Poor| E[Increase 20%]\n    C --> F[Min: P50]\n    E --> G[Max: P99 \u00d7 2]",
      "line_count": 7,
      "node_count": 6,
      "complexity": "low",
      "category": "resilience"
    },
    {
      "id": "index-0-b29815a4",
      "file": "resilience/index.md",
      "index": 0,
      "type": "graph",
      "content": "graph TD\n    CB[Circuit Breaker] --> TO[Timeout]\n    CB --> RB[Retry & Backoff]\n    BH[Bulkhead] --> CB\n    HC[Health Check] --> FO[Failover]\n    HB[Heartbeat] --> HC\n    GD[Graceful Degradation] --> LS[Load Shedding]\n    TO --> RB\n    \n    style CB fill:#f9f,stroke:#333,stroke-width:4px\n    style TO fill:#bbf,stroke:#333,stroke-width:2px\n    style BH fill:#bbf,stroke:#333,stroke-width:2px",
      "line_count": 12,
      "node_count": 9,
      "complexity": "low",
      "category": "resilience"
    },
    {
      "id": "heartbeat-0-c873e997",
      "file": "resilience/heartbeat.md",
      "index": 0,
      "type": "unknown",
      "content": "classDiagram\n    class Component5 {\n        +process() void\n        +validate() bool\n        -state: State\n    }\n    class Handler5 {\n        +handle() Result\n        +configure() void\n    }\n    Component5 --> Handler5 : uses\n    \n    note for Component5 \"Core processing logic\"",
      "line_count": 13,
      "node_count": 0,
      "complexity": "low",
      "category": "resilience"
    },
    {
      "id": "circuit-breaker-0-ab835492",
      "file": "resilience/circuit-breaker.md",
      "index": 0,
      "type": "graph",
      "content": "graph TD\n    A[Service Type] --> B{Criticality?}\n    B -->|Critical| C[Conservative<br/>Threshold: 80%<br/>Timeout: 60s]\n    B -->|Standard| D[Balanced<br/>Threshold: 50%<br/>Timeout: 30s]\n    B -->|Non-critical| E[Aggressive<br/>Threshold: 20%<br/>Timeout: 10s]\n    \n    C --> F[Payment Service]\n    D --> G[User Profile]\n    E --> H[Recommendations]",
      "line_count": 9,
      "node_count": 7,
      "complexity": "low",
      "category": "resilience"
    },
    {
      "id": "circuit-breaker-1-a1fe1641",
      "file": "resilience/circuit-breaker.md",
      "index": 1,
      "type": "graph",
      "content": "graph TD\n    A[Start] --> B{External<br/>Dependency?}\n    B -->|No| C[No Circuit Breaker]\n    B -->|Yes| D{Network<br/>Call?}\n    D -->|No| C\n    D -->|Yes| E{Critical<br/>Path?}\n    E -->|Yes| F[Conservative CB<br/>80% threshold]\n    E -->|No| G{High<br/>Volume?}\n    G -->|Yes| H[Standard CB<br/>50% threshold]\n    G -->|No| I[Aggressive CB<br/>20% threshold]",
      "line_count": 10,
      "node_count": 5,
      "complexity": "low",
      "category": "resilience"
    },
    {
      "id": "split-brain-0-c873e997",
      "file": "resilience/split-brain.md",
      "index": 0,
      "type": "unknown",
      "content": "classDiagram\n    class Component5 {\n        +process() void\n        +validate() bool\n        -state: State\n    }\n    class Handler5 {\n        +handle() Result\n        +configure() void\n    }\n    Component5 --> Handler5 : uses\n    \n    note for Component5 \"Core processing logic\"",
      "line_count": 13,
      "node_count": 0,
      "complexity": "low",
      "category": "resilience"
    },
    {
      "id": "health-check-0-04529204",
      "file": "resilience/health-check.md",
      "index": 0,
      "type": "graph",
      "content": "graph LR\n    A[/health/live] --> B[Process Check<br/>Memory Check<br/>Deadlock Check]\n    C[/health/ready] --> D[Database Connected<br/>Cache Warmed<br/>Config Loaded]\n    E[/health/startup] --> F[Migrations Done<br/>Indexes Built<br/>Plugins Loaded]",
      "line_count": 4,
      "node_count": 6,
      "complexity": "low",
      "category": "resilience"
    }
  ]
}